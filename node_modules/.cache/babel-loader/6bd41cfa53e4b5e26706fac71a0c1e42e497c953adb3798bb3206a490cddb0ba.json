{"ast":null,"code":"/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/snabbdom/snabbdom/blob/master/LICENSE\n *\n * Modified for Stencil's renderer and slot projection\n */\nlet scopeId;\nlet contentRef;\nlet hostTagName;\nlet customError;\nlet i = 0;\nlet useNativeShadowDom = false;\nlet checkSlotFallbackVisibility = false;\nlet checkSlotRelocate = false;\nlet isSvgMode = false;\nlet renderingRef = null;\nlet queueCongestion = 0;\nlet queuePending = false;\n/*\n Stencil Client Platform v4.8.0 | MIT Licensed | https://stenciljs.com\n */\nimport { BUILD, NAMESPACE } from '@stencil/core/internal/app-data';\nconst Build = {\n  isDev: BUILD.isDev ? true : false,\n  isBrowser: true,\n  isServer: false,\n  isTesting: BUILD.isTesting ? true : false\n};\nconst getAssetPath = path => {\n  const assetUrl = new URL(path, plt.$resourcesUrl$);\n  return assetUrl.origin !== win.location.origin ? assetUrl.href : assetUrl.pathname;\n};\nconst setAssetPath = path => plt.$resourcesUrl$ = path;\nconst createTime = function (fnName) {\n  let tagName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  if (BUILD.profile && performance.mark) {\n    const key = `st:${fnName}:${tagName}:${i++}`;\n    // Start\n    performance.mark(key);\n    // End\n    return () => performance.measure(`[Stencil] ${fnName}() <${tagName}>`, key);\n  } else {\n    return () => {\n      return;\n    };\n  }\n};\nconst uniqueTime = (key, measureText) => {\n  if (BUILD.profile && performance.mark) {\n    if (performance.getEntriesByName(key, 'mark').length === 0) {\n      performance.mark(key);\n    }\n    return () => {\n      if (performance.getEntriesByName(measureText, 'measure').length === 0) {\n        performance.measure(measureText, key);\n      }\n    };\n  } else {\n    return () => {\n      return;\n    };\n  }\n};\nconst inspect = ref => {\n  const hostRef = getHostRef(ref);\n  if (!hostRef) {\n    return undefined;\n  }\n  const flags = hostRef.$flags$;\n  const hostElement = hostRef.$hostElement$;\n  return {\n    renderCount: hostRef.$renderCount$,\n    flags: {\n      hasRendered: !!(flags & 2 /* HOST_FLAGS.hasRendered */),\n      hasConnected: !!(flags & 1 /* HOST_FLAGS.hasConnected */),\n      isWaitingForChildren: !!(flags & 4 /* HOST_FLAGS.isWaitingForChildren */),\n      isConstructingInstance: !!(flags & 8 /* HOST_FLAGS.isConstructingInstance */),\n      isQueuedForUpdate: !!(flags & 16 /* HOST_FLAGS.isQueuedForUpdate */),\n      hasInitializedComponent: !!(flags & 32 /* HOST_FLAGS.hasInitializedComponent */),\n      hasLoadedComponent: !!(flags & 64 /* HOST_FLAGS.hasLoadedComponent */),\n      isWatchReady: !!(flags & 128 /* HOST_FLAGS.isWatchReady */),\n      isListenReady: !!(flags & 256 /* HOST_FLAGS.isListenReady */),\n      needsRerender: !!(flags & 512 /* HOST_FLAGS.needsRerender */)\n    },\n    instanceValues: hostRef.$instanceValues$,\n    ancestorComponent: hostRef.$ancestorComponent$,\n    hostElement,\n    lazyInstance: hostRef.$lazyInstance$,\n    vnode: hostRef.$vnode$,\n    modeName: hostRef.$modeName$,\n    onReadyPromise: hostRef.$onReadyPromise$,\n    onReadyResolve: hostRef.$onReadyResolve$,\n    onInstancePromise: hostRef.$onInstancePromise$,\n    onInstanceResolve: hostRef.$onInstanceResolve$,\n    onRenderResolve: hostRef.$onRenderResolve$,\n    queuedListeners: hostRef.$queuedListeners$,\n    rmListeners: hostRef.$rmListeners$,\n    ['s-id']: hostElement['s-id'],\n    ['s-cr']: hostElement['s-cr'],\n    ['s-lr']: hostElement['s-lr'],\n    ['s-p']: hostElement['s-p'],\n    ['s-rc']: hostElement['s-rc'],\n    ['s-sc']: hostElement['s-sc']\n  };\n};\nconst installDevTools = () => {\n  if (BUILD.devTools) {\n    const stencil = win.stencil = win.stencil || {};\n    const originalInspect = stencil.inspect;\n    stencil.inspect = ref => {\n      let result = inspect(ref);\n      if (!result && typeof originalInspect === 'function') {\n        result = originalInspect(ref);\n      }\n      return result;\n    };\n  }\n};\nconst CONTENT_REF_ID = 'r';\nconst ORG_LOCATION_ID = 'o';\nconst SLOT_NODE_ID = 's';\nconst TEXT_NODE_ID = 't';\nconst HYDRATE_ID = 's-id';\nconst HYDRATED_STYLE_ID = 'sty-id';\nconst HYDRATE_CHILD_ID = 'c-id';\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\n/**\n * Constant for styles to be globally applied to `slot-fb` elements for pseudo-slot behavior.\n *\n * Two cascading rules must be used instead of a `:not()` selector due to Stencil browser\n * support as of Stencil v4.\n */\nconst SLOT_FB_CSS = 'slot-fb{display:contents}slot-fb[hidden]{display:none}';\nconst XLINK_NS = 'http://www.w3.org/1999/xlink';\nconst FORM_ASSOCIATED_CUSTOM_ELEMENT_CALLBACKS = ['formAssociatedCallback', 'formResetCallback', 'formDisabledCallback', 'formStateRestoreCallback'];\n/**\n * Default style mode id\n */\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\nconst EMPTY_OBJ = {};\n/**\n * Namespaces\n */\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst HTML_NS = 'http://www.w3.org/1999/xhtml';\nconst isDef = v => v != null;\n/**\n * Check whether a value is a 'complex type', defined here as an object or a\n * function.\n *\n * @param o the value to check\n * @returns whether it's a complex type or not\n */\nconst isComplexType = o => {\n  // https://jsperf.com/typeof-fn-object/5\n  o = typeof o;\n  return o === 'object' || o === 'function';\n};\n/**\n * Helper method for querying a `meta` tag that contains a nonce value\n * out of a DOM's head.\n *\n * @param doc The DOM containing the `head` to query against\n * @returns The content of the meta tag representing the nonce value, or `undefined` if no tag\n * exists or the tag has no content.\n */\nfunction queryNonceMetaTagContent(doc) {\n  var _a, _b, _c;\n  return (_c = (_b = (_a = doc.head) === null || _a === void 0 ? void 0 : _a.querySelector('meta[name=\"csp-nonce\"]')) === null || _b === void 0 ? void 0 : _b.getAttribute('content')) !== null && _c !== void 0 ? _c : undefined;\n}\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\nconst h = function (nodeName, vnodeData) {\n  let child = null;\n  let key = null;\n  let slotName = null;\n  let simple = false;\n  let lastSimple = false;\n  const vNodeChildren = [];\n  const walk = c => {\n    for (let i = 0; i < c.length; i++) {\n      child = c[i];\n      if (Array.isArray(child)) {\n        walk(child);\n      } else if (child != null && typeof child !== 'boolean') {\n        if (simple = typeof nodeName !== 'function' && !isComplexType(child)) {\n          child = String(child);\n        } else if (BUILD.isDev && typeof nodeName !== 'function' && child.$flags$ === undefined) {\n          consoleDevError(`vNode passed as children has unexpected type.\nMake sure it's using the correct h() function.\nEmpty objects can also be the cause, look for JSX comments that became objects.`);\n        }\n        if (simple && lastSimple) {\n          // If the previous child was simple (string), we merge both\n          vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n        } else {\n          // Append a new vNode, if it's text, we create a text vNode\n          vNodeChildren.push(simple ? newVNode(null, child) : child);\n        }\n        lastSimple = simple;\n      }\n    }\n  };\n  for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    children[_key - 2] = arguments[_key];\n  }\n  walk(children);\n  if (vnodeData) {\n    if (BUILD.isDev && nodeName === 'input') {\n      validateInputProperties(vnodeData);\n    }\n    if (BUILD.vdomKey && vnodeData.key) {\n      key = vnodeData.key;\n    }\n    if (BUILD.slotRelocation && vnodeData.name) {\n      slotName = vnodeData.name;\n    }\n    // normalize class / className attributes\n    if (BUILD.vdomClass) {\n      const classData = vnodeData.className || vnodeData.class;\n      if (classData) {\n        vnodeData.class = typeof classData !== 'object' ? classData : Object.keys(classData).filter(k => classData[k]).join(' ');\n      }\n    }\n  }\n  if (BUILD.isDev && vNodeChildren.some(isHost)) {\n    consoleDevError(`The <Host> must be the single root component. Make sure:\n- You are NOT using hostData() and <Host> in the same component.\n- <Host> is used once, and it's the single root component of the render() function.`);\n  }\n  if (BUILD.vdomFunctional && typeof nodeName === 'function') {\n    // nodeName is a functional component\n    return nodeName(vnodeData === null ? {} : vnodeData, vNodeChildren, vdomFnUtils);\n  }\n  const vnode = newVNode(nodeName, null);\n  vnode.$attrs$ = vnodeData;\n  if (vNodeChildren.length > 0) {\n    vnode.$children$ = vNodeChildren;\n  }\n  if (BUILD.vdomKey) {\n    vnode.$key$ = key;\n  }\n  if (BUILD.slotRelocation) {\n    vnode.$name$ = slotName;\n  }\n  return vnode;\n};\n/**\n * A utility function for creating a virtual DOM node from a tag and some\n * possible text content.\n *\n * @param tag the tag for this element\n * @param text possible text content for the node\n * @returns a newly-minted virtual DOM node\n */\nconst newVNode = (tag, text) => {\n  const vnode = {\n    $flags$: 0,\n    $tag$: tag,\n    $text$: text,\n    $elm$: null,\n    $children$: null\n  };\n  if (BUILD.vdomAttribute) {\n    vnode.$attrs$ = null;\n  }\n  if (BUILD.vdomKey) {\n    vnode.$key$ = null;\n  }\n  if (BUILD.slotRelocation) {\n    vnode.$name$ = null;\n  }\n  return vnode;\n};\nconst Host = {};\n/**\n * Check whether a given node is a Host node or not\n *\n * @param node the virtual DOM node to check\n * @returns whether it's a Host node or not\n */\nconst isHost = node => node && node.$tag$ === Host;\n/**\n * Implementation of {@link d.FunctionalUtilities} for Stencil's VDom.\n *\n * Note that these functions convert from {@link d.VNode} to\n * {@link d.ChildNode} to give functional component developers a friendly\n * interface.\n */\nconst vdomFnUtils = {\n  forEach: (children, cb) => children.map(convertToPublic).forEach(cb),\n  map: (children, cb) => children.map(convertToPublic).map(cb).map(convertToPrivate)\n};\n/**\n * Convert a {@link d.VNode} to a {@link d.ChildNode} in order to present a\n * friendlier public interface (hence, 'convertToPublic').\n *\n * @param node the virtual DOM node to convert\n * @returns a converted child node\n */\nconst convertToPublic = node => ({\n  vattrs: node.$attrs$,\n  vchildren: node.$children$,\n  vkey: node.$key$,\n  vname: node.$name$,\n  vtag: node.$tag$,\n  vtext: node.$text$\n});\n/**\n * Convert a {@link d.ChildNode} back to an equivalent {@link d.VNode} in\n * order to use the resulting object in the virtual DOM. The initial object was\n * likely created as part of presenting a public API, so converting it back\n * involved making it 'private' again (hence, `convertToPrivate`).\n *\n * @param node the child node to convert\n * @returns a converted virtual DOM node\n */\nconst convertToPrivate = node => {\n  if (typeof node.vtag === 'function') {\n    const vnodeData = Object.assign({}, node.vattrs);\n    if (node.vkey) {\n      vnodeData.key = node.vkey;\n    }\n    if (node.vname) {\n      vnodeData.name = node.vname;\n    }\n    return h(node.vtag, vnodeData, ...(node.vchildren || []));\n  }\n  const vnode = newVNode(node.vtag, node.vtext);\n  vnode.$attrs$ = node.vattrs;\n  vnode.$children$ = node.vchildren;\n  vnode.$key$ = node.vkey;\n  vnode.$name$ = node.vname;\n  return vnode;\n};\n/**\n * Validates the ordering of attributes on an input element\n *\n * @param inputElm the element to validate\n */\nconst validateInputProperties = inputElm => {\n  const props = Object.keys(inputElm);\n  const value = props.indexOf('value');\n  if (value === -1) {\n    return;\n  }\n  const typeIndex = props.indexOf('type');\n  const minIndex = props.indexOf('min');\n  const maxIndex = props.indexOf('max');\n  const stepIndex = props.indexOf('step');\n  if (value < typeIndex || value < minIndex || value < maxIndex || value < stepIndex) {\n    consoleDevWarn(`The \"value\" prop of <input> should be set after \"min\", \"max\", \"type\" and \"step\"`);\n  }\n};\nconst initializeClientHydrate = (hostElm, tagName, hostId, hostRef) => {\n  const endHydrate = createTime('hydrateClient', tagName);\n  const shadowRoot = hostElm.shadowRoot;\n  const childRenderNodes = [];\n  const slotNodes = [];\n  const shadowRootNodes = BUILD.shadowDom && shadowRoot ? [] : null;\n  const vnode = hostRef.$vnode$ = newVNode(tagName, null);\n  if (!plt.$orgLocNodes$) {\n    initializeDocumentHydrate(doc.body, plt.$orgLocNodes$ = new Map());\n  }\n  hostElm[HYDRATE_ID] = hostId;\n  hostElm.removeAttribute(HYDRATE_ID);\n  clientHydrate(vnode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, hostElm, hostId);\n  childRenderNodes.map(c => {\n    const orgLocationId = c.$hostId$ + '.' + c.$nodeId$;\n    const orgLocationNode = plt.$orgLocNodes$.get(orgLocationId);\n    const node = c.$elm$;\n    if (orgLocationNode && supportsShadow && orgLocationNode['s-en'] === '') {\n      orgLocationNode.parentNode.insertBefore(node, orgLocationNode.nextSibling);\n    }\n    if (!shadowRoot) {\n      node['s-hn'] = tagName;\n      if (orgLocationNode) {\n        node['s-ol'] = orgLocationNode;\n        node['s-ol']['s-nr'] = node;\n      }\n    }\n    plt.$orgLocNodes$.delete(orgLocationId);\n  });\n  if (BUILD.shadowDom && shadowRoot) {\n    shadowRootNodes.map(shadowRootNode => {\n      if (shadowRootNode) {\n        shadowRoot.appendChild(shadowRootNode);\n      }\n    });\n  }\n  endHydrate();\n};\nconst clientHydrate = (parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node, hostId) => {\n  let childNodeType;\n  let childIdSplt;\n  let childVNode;\n  let i;\n  if (node.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n    childNodeType = node.getAttribute(HYDRATE_CHILD_ID);\n    if (childNodeType) {\n      // got the node data from the element's attribute\n      // `${hostId}.${nodeId}.${depth}.${index}`\n      childIdSplt = childNodeType.split('.');\n      if (childIdSplt[0] === hostId || childIdSplt[0] === '0') {\n        childVNode = {\n          $flags$: 0,\n          $hostId$: childIdSplt[0],\n          $nodeId$: childIdSplt[1],\n          $depth$: childIdSplt[2],\n          $index$: childIdSplt[3],\n          $tag$: node.tagName.toLowerCase(),\n          $elm$: node,\n          $attrs$: null,\n          $children$: null,\n          $key$: null,\n          $name$: null,\n          $text$: null\n        };\n        childRenderNodes.push(childVNode);\n        node.removeAttribute(HYDRATE_CHILD_ID);\n        // this is a new child vnode\n        // so ensure its parent vnode has the vchildren array\n        if (!parentVNode.$children$) {\n          parentVNode.$children$ = [];\n        }\n        // add our child vnode to a specific index of the vnode's children\n        parentVNode.$children$[childVNode.$index$] = childVNode;\n        // this is now the new parent vnode for all the next child checks\n        parentVNode = childVNode;\n        if (shadowRootNodes && childVNode.$depth$ === '0') {\n          shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n        }\n      }\n    }\n    // recursively drill down, end to start so we can remove nodes\n    for (i = node.childNodes.length - 1; i >= 0; i--) {\n      clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.childNodes[i], hostId);\n    }\n    if (node.shadowRoot) {\n      // keep drilling down through the shadow root nodes\n      for (i = node.shadowRoot.childNodes.length - 1; i >= 0; i--) {\n        clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.shadowRoot.childNodes[i], hostId);\n      }\n    }\n  } else if (node.nodeType === 8 /* NODE_TYPE.CommentNode */) {\n    // `${COMMENT_TYPE}.${hostId}.${nodeId}.${depth}.${index}`\n    childIdSplt = node.nodeValue.split('.');\n    if (childIdSplt[1] === hostId || childIdSplt[1] === '0') {\n      // comment node for either the host id or a 0 host id\n      childNodeType = childIdSplt[0];\n      childVNode = {\n        $flags$: 0,\n        $hostId$: childIdSplt[1],\n        $nodeId$: childIdSplt[2],\n        $depth$: childIdSplt[3],\n        $index$: childIdSplt[4],\n        $elm$: node,\n        $attrs$: null,\n        $children$: null,\n        $key$: null,\n        $name$: null,\n        $tag$: null,\n        $text$: null\n      };\n      if (childNodeType === TEXT_NODE_ID) {\n        childVNode.$elm$ = node.nextSibling;\n        if (childVNode.$elm$ && childVNode.$elm$.nodeType === 3 /* NODE_TYPE.TextNode */) {\n          childVNode.$text$ = childVNode.$elm$.textContent;\n          childRenderNodes.push(childVNode);\n          // remove the text comment since it's no longer needed\n          node.remove();\n          if (!parentVNode.$children$) {\n            parentVNode.$children$ = [];\n          }\n          parentVNode.$children$[childVNode.$index$] = childVNode;\n          if (shadowRootNodes && childVNode.$depth$ === '0') {\n            shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n          }\n        }\n      } else if (childVNode.$hostId$ === hostId) {\n        // this comment node is specifically for this host id\n        if (childNodeType === SLOT_NODE_ID) {\n          // `${SLOT_NODE_ID}.${hostId}.${nodeId}.${depth}.${index}.${slotName}`;\n          childVNode.$tag$ = 'slot';\n          if (childIdSplt[5]) {\n            node['s-sn'] = childVNode.$name$ = childIdSplt[5];\n          } else {\n            node['s-sn'] = '';\n          }\n          node['s-sr'] = true;\n          if (BUILD.shadowDom && shadowRootNodes) {\n            // browser support shadowRoot and this is a shadow dom component\n            // create an actual slot element\n            childVNode.$elm$ = doc.createElement(childVNode.$tag$);\n            if (childVNode.$name$) {\n              // add the slot name attribute\n              childVNode.$elm$.setAttribute('name', childVNode.$name$);\n            }\n            // insert the new slot element before the slot comment\n            node.parentNode.insertBefore(childVNode.$elm$, node);\n            // remove the slot comment since it's not needed for shadow\n            node.remove();\n            if (childVNode.$depth$ === '0') {\n              shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n            }\n          }\n          slotNodes.push(childVNode);\n          if (!parentVNode.$children$) {\n            parentVNode.$children$ = [];\n          }\n          parentVNode.$children$[childVNode.$index$] = childVNode;\n        } else if (childNodeType === CONTENT_REF_ID) {\n          // `${CONTENT_REF_ID}.${hostId}`;\n          if (BUILD.shadowDom && shadowRootNodes) {\n            // remove the content ref comment since it's not needed for shadow\n            node.remove();\n          } else if (BUILD.slotRelocation) {\n            hostElm['s-cr'] = node;\n            node['s-cn'] = true;\n          }\n        }\n      }\n    }\n  } else if (parentVNode && parentVNode.$tag$ === 'style') {\n    const vnode = newVNode(null, node.textContent);\n    vnode.$elm$ = node;\n    vnode.$index$ = '0';\n    parentVNode.$children$ = [vnode];\n  }\n};\nconst initializeDocumentHydrate = (node, orgLocNodes) => {\n  if (node.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n    let i = 0;\n    for (; i < node.childNodes.length; i++) {\n      initializeDocumentHydrate(node.childNodes[i], orgLocNodes);\n    }\n    if (node.shadowRoot) {\n      for (i = 0; i < node.shadowRoot.childNodes.length; i++) {\n        initializeDocumentHydrate(node.shadowRoot.childNodes[i], orgLocNodes);\n      }\n    }\n  } else if (node.nodeType === 8 /* NODE_TYPE.CommentNode */) {\n    const childIdSplt = node.nodeValue.split('.');\n    if (childIdSplt[0] === ORG_LOCATION_ID) {\n      orgLocNodes.set(childIdSplt[1] + '.' + childIdSplt[2], node);\n      node.nodeValue = '';\n      // useful to know if the original location is\n      // the root light-dom of a shadow dom component\n      node['s-en'] = childIdSplt[3];\n    }\n  }\n};\n// Private\nconst computeMode = elm => modeResolutionChain.map(h => h(elm)).find(m => !!m);\n// Public\nconst setMode = handler => modeResolutionChain.push(handler);\nconst getMode = ref => getHostRef(ref).$modeName$;\n/**\n * Parse a new property value for a given property type.\n *\n * While the prop value can reasonably be expected to be of `any` type as far as TypeScript's type checker is concerned,\n * it is not safe to assume that the string returned by evaluating `typeof propValue` matches:\n *   1. `any`, the type given to `propValue` in the function signature\n *   2. the type stored from `propType`.\n *\n * This function provides the capability to parse/coerce a property's value to potentially any other JavaScript type.\n *\n * Property values represented in TSX preserve their type information. In the example below, the number 0 is passed to\n * a component. This `propValue` will preserve its type information (`typeof propValue === 'number'`). Note that is\n * based on the type of the value being passed in, not the type declared of the class member decorated with `@Prop`.\n * ```tsx\n * <my-cmp prop-val={0}></my-cmp>\n * ```\n *\n * HTML prop values on the other hand, will always a string\n *\n * @param propValue the new value to coerce to some type\n * @param propType the type of the prop, expressed as a binary number\n * @returns the parsed/coerced value\n */\nconst parsePropertyValue = (propValue, propType) => {\n  // ensure this value is of the correct prop type\n  if (propValue != null && !isComplexType(propValue)) {\n    if (BUILD.propBoolean && propType & 4 /* MEMBER_FLAGS.Boolean */) {\n      // per the HTML spec, any string value means it is a boolean true value\n      // but we'll cheat here and say that the string \"false\" is the boolean false\n      return propValue === 'false' ? false : propValue === '' || !!propValue;\n    }\n    if (BUILD.propNumber && propType & 2 /* MEMBER_FLAGS.Number */) {\n      // force it to be a number\n      return parseFloat(propValue);\n    }\n    if (BUILD.propString && propType & 1 /* MEMBER_FLAGS.String */) {\n      // could have been passed as a number or boolean\n      // but we still want it as a string\n      return String(propValue);\n    }\n    // redundant return here for better minification\n    return propValue;\n  }\n  // not sure exactly what type we want\n  // so no need to change to a different type\n  return propValue;\n};\nconst getElement = ref => BUILD.lazyLoad ? getHostRef(ref).$hostElement$ : ref;\nconst createEvent = (ref, name, flags) => {\n  const elm = getElement(ref);\n  return {\n    emit: detail => {\n      if (BUILD.isDev && !elm.isConnected) {\n        consoleDevWarn(`The \"${name}\" event was emitted, but the dispatcher node is no longer connected to the dom.`);\n      }\n      return emitEvent(elm, name, {\n        bubbles: !!(flags & 4 /* EVENT_FLAGS.Bubbles */),\n        composed: !!(flags & 2 /* EVENT_FLAGS.Composed */),\n        cancelable: !!(flags & 1 /* EVENT_FLAGS.Cancellable */),\n        detail\n      });\n    }\n  };\n};\n/**\n * Helper function to create & dispatch a custom Event on a provided target\n * @param elm the target of the Event\n * @param name the name to give the custom Event\n * @param opts options for configuring a custom Event\n * @returns the custom Event\n */\nconst emitEvent = (elm, name, opts) => {\n  const ev = plt.ce(name, opts);\n  elm.dispatchEvent(ev);\n  return ev;\n};\nconst rootAppliedStyles = /*@__PURE__*/new WeakMap();\nconst registerStyle = (scopeId, cssText, allowCS) => {\n  let style = styles.get(scopeId);\n  if (supportsConstructableStylesheets && allowCS) {\n    style = style || new CSSStyleSheet();\n    if (typeof style === 'string') {\n      style = cssText;\n    } else {\n      style.replaceSync(cssText);\n    }\n  } else {\n    style = cssText;\n  }\n  styles.set(scopeId, style);\n};\nconst addStyle = (styleContainerNode, cmpMeta, mode) => {\n  var _a;\n  const scopeId = getScopeId(cmpMeta, mode);\n  const style = styles.get(scopeId);\n  if (!BUILD.attachStyles) {\n    return scopeId;\n  }\n  // if an element is NOT connected then getRootNode() will return the wrong root node\n  // so the fallback is to always use the document for the root node in those cases\n  styleContainerNode = styleContainerNode.nodeType === 11 /* NODE_TYPE.DocumentFragment */ ? styleContainerNode : doc;\n  if (style) {\n    if (typeof style === 'string') {\n      styleContainerNode = styleContainerNode.head || styleContainerNode;\n      let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n      let styleElm;\n      if (!appliedStyles) {\n        rootAppliedStyles.set(styleContainerNode, appliedStyles = new Set());\n      }\n      if (!appliedStyles.has(scopeId)) {\n        if (BUILD.hydrateClientSide && styleContainerNode.host && (styleElm = styleContainerNode.querySelector(`[${HYDRATED_STYLE_ID}=\"${scopeId}\"]`))) {\n          // This is only happening on native shadow-dom, do not needs CSS var shim\n          styleElm.innerHTML = style;\n        } else {\n          styleElm = doc.createElement('style');\n          styleElm.innerHTML = style;\n          // Apply CSP nonce to the style tag if it exists\n          const nonce = (_a = plt.$nonce$) !== null && _a !== void 0 ? _a : queryNonceMetaTagContent(doc);\n          if (nonce != null) {\n            styleElm.setAttribute('nonce', nonce);\n          }\n          if (BUILD.hydrateServerSide || BUILD.hotModuleReplacement) {\n            styleElm.setAttribute(HYDRATED_STYLE_ID, scopeId);\n          }\n          styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n        }\n        // Add styles for `slot-fb` elements if we're using slots outside the Shadow DOM\n        if (cmpMeta.$flags$ & 4 /* CMP_FLAGS.hasSlotRelocation */) {\n          styleElm.innerHTML += SLOT_FB_CSS;\n        }\n        if (appliedStyles) {\n          appliedStyles.add(scopeId);\n        }\n      }\n    } else if (BUILD.constructableCSS && !styleContainerNode.adoptedStyleSheets.includes(style)) {\n      styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n    }\n  }\n  return scopeId;\n};\nconst attachStyles = hostRef => {\n  const cmpMeta = hostRef.$cmpMeta$;\n  const elm = hostRef.$hostElement$;\n  const flags = cmpMeta.$flags$;\n  const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n  const scopeId = addStyle(BUILD.shadowDom && supportsShadow && elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta, hostRef.$modeName$);\n  if ((BUILD.shadowDom || BUILD.scoped) && BUILD.cssAnnotations && flags & 10 /* CMP_FLAGS.needsScopedEncapsulation */) {\n    // only required when we're NOT using native shadow dom (slot)\n    // or this browser doesn't support native shadow dom\n    // and this host element was NOT created with SSR\n    // let's pick out the inner content for slot projection\n    // create a node to represent where the original\n    // content was first placed, which is useful later on\n    // DOM WRITE!!\n    elm['s-sc'] = scopeId;\n    elm.classList.add(scopeId + '-h');\n    if (BUILD.scoped && flags & 2 /* CMP_FLAGS.scopedCssEncapsulation */) {\n      elm.classList.add(scopeId + '-s');\n    }\n  }\n  endAttachStyles();\n};\nconst getScopeId = (cmp, mode) => 'sc-' + (BUILD.mode && mode && cmp.$flags$ & 32 /* CMP_FLAGS.hasMode */ ? cmp.$tagName$ + '-' + mode : cmp.$tagName$);\nconst convertScopedToShadow = css => css.replace(/\\/\\*!@([^\\/]+)\\*\\/[^\\{]+\\{/g, '$1{');\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n/**\n * When running a VDom render set properties present on a VDom node onto the\n * corresponding HTML element.\n *\n * Note that this function has special functionality for the `class`,\n * `style`, `key`, and `ref` attributes, as well as event handlers (like\n * `onClick`, etc). All others are just passed through as-is.\n *\n * @param elm the HTMLElement onto which attributes should be set\n * @param memberName the name of the attribute to set\n * @param oldValue the old value for the attribute\n * @param newValue the new value for the attribute\n * @param isSvg whether we're in an svg context or not\n * @param flags bitflags for Vdom variables\n */\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n  if (oldValue !== newValue) {\n    let isProp = isMemberInElement(elm, memberName);\n    let ln = memberName.toLowerCase();\n    if (BUILD.vdomClass && memberName === 'class') {\n      const classList = elm.classList;\n      const oldClasses = parseClassList(oldValue);\n      const newClasses = parseClassList(newValue);\n      classList.remove(...oldClasses.filter(c => c && !newClasses.includes(c)));\n      classList.add(...newClasses.filter(c => c && !oldClasses.includes(c)));\n    } else if (BUILD.vdomStyle && memberName === 'style') {\n      // update style attribute, css properties and values\n      if (BUILD.updatable) {\n        for (const prop in oldValue) {\n          if (!newValue || newValue[prop] == null) {\n            if (!BUILD.hydrateServerSide && prop.includes('-')) {\n              elm.style.removeProperty(prop);\n            } else {\n              elm.style[prop] = '';\n            }\n          }\n        }\n      }\n      for (const prop in newValue) {\n        if (!oldValue || newValue[prop] !== oldValue[prop]) {\n          if (!BUILD.hydrateServerSide && prop.includes('-')) {\n            elm.style.setProperty(prop, newValue[prop]);\n          } else {\n            elm.style[prop] = newValue[prop];\n          }\n        }\n      }\n    } else if (BUILD.vdomKey && memberName === 'key') ;else if (BUILD.vdomRef && memberName === 'ref') {\n      // minifier will clean this up\n      if (newValue) {\n        newValue(elm);\n      }\n    } else if (BUILD.vdomListener && (BUILD.lazyLoad ? !isProp : !elm.__lookupSetter__(memberName)) && memberName[0] === 'o' && memberName[1] === 'n') {\n      // Event Handlers\n      // so if the member name starts with \"on\" and the 3rd characters is\n      // a capital letter, and it's not already a member on the element,\n      // then we're assuming it's an event listener\n      if (memberName[2] === '-') {\n        // on- prefixed events\n        // allows to be explicit about the dom event to listen without any magic\n        // under the hood:\n        // <my-cmp on-click> // listens for \"click\"\n        // <my-cmp on-Click> // listens for \"Click\"\n        // <my-cmp on-ionChange> // listens for \"ionChange\"\n        // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n        memberName = memberName.slice(3);\n      } else if (isMemberInElement(win, ln)) {\n        // standard event\n        // the JSX attribute could have been \"onMouseOver\" and the\n        // member name \"onmouseover\" is on the window's prototype\n        // so let's add the listener \"mouseover\", which is all lowercased\n        memberName = ln.slice(2);\n      } else {\n        // custom event\n        // the JSX attribute could have been \"onMyCustomEvent\"\n        // so let's trim off the \"on\" prefix and lowercase the first character\n        // and add the listener \"myCustomEvent\"\n        // except for the first character, we keep the event name case\n        memberName = ln[2] + memberName.slice(3);\n      }\n      if (oldValue || newValue) {\n        // Need to account for \"capture\" events.\n        // If the event name ends with \"Capture\", we'll update the name to remove\n        // the \"Capture\" suffix and make sure the event listener is setup to handle the capture event.\n        const capture = memberName.endsWith(CAPTURE_EVENT_SUFFIX);\n        // Make sure we only replace the last instance of \"Capture\"\n        memberName = memberName.replace(CAPTURE_EVENT_REGEX, '');\n        if (oldValue) {\n          plt.rel(elm, memberName, oldValue, capture);\n        }\n        if (newValue) {\n          plt.ael(elm, memberName, newValue, capture);\n        }\n      }\n    } else if (BUILD.vdomPropOrAttr) {\n      // Set property if it exists and it's not a SVG\n      const isComplex = isComplexType(newValue);\n      if ((isProp || isComplex && newValue !== null) && !isSvg) {\n        try {\n          if (!elm.tagName.includes('-')) {\n            const n = newValue == null ? '' : newValue;\n            // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n            if (memberName === 'list') {\n              isProp = false;\n            } else if (oldValue == null || elm[memberName] != n) {\n              elm[memberName] = n;\n            }\n          } else {\n            elm[memberName] = newValue;\n          }\n        } catch (e) {\n          /**\n           * in case someone tries to set a read-only property, e.g. \"namespaceURI\", we just ignore it\n           */\n        }\n      }\n      /**\n       * Need to manually update attribute if:\n       * - memberName is not an attribute\n       * - if we are rendering the host element in order to reflect attribute\n       * - if it's a SVG, since properties might not work in <svg>\n       * - if the newValue is null/undefined or 'false'.\n       */\n      let xlink = false;\n      if (BUILD.vdomXlink) {\n        if (ln !== (ln = ln.replace(/^xlink\\:?/, ''))) {\n          memberName = ln;\n          xlink = true;\n        }\n      }\n      if (newValue == null || newValue === false) {\n        if (newValue !== false || elm.getAttribute(memberName) === '') {\n          if (BUILD.vdomXlink && xlink) {\n            elm.removeAttributeNS(XLINK_NS, memberName);\n          } else {\n            elm.removeAttribute(memberName);\n          }\n        }\n      } else if ((!isProp || flags & 4 /* VNODE_FLAGS.isHost */ || isSvg) && !isComplex) {\n        newValue = newValue === true ? '' : newValue;\n        if (BUILD.vdomXlink && xlink) {\n          elm.setAttributeNS(XLINK_NS, memberName, newValue);\n        } else {\n          elm.setAttribute(memberName, newValue);\n        }\n      }\n    }\n  }\n};\nconst parseClassListRegex = /\\s/;\n/**\n * Parsed a string of classnames into an array\n * @param value className string, e.g. \"foo bar baz\"\n * @returns list of classes, e.g. [\"foo\", \"bar\", \"baz\"]\n */\nconst parseClassList = value => !value ? [] : value.split(parseClassListRegex);\nconst CAPTURE_EVENT_SUFFIX = 'Capture';\nconst CAPTURE_EVENT_REGEX = new RegExp(CAPTURE_EVENT_SUFFIX + '$');\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n  // if the element passed in is a shadow root, which is a document fragment\n  // then we want to be adding attrs/props to the shadow root's \"host\" element\n  // if it's not a shadow root, then we add attrs/props to the same element\n  const elm = newVnode.$elm$.nodeType === 11 /* NODE_TYPE.DocumentFragment */ && newVnode.$elm$.host ? newVnode.$elm$.host : newVnode.$elm$;\n  const oldVnodeAttrs = oldVnode && oldVnode.$attrs$ || EMPTY_OBJ;\n  const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n  if (BUILD.updatable) {\n    // remove attributes no longer present on the vnode by setting them to undefined\n    for (memberName in oldVnodeAttrs) {\n      if (!(memberName in newVnodeAttrs)) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n      }\n    }\n  }\n  // add new & update changed attributes\n  for (memberName in newVnodeAttrs) {\n    setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n  }\n};\n/**\n * Create a DOM Node corresponding to one of the children of a given VNode.\n *\n * @param oldParentVNode the parent VNode from the previous render\n * @param newParentVNode the parent VNode from the current render\n * @param childIndex the index of the VNode, in the _new_ parent node's\n * children, for which we will create a new DOM node\n * @param parentElm the parent DOM node which our new node will be a child of\n * @returns the newly created node\n */\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n  var _a;\n  // tslint:disable-next-line: prefer-const\n  const newVNode = newParentVNode.$children$[childIndex];\n  let i = 0;\n  let elm;\n  let childNode;\n  let oldVNode;\n  if (BUILD.slotRelocation && !useNativeShadowDom) {\n    // remember for later we need to check to relocate nodes\n    checkSlotRelocate = true;\n    if (newVNode.$tag$ === 'slot') {\n      if (scopeId) {\n        // scoped css needs to add its scoped id to the parent element\n        parentElm.classList.add(scopeId + '-s');\n      }\n      newVNode.$flags$ |= newVNode.$children$ ?\n      // slot element has fallback content\n      2 /* VNODE_FLAGS.isSlotFallback */ :\n      // slot element does not have fallback content\n      1 /* VNODE_FLAGS.isSlotReference */;\n    }\n  }\n  if (BUILD.isDev && newVNode.$elm$) {\n    consoleDevError(`The JSX ${newVNode.$text$ !== null ? `\"${newVNode.$text$}\" text` : `\"${newVNode.$tag$}\" element`} node should not be shared within the same renderer. The renderer caches element lookups in order to improve performance. However, a side effect from this is that the exact same JSX node should not be reused. For more information please see https://stenciljs.com/docs/templating-jsx#avoid-shared-jsx-nodes`);\n  }\n  if (BUILD.vdomText && newVNode.$text$ !== null) {\n    // create text node\n    elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n  } else if (BUILD.slotRelocation && newVNode.$flags$ & 1 /* VNODE_FLAGS.isSlotReference */) {\n    // create a slot reference node\n    elm = newVNode.$elm$ = BUILD.isDebug || BUILD.hydrateServerSide ? slotReferenceDebugNode(newVNode) : doc.createTextNode('');\n  } else {\n    if (BUILD.svg && !isSvgMode) {\n      isSvgMode = newVNode.$tag$ === 'svg';\n    }\n    // create element\n    elm = newVNode.$elm$ = BUILD.svg ? doc.createElementNS(isSvgMode ? SVG_NS : HTML_NS, BUILD.slotRelocation && newVNode.$flags$ & 2 /* VNODE_FLAGS.isSlotFallback */ ? 'slot-fb' : newVNode.$tag$) : doc.createElement(BUILD.slotRelocation && newVNode.$flags$ & 2 /* VNODE_FLAGS.isSlotFallback */ ? 'slot-fb' : newVNode.$tag$);\n    if (BUILD.svg && isSvgMode && newVNode.$tag$ === 'foreignObject') {\n      isSvgMode = false;\n    }\n    // add css classes, attrs, props, listeners, etc.\n    if (BUILD.vdomAttribute) {\n      updateElement(null, newVNode, isSvgMode);\n    }\n    if ((BUILD.shadowDom || BUILD.scoped) && isDef(scopeId) && elm['s-si'] !== scopeId) {\n      // if there is a scopeId and this is the initial render\n      // then let's add the scopeId as a css class\n      elm.classList.add(elm['s-si'] = scopeId);\n    }\n    if (newVNode.$children$) {\n      for (i = 0; i < newVNode.$children$.length; ++i) {\n        // create the node\n        childNode = createElm(oldParentVNode, newVNode, i, elm);\n        // return node could have been null\n        if (childNode) {\n          // append our new node\n          elm.appendChild(childNode);\n        }\n      }\n    }\n    if (BUILD.svg) {\n      if (newVNode.$tag$ === 'svg') {\n        // Only reset the SVG context when we're exiting <svg> element\n        isSvgMode = false;\n      } else if (elm.tagName === 'foreignObject') {\n        // Reenter SVG context when we're exiting <foreignObject> element\n        isSvgMode = true;\n      }\n    }\n  }\n  if (BUILD.slotRelocation) {\n    elm['s-hn'] = hostTagName;\n    if (newVNode.$flags$ & (2 /* VNODE_FLAGS.isSlotFallback */ | 1 /* VNODE_FLAGS.isSlotReference */)) {\n      // remember the content reference comment\n      elm['s-sr'] = true;\n      // Persist the name of the slot that this slot was going to be projected into.\n      elm['s-fs'] = (_a = newVNode.$attrs$) === null || _a === void 0 ? void 0 : _a.slot;\n      // remember the content reference comment\n      elm['s-cr'] = contentRef;\n      // remember the slot name, or empty string for default slot\n      elm['s-sn'] = newVNode.$name$ || '';\n      // check if we've got an old vnode for this slot\n      oldVNode = oldParentVNode && oldParentVNode.$children$ && oldParentVNode.$children$[childIndex];\n      if (oldVNode && oldVNode.$tag$ === newVNode.$tag$ && oldParentVNode.$elm$) {\n        // we've got an old slot vnode and the wrapper is being replaced\n        // so let's move the old slot content back to it's original location\n        putBackInOriginalLocation(oldParentVNode.$elm$, false);\n      }\n    }\n  }\n  return elm;\n};\nconst putBackInOriginalLocation = (parentElm, recursive) => {\n  var _a;\n  plt.$flags$ |= 1 /* PLATFORM_FLAGS.isTmpDisconnected */;\n  const oldSlotChildNodes = parentElm.childNodes;\n  for (let i = oldSlotChildNodes.length - 1; i >= 0; i--) {\n    const childNode = oldSlotChildNodes[i];\n    if (childNode['s-hn'] !== hostTagName && childNode['s-ol']) {\n      // // this child node in the old element is from another component\n      // // remove this node from the old slot's parent\n      // childNode.remove();\n      // and relocate it back to it's original location\n      parentReferenceNode(childNode).insertBefore(childNode, referenceNode(childNode));\n      // remove the old original location comment entirely\n      // later on the patch function will know what to do\n      // and move this to the correct spot if need be\n      childNode['s-ol'].remove();\n      childNode['s-ol'] = undefined;\n      // Reset so we can correctly move the node around again.\n      childNode['s-sh'] = undefined;\n      // When putting an element node back in its original location,\n      // we need to reset the `slot` attribute back to the value it originally had\n      // so we can correctly relocate it again in the future\n      if (childNode.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n        childNode.setAttribute('slot', (_a = childNode['s-sn']) !== null && _a !== void 0 ? _a : '');\n      }\n      checkSlotRelocate = true;\n    }\n    if (recursive) {\n      putBackInOriginalLocation(childNode, recursive);\n    }\n  }\n  plt.$flags$ &= ~1 /* PLATFORM_FLAGS.isTmpDisconnected */;\n};\n/**\n * Create DOM nodes corresponding to a list of {@link d.Vnode} objects and\n * add them to the DOM in the appropriate place.\n *\n * @param parentElm the DOM node which should be used as a parent for the new\n * DOM nodes\n * @param before a child of the `parentElm` which the new children should be\n * inserted before (optional)\n * @param parentVNode the parent virtual DOM node\n * @param vnodes the new child virtual DOM nodes to produce DOM nodes for\n * @param startIdx the index in the child virtual DOM nodes at which to start\n * creating DOM nodes (inclusive)\n * @param endIdx the index in the child virtual DOM nodes at which to stop\n * creating DOM nodes (inclusive)\n */\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n  let containerElm = BUILD.slotRelocation && parentElm['s-cr'] && parentElm['s-cr'].parentNode || parentElm;\n  let childNode;\n  if (BUILD.shadowDom && containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n    containerElm = containerElm.shadowRoot;\n  }\n  for (; startIdx <= endIdx; ++startIdx) {\n    if (vnodes[startIdx]) {\n      childNode = createElm(null, parentVNode, startIdx, parentElm);\n      if (childNode) {\n        vnodes[startIdx].$elm$ = childNode;\n        containerElm.insertBefore(childNode, BUILD.slotRelocation ? referenceNode(before) : before);\n      }\n    }\n  }\n};\n/**\n * Remove the DOM elements corresponding to a list of {@link d.VNode} objects.\n * This can be used to, for instance, clean up after a list of children which\n * should no longer be shown.\n *\n * This function also handles some of Stencil's slot relocation logic.\n *\n * @param vnodes a list of virtual DOM nodes to remove\n * @param startIdx the index at which to start removing nodes (inclusive)\n * @param endIdx the index at which to stop removing nodes (inclusive)\n */\nconst removeVnodes = (vnodes, startIdx, endIdx) => {\n  for (let index = startIdx; index <= endIdx; ++index) {\n    const vnode = vnodes[index];\n    if (vnode) {\n      const elm = vnode.$elm$;\n      nullifyVNodeRefs(vnode);\n      if (elm) {\n        if (BUILD.slotRelocation) {\n          // we're removing this element\n          // so it's possible we need to show slot fallback content now\n          checkSlotFallbackVisibility = true;\n          if (elm['s-ol']) {\n            // remove the original location comment\n            elm['s-ol'].remove();\n          } else {\n            // it's possible that child nodes of the node\n            // that's being removed are slot nodes\n            putBackInOriginalLocation(elm, true);\n          }\n        }\n        // remove the vnode's element from the dom\n        elm.remove();\n      }\n    }\n  }\n};\n/**\n * Reconcile the children of a new VNode with the children of an old VNode by\n * traversing the two collections of children, identifying nodes that are\n * conserved or changed, calling out to `patch` to make any necessary\n * updates to the DOM, and rearranging DOM nodes as needed.\n *\n * The algorithm for reconciling children works by analyzing two 'windows' onto\n * the two arrays of children (`oldCh` and `newCh`). We keep track of the\n * 'windows' by storing start and end indices and references to the\n * corresponding array entries. Initially the two 'windows' are basically equal\n * to the entire array, but we progressively narrow the windows until there are\n * no children left to update by doing the following:\n *\n * 1. Skip any `null` entries at the beginning or end of the two arrays, so\n *    that if we have an initial array like the following we'll end up dealing\n *    only with a window bounded by the highlighted elements:\n *\n *    [null, null, VNode1 , ... , VNode2, null, null]\n *                 ^^^^^^         ^^^^^^\n *\n * 2. Check to see if the elements at the head and tail positions are equal\n *    across the windows. This will basically detect elements which haven't\n *    been added, removed, or changed position, i.e. if you had the following\n *    VNode elements (represented as HTML):\n *\n *    oldVNode: `<div><p><span>HEY</span></p></div>`\n *    newVNode: `<div><p><span>THERE</span></p></div>`\n *\n *    Then when comparing the children of the `<div>` tag we check the equality\n *    of the VNodes corresponding to the `<p>` tags and, since they are the\n *    same tag in the same position, we'd be able to avoid completely\n *    re-rendering the subtree under them with a new DOM element and would just\n *    call out to `patch` to handle reconciling their children and so on.\n *\n * 3. Check, for both windows, to see if the element at the beginning of the\n *    window corresponds to the element at the end of the other window. This is\n *    a heuristic which will let us identify _some_ situations in which\n *    elements have changed position, for instance it _should_ detect that the\n *    children nodes themselves have not changed but merely moved in the\n *    following example:\n *\n *    oldVNode: `<div><element-one /><element-two /></div>`\n *    newVNode: `<div><element-two /><element-one /></div>`\n *\n *    If we find cases like this then we also need to move the concrete DOM\n *    elements corresponding to the moved children to write the re-order to the\n *    DOM.\n *\n * 4. Finally, if VNodes have the `key` attribute set on them we check for any\n *    nodes in the old children which have the same key as the first element in\n *    our window on the new children. If we find such a node we handle calling\n *    out to `patch`, moving relevant DOM nodes, and so on, in accordance with\n *    what we find.\n *\n * Finally, once we've narrowed our 'windows' to the point that either of them\n * collapse (i.e. they have length 0) we then handle any remaining VNode\n * insertion or deletion that needs to happen to get a DOM state that correctly\n * reflects the new child VNodes. If, for instance, after our window on the old\n * children has collapsed we still have more nodes on the new children that\n * we haven't dealt with yet then we need to add them, or if the new children\n * collapse but we still have unhandled _old_ children then we need to make\n * sure the corresponding DOM nodes are removed.\n *\n * @param parentElm the node into which the parent VNode is rendered\n * @param oldCh the old children of the parent node\n * @param newVNode the new VNode which will replace the parent\n * @param newCh the new children of the parent node\n */\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n  let oldStartIdx = 0;\n  let newStartIdx = 0;\n  let idxInOld = 0;\n  let i = 0;\n  let oldEndIdx = oldCh.length - 1;\n  let oldStartVnode = oldCh[0];\n  let oldEndVnode = oldCh[oldEndIdx];\n  let newEndIdx = newCh.length - 1;\n  let newStartVnode = newCh[0];\n  let newEndVnode = newCh[newEndIdx];\n  let node;\n  let elmToMove;\n  while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n    if (oldStartVnode == null) {\n      // VNode might have been moved left\n      oldStartVnode = oldCh[++oldStartIdx];\n    } else if (oldEndVnode == null) {\n      oldEndVnode = oldCh[--oldEndIdx];\n    } else if (newStartVnode == null) {\n      newStartVnode = newCh[++newStartIdx];\n    } else if (newEndVnode == null) {\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldStartVnode, newStartVnode)) {\n      // if the start nodes are the same then we should patch the new VNode\n      // onto the old one, and increment our `newStartIdx` and `oldStartIdx`\n      // indices to reflect that. We don't need to move any DOM Nodes around\n      // since things are matched up in order.\n      patch(oldStartVnode, newStartVnode);\n      oldStartVnode = oldCh[++oldStartIdx];\n      newStartVnode = newCh[++newStartIdx];\n    } else if (isSameVnode(oldEndVnode, newEndVnode)) {\n      // likewise, if the end nodes are the same we patch new onto old and\n      // decrement our end indices, and also likewise in this case we don't\n      // need to move any DOM Nodes.\n      patch(oldEndVnode, newEndVnode);\n      oldEndVnode = oldCh[--oldEndIdx];\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldStartVnode, newEndVnode)) {\n      // case: \"Vnode moved right\"\n      //\n      // We've found that the last node in our window on the new children is\n      // the same VNode as the _first_ node in our window on the old children\n      // we're dealing with now. Visually, this is the layout of these two\n      // nodes:\n      //\n      // newCh: [..., newStartVnode , ... , newEndVnode , ...]\n      //                                    ^^^^^^^^^^^\n      // oldCh: [..., oldStartVnode , ... , oldEndVnode , ...]\n      //              ^^^^^^^^^^^^^\n      //\n      // In this situation we need to patch `newEndVnode` onto `oldStartVnode`\n      // and move the DOM element for `oldStartVnode`.\n      if (BUILD.slotRelocation && (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n        putBackInOriginalLocation(oldStartVnode.$elm$.parentNode, false);\n      }\n      patch(oldStartVnode, newEndVnode);\n      // We need to move the element for `oldStartVnode` into a position which\n      // will be appropriate for `newEndVnode`. For this we can use\n      // `.insertBefore` and `oldEndVnode.$elm$.nextSibling`. If there is a\n      // sibling for `oldEndVnode.$elm$` then we want to move the DOM node for\n      // `oldStartVnode` between `oldEndVnode` and it's sibling, like so:\n      //\n      // <old-start-node />\n      // <some-intervening-node />\n      // <old-end-node />\n      // <!-- ->              <-- `oldStartVnode.$elm$` should be inserted here\n      // <next-sibling />\n      //\n      // If instead `oldEndVnode.$elm$` has no sibling then we just want to put\n      // the node for `oldStartVnode` at the end of the children of\n      // `parentElm`. Luckily, `Node.nextSibling` will return `null` if there\n      // aren't any siblings, and passing `null` to `Node.insertBefore` will\n      // append it to the children of the parent element.\n      parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n      oldStartVnode = oldCh[++oldStartIdx];\n      newEndVnode = newCh[--newEndIdx];\n    } else if (isSameVnode(oldEndVnode, newStartVnode)) {\n      // case: \"Vnode moved left\"\n      //\n      // We've found that the first node in our window on the new children is\n      // the same VNode as the _last_ node in our window on the old children.\n      // Visually, this is the layout of these two nodes:\n      //\n      // newCh: [..., newStartVnode , ... , newEndVnode , ...]\n      //              ^^^^^^^^^^^^^\n      // oldCh: [..., oldStartVnode , ... , oldEndVnode , ...]\n      //                                    ^^^^^^^^^^^\n      //\n      // In this situation we need to patch `newStartVnode` onto `oldEndVnode`\n      // (which will handle updating any changed attributes, reconciling their\n      // children etc) but we also need to move the DOM node to which\n      // `oldEndVnode` corresponds.\n      if (BUILD.slotRelocation && (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n        putBackInOriginalLocation(oldEndVnode.$elm$.parentNode, false);\n      }\n      patch(oldEndVnode, newStartVnode);\n      // We've already checked above if `oldStartVnode` and `newStartVnode` are\n      // the same node, so since we're here we know that they are not. Thus we\n      // can move the element for `oldEndVnode` _before_ the element for\n      // `oldStartVnode`, leaving `oldStartVnode` to be reconciled in the\n      // future.\n      parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n      oldEndVnode = oldCh[--oldEndIdx];\n      newStartVnode = newCh[++newStartIdx];\n    } else {\n      // Here we do some checks to match up old and new nodes based on the\n      // `$key$` attribute, which is set by putting a `key=\"my-key\"` attribute\n      // in the JSX for a DOM element in the implementation of a Stencil\n      // component.\n      //\n      // First we check to see if there are any nodes in the array of old\n      // children which have the same key as the first node in the new\n      // children.\n      idxInOld = -1;\n      if (BUILD.vdomKey) {\n        for (i = oldStartIdx; i <= oldEndIdx; ++i) {\n          if (oldCh[i] && oldCh[i].$key$ !== null && oldCh[i].$key$ === newStartVnode.$key$) {\n            idxInOld = i;\n            break;\n          }\n        }\n      }\n      if (BUILD.vdomKey && idxInOld >= 0) {\n        // We found a node in the old children which matches up with the first\n        // node in the new children! So let's deal with that\n        elmToMove = oldCh[idxInOld];\n        if (elmToMove.$tag$ !== newStartVnode.$tag$) {\n          // the tag doesn't match so we'll need a new DOM element\n          node = createElm(oldCh && oldCh[newStartIdx], newVNode, idxInOld, parentElm);\n        } else {\n          patch(elmToMove, newStartVnode);\n          // invalidate the matching old node so that we won't try to update it\n          // again later on\n          oldCh[idxInOld] = undefined;\n          node = elmToMove.$elm$;\n        }\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        // We either didn't find an element in the old children that matches\n        // the key of the first new child OR the build is not using `key`\n        // attributes at all. In either case we need to create a new element\n        // for the new node.\n        node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx, parentElm);\n        newStartVnode = newCh[++newStartIdx];\n      }\n      if (node) {\n        // if we created a new node then handle inserting it to the DOM\n        if (BUILD.slotRelocation) {\n          parentReferenceNode(oldStartVnode.$elm$).insertBefore(node, referenceNode(oldStartVnode.$elm$));\n        } else {\n          oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\n        }\n      }\n    }\n  }\n  if (oldStartIdx > oldEndIdx) {\n    // we have some more new nodes to add which don't match up with old nodes\n    addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n  } else if (BUILD.updatable && newStartIdx > newEndIdx) {\n    // there are nodes in the `oldCh` array which no longer correspond to nodes\n    // in the new array, so lets remove them (which entails cleaning up the\n    // relevant DOM nodes)\n    removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n  }\n};\n/**\n * Compare two VNodes to determine if they are the same\n *\n * **NB**: This function is an equality _heuristic_ based on the available\n * information set on the two VNodes and can be misleading under certain\n * circumstances. In particular, if the two nodes do not have `key` attrs\n * (available under `$key$` on VNodes) then the function falls back on merely\n * checking that they have the same tag.\n *\n * So, in other words, if `key` attrs are not set on VNodes which may be\n * changing order within a `children` array or something along those lines then\n * we could obtain a false negative and then have to do needless re-rendering\n * (i.e. we'd say two VNodes aren't equal when in fact they should be).\n *\n * @param leftVNode the first VNode to check\n * @param rightVNode the second VNode to check\n * @returns whether they're equal or not\n */\nconst isSameVnode = (leftVNode, rightVNode) => {\n  // compare if two vnode to see if they're \"technically\" the same\n  // need to have the same element tag, and same key to be the same\n  if (leftVNode.$tag$ === rightVNode.$tag$) {\n    if (BUILD.slotRelocation && leftVNode.$tag$ === 'slot') {\n      return leftVNode.$name$ === rightVNode.$name$;\n    }\n    // this will be set if components in the build have `key` attrs set on them\n    if (BUILD.vdomKey) {\n      return leftVNode.$key$ === rightVNode.$key$;\n    }\n    return true;\n  }\n  return false;\n};\nconst referenceNode = node => {\n  // this node was relocated to a new location in the dom\n  // because of some other component's slot\n  // but we still have an html comment in place of where\n  // it's original location was according to it's original vdom\n  return node && node['s-ol'] || node;\n};\nconst parentReferenceNode = node => (node['s-ol'] ? node['s-ol'] : node).parentNode;\n/**\n * Handle reconciling an outdated VNode with a new one which corresponds to\n * it. This function handles flushing updates to the DOM and reconciling the\n * children of the two nodes (if any).\n *\n * @param oldVNode an old VNode whose DOM element and children we want to update\n * @param newVNode a new VNode representing an updated version of the old one\n */\nconst patch = (oldVNode, newVNode) => {\n  const elm = newVNode.$elm$ = oldVNode.$elm$;\n  const oldChildren = oldVNode.$children$;\n  const newChildren = newVNode.$children$;\n  const tag = newVNode.$tag$;\n  const text = newVNode.$text$;\n  let defaultHolder;\n  if (!BUILD.vdomText || text === null) {\n    if (BUILD.svg) {\n      // test if we're rendering an svg element, or still rendering nodes inside of one\n      // only add this to the when the compiler sees we're using an svg somewhere\n      isSvgMode = tag === 'svg' ? true : tag === 'foreignObject' ? false : isSvgMode;\n    }\n    if (BUILD.vdomAttribute || BUILD.reflect) {\n      if (BUILD.slot && tag === 'slot') ;else {\n        // either this is the first render of an element OR it's an update\n        // AND we already know it's possible it could have changed\n        // this updates the element's css classes, attrs, props, listeners, etc.\n        updateElement(oldVNode, newVNode, isSvgMode);\n      }\n    }\n    if (BUILD.updatable && oldChildren !== null && newChildren !== null) {\n      // looks like there's child vnodes for both the old and new vnodes\n      // so we need to call `updateChildren` to reconcile them\n      updateChildren(elm, oldChildren, newVNode, newChildren);\n    } else if (newChildren !== null) {\n      // no old child vnodes, but there are new child vnodes to add\n      if (BUILD.updatable && BUILD.vdomText && oldVNode.$text$ !== null) {\n        // the old vnode was text, so be sure to clear it out\n        elm.textContent = '';\n      }\n      // add the new vnode children\n      addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n    } else if (BUILD.updatable && oldChildren !== null) {\n      // no new child vnodes, but there are old child vnodes to remove\n      removeVnodes(oldChildren, 0, oldChildren.length - 1);\n    }\n    if (BUILD.svg && isSvgMode && tag === 'svg') {\n      isSvgMode = false;\n    }\n  } else if (BUILD.vdomText && BUILD.slotRelocation && (defaultHolder = elm['s-cr'])) {\n    // this element has slotted content\n    defaultHolder.parentNode.textContent = text;\n  } else if (BUILD.vdomText && oldVNode.$text$ !== text) {\n    // update the text content for the text only vnode\n    // and also only if the text is different than before\n    elm.data = text;\n  }\n};\n/**\n * Adjust the `.hidden` property as-needed on any nodes in a DOM subtree which\n * are slot fallbacks nodes.\n *\n * A slot fallback node should be visible by default. Then, it should be\n * conditionally hidden if:\n *\n * - it has a sibling with a `slot` property set to its slot name or if\n * - it is a default fallback slot node, in which case we hide if it has any\n *   content\n *\n * @param elm the element of interest\n */\nconst updateFallbackSlotVisibility = elm => {\n  const childNodes = elm.childNodes;\n  for (const childNode of childNodes) {\n    if (childNode.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n      if (childNode['s-sr']) {\n        // this is a slot fallback node\n        // get the slot name for this slot reference node\n        const slotName = childNode['s-sn'];\n        // by default always show a fallback slot node\n        // then hide it if there are other slots in the light dom\n        childNode.hidden = false;\n        // we need to check all of its sibling nodes in order to see if\n        // `childNode` should be hidden\n        for (const siblingNode of childNodes) {\n          // Don't check the node against itself\n          if (siblingNode !== childNode) {\n            if (siblingNode['s-hn'] !== childNode['s-hn'] || slotName !== '') {\n              // this sibling node is from a different component OR is a named\n              // fallback slot node\n              if (siblingNode.nodeType === 1 /* NODE_TYPE.ElementNode */ && (slotName === siblingNode.getAttribute('slot') || slotName === siblingNode['s-sn'])) {\n                childNode.hidden = true;\n                break;\n              }\n            } else {\n              // this is a default fallback slot node\n              // any element or text node (with content)\n              // should hide the default fallback slot node\n              if (siblingNode.nodeType === 1 /* NODE_TYPE.ElementNode */ || siblingNode.nodeType === 3 /* NODE_TYPE.TextNode */ && siblingNode.textContent.trim() !== '') {\n                childNode.hidden = true;\n                break;\n              }\n            }\n          }\n        }\n      }\n      // keep drilling down\n      updateFallbackSlotVisibility(childNode);\n    }\n  }\n};\n/**\n * Component-global information about nodes which are either currently being\n * relocated or will be shortly.\n */\nconst relocateNodes = [];\n/**\n * Mark the contents of a slot for relocation via adding references to them to\n * the {@link relocateNodes} data structure. The actual work of relocating them\n * will then be handled in {@link renderVdom}.\n *\n * @param elm a render node whose child nodes need to be relocated\n */\nconst markSlotContentForRelocation = elm => {\n  // tslint:disable-next-line: prefer-const\n  let node;\n  let hostContentNodes;\n  let j;\n  for (const childNode of elm.childNodes) {\n    // we need to find child nodes which are slot references so we can then try\n    // to match them up with nodes that need to be relocated\n    if (childNode['s-sr'] && (node = childNode['s-cr']) && node.parentNode) {\n      // first get the content reference comment node ('s-cr'), then we get\n      // its parent, which is where all the host content is now\n      hostContentNodes = node.parentNode.childNodes;\n      const slotName = childNode['s-sn'];\n      // iterate through all the nodes under the location where the host was\n      // originally rendered\n      for (j = hostContentNodes.length - 1; j >= 0; j--) {\n        node = hostContentNodes[j];\n        // check that the node is not a content reference node or a node\n        // reference and then check that the host name does not match that of\n        // childNode.\n        // In addition, check that the slot either has not already been relocated, or\n        // that its current location's host is not childNode's host. This is essentially\n        // a check so that we don't try to relocate (and then hide) a node that is already\n        // where it should be.\n        if (!node['s-cn'] && !node['s-nr'] && node['s-hn'] !== childNode['s-hn'] && (!BUILD.experimentalSlotFixes || !node['s-sh'] || node['s-sh'] !== childNode['s-hn'])) {\n          // if `node` is located in the slot that `childNode` refers to (via the\n          // `'s-sn'` property) then we need to relocate it from it's current spot\n          // (under the host element parent) to the right slot location\n          if (isNodeLocatedInSlot(node, slotName)) {\n            // it's possible we've already decided to relocate this node\n            let relocateNodeData = relocateNodes.find(r => r.$nodeToRelocate$ === node);\n            // made some changes to slots\n            // let's make sure we also double check\n            // fallbacks are correctly hidden or shown\n            checkSlotFallbackVisibility = true;\n            // ensure that the slot-name attr is correct\n            node['s-sn'] = node['s-sn'] || slotName;\n            if (relocateNodeData) {\n              relocateNodeData.$nodeToRelocate$['s-sh'] = childNode['s-hn'];\n              // we marked this node for relocation previously but didn't find\n              // out the slot reference node to which it needs to be relocated\n              // so write it down now!\n              relocateNodeData.$slotRefNode$ = childNode;\n            } else {\n              node['s-sh'] = childNode['s-hn'];\n              // add to our list of nodes to relocate\n              relocateNodes.push({\n                $slotRefNode$: childNode,\n                $nodeToRelocate$: node\n              });\n            }\n            if (node['s-sr']) {\n              relocateNodes.map(relocateNode => {\n                if (isNodeLocatedInSlot(relocateNode.$nodeToRelocate$, node['s-sn'])) {\n                  relocateNodeData = relocateNodes.find(r => r.$nodeToRelocate$ === node);\n                  if (relocateNodeData && !relocateNode.$slotRefNode$) {\n                    relocateNode.$slotRefNode$ = relocateNodeData.$slotRefNode$;\n                  }\n                }\n              });\n            }\n          } else if (!relocateNodes.some(r => r.$nodeToRelocate$ === node)) {\n            // the node is not found within the slot (`childNode`) that we're\n            // currently looking at, so we stick it into `relocateNodes` to\n            // handle later. If we never find a home for this element then\n            // we'll need to hide it\n            relocateNodes.push({\n              $nodeToRelocate$: node\n            });\n          }\n        }\n      }\n    }\n    // if we're dealing with any type of element (capable of itself being a\n    // slot reference or containing one) then we recur\n    if (childNode.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n      markSlotContentForRelocation(childNode);\n    }\n  }\n};\n/**\n * Check whether a node is located in a given named slot.\n *\n * @param nodeToRelocate the node of interest\n * @param slotName the slot name to check\n * @returns whether the node is located in the slot or not\n */\nconst isNodeLocatedInSlot = (nodeToRelocate, slotName) => {\n  if (nodeToRelocate.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n    if (nodeToRelocate.getAttribute('slot') === null && slotName === '') {\n      // if the node doesn't have a slot attribute, and the slot we're checking\n      // is not a named slot, then we assume the node should be within the slot\n      return true;\n    }\n    if (nodeToRelocate.getAttribute('slot') === slotName) {\n      return true;\n    }\n    return false;\n  }\n  if (nodeToRelocate['s-sn'] === slotName) {\n    return true;\n  }\n  return slotName === '';\n};\n/**\n * 'Nullify' any VDom `ref` callbacks on a VDom node or its children by calling\n * them with `null`. This signals that the DOM element corresponding to the VDom\n * node has been removed from the DOM.\n *\n * @param vNode a virtual DOM node\n */\nconst nullifyVNodeRefs = vNode => {\n  if (BUILD.vdomRef) {\n    vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(null);\n    vNode.$children$ && vNode.$children$.map(nullifyVNodeRefs);\n  }\n};\n/**\n * The main entry point for Stencil's virtual DOM-based rendering engine\n *\n * Given a {@link d.HostRef} container and some virtual DOM nodes, this\n * function will handle creating a virtual DOM tree with a single root, patching\n * the current virtual DOM tree onto an old one (if any), dealing with slot\n * relocation, and reflecting attributes.\n *\n * @param hostRef data needed to root and render the virtual DOM tree, such as\n * the DOM node into which it should be rendered.\n * @param renderFnResults the virtual DOM nodes to be rendered\n * @param isInitialLoad whether or not this is the first call after page load\n */\nconst renderVdom = function (hostRef, renderFnResults) {\n  let isInitialLoad = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var _a, _b;\n  const hostElm = hostRef.$hostElement$;\n  const cmpMeta = hostRef.$cmpMeta$;\n  const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n  // if `renderFnResults` is a Host node then we can use it directly. If not,\n  // we need to call `h` again to wrap the children of our component in a\n  // 'dummy' Host node (well, an empty vnode) since `renderVdom` assumes\n  // implicitly that the top-level vdom node is 1) an only child and 2)\n  // contains attrs that need to be set on the host element.\n  const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n  hostTagName = hostElm.tagName;\n  // <Host> runtime check\n  if (BUILD.isDev && Array.isArray(renderFnResults) && renderFnResults.some(isHost)) {\n    throw new Error(`The <Host> must be the single root component.\nLooks like the render() function of \"${hostTagName.toLowerCase()}\" is returning an array that contains the <Host>.\n\nThe render() function should look like this instead:\n\nrender() {\n  // Do not return an array\n  return (\n    <Host>{content}</Host>\n  );\n}\n  `);\n  }\n  if (BUILD.reflect && cmpMeta.$attrsToReflect$) {\n    rootVnode.$attrs$ = rootVnode.$attrs$ || {};\n    cmpMeta.$attrsToReflect$.map(_ref => {\n      let [propName, attribute] = _ref;\n      return rootVnode.$attrs$[attribute] = hostElm[propName];\n    });\n  }\n  // On the first render and *only* on the first render we want to check for\n  // any attributes set on the host element which are also set on the vdom\n  // node. If we find them, we override the value on the VDom node attrs with\n  // the value from the host element, which allows developers building apps\n  // with Stencil components to override e.g. the `role` attribute on a\n  // component even if it's already set on the `Host`.\n  if (isInitialLoad && rootVnode.$attrs$) {\n    for (const key of Object.keys(rootVnode.$attrs$)) {\n      // We have a special implementation in `setAccessor` for `style` and\n      // `class` which reconciles values coming from the VDom with values\n      // already present on the DOM element, so we don't want to override those\n      // attributes on the VDom tree with values from the host element if they\n      // are present.\n      //\n      // Likewise, `ref` and `key` are special internal values for the Stencil\n      // runtime and we don't want to override those either.\n      if (hostElm.hasAttribute(key) && !['key', 'ref', 'style', 'class'].includes(key)) {\n        rootVnode.$attrs$[key] = hostElm[key];\n      }\n    }\n  }\n  rootVnode.$tag$ = null;\n  rootVnode.$flags$ |= 4 /* VNODE_FLAGS.isHost */;\n  hostRef.$vnode$ = rootVnode;\n  rootVnode.$elm$ = oldVNode.$elm$ = BUILD.shadowDom ? hostElm.shadowRoot || hostElm : hostElm;\n  if (BUILD.scoped || BUILD.shadowDom) {\n    scopeId = hostElm['s-sc'];\n  }\n  if (BUILD.slotRelocation) {\n    contentRef = hostElm['s-cr'];\n    useNativeShadowDom = supportsShadow && (cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) !== 0;\n    // always reset\n    checkSlotFallbackVisibility = false;\n  }\n  // synchronous patch\n  patch(oldVNode, rootVnode);\n  if (BUILD.slotRelocation) {\n    // while we're moving nodes around existing nodes, temporarily disable\n    // the disconnectCallback from working\n    plt.$flags$ |= 1 /* PLATFORM_FLAGS.isTmpDisconnected */;\n    if (checkSlotRelocate) {\n      markSlotContentForRelocation(rootVnode.$elm$);\n      for (const relocateData of relocateNodes) {\n        const nodeToRelocate = relocateData.$nodeToRelocate$;\n        if (!nodeToRelocate['s-ol']) {\n          // add a reference node marking this node's original location\n          // keep a reference to this node for later lookups\n          const orgLocationNode = BUILD.isDebug || BUILD.hydrateServerSide ? originalLocationDebugNode(nodeToRelocate) : doc.createTextNode('');\n          orgLocationNode['s-nr'] = nodeToRelocate;\n          nodeToRelocate.parentNode.insertBefore(nodeToRelocate['s-ol'] = orgLocationNode, nodeToRelocate);\n        }\n      }\n      for (const relocateData of relocateNodes) {\n        const nodeToRelocate = relocateData.$nodeToRelocate$;\n        const slotRefNode = relocateData.$slotRefNode$;\n        if (slotRefNode) {\n          const parentNodeRef = slotRefNode.parentNode;\n          // When determining where to insert content, the most simple case would be\n          // to relocate the node immediately following the slot reference node. We do this\n          // by getting a reference to the node immediately following the slot reference node\n          // since we will use `insertBefore` to manipulate the DOM.\n          //\n          // If there is no node immediately following the slot reference node, then we will just\n          // end up appending the node as the last child of the parent.\n          let insertBeforeNode = slotRefNode.nextSibling;\n          // If the node we're currently planning on inserting the new node before is an element,\n          // we need to do some additional checks to make sure we're inserting the node in the correct order.\n          // The use case here would be that we have multiple nodes being relocated to the same slot. So, we want\n          // to make sure they get inserted into their new how in the same order they were declared in their original location.\n          //\n          // TODO(STENCIL-914): Remove `experimentalSlotFixes` check\n          if (!BUILD.experimentalSlotFixes || insertBeforeNode && insertBeforeNode.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n            let orgLocationNode = (_a = nodeToRelocate['s-ol']) === null || _a === void 0 ? void 0 : _a.previousSibling;\n            while (orgLocationNode) {\n              let refNode = (_b = orgLocationNode['s-nr']) !== null && _b !== void 0 ? _b : null;\n              if (refNode && refNode['s-sn'] === nodeToRelocate['s-sn'] && parentNodeRef === refNode.parentNode) {\n                refNode = refNode.nextSibling;\n                if (!refNode || !refNode['s-nr']) {\n                  insertBeforeNode = refNode;\n                  break;\n                }\n              }\n              orgLocationNode = orgLocationNode.previousSibling;\n            }\n          }\n          if (!insertBeforeNode && parentNodeRef !== nodeToRelocate.parentNode || nodeToRelocate.nextSibling !== insertBeforeNode) {\n            // we've checked that it's worth while to relocate\n            // since that the node to relocate\n            // has a different next sibling or parent relocated\n            if (nodeToRelocate !== insertBeforeNode) {\n              if (!nodeToRelocate['s-hn'] && nodeToRelocate['s-ol']) {\n                // probably a component in the index.html that doesn't have its hostname set\n                nodeToRelocate['s-hn'] = nodeToRelocate['s-ol'].parentNode.nodeName;\n              }\n              // Handle a use-case where we relocate a slot where\n              // the slot name changes along the way (for instance, a default to a named slot).\n              // In this case, we need to update the relocated node's slot attribute to match\n              // the slot name it is being relocated into.\n              //\n              // There is a very niche use case where we may be relocating a text node. For now,\n              // we ignore anything that is not an element node since non-element nodes cannot have\n              // attributes to specify the slot. We'll deal with this if it becomes a problem... but super edge-case-y\n              if (BUILD.experimentalSlotFixes && nodeToRelocate.nodeType === 1 /* NODE_TYPE.ElementNode */ && slotRefNode['s-fs'] !== nodeToRelocate.getAttribute('slot')) {\n                if (!slotRefNode['s-fs']) {\n                  nodeToRelocate.removeAttribute('slot');\n                } else {\n                  nodeToRelocate.setAttribute('slot', slotRefNode['s-fs']);\n                }\n              }\n              // Add it back to the dom but in its new home\n              // If we get to this point and `insertBeforeNode` is `null`, that means\n              // we're just going to append the node as the last child of the parent. Passing\n              // `null` as the second arg here will trigger that behavior.\n              parentNodeRef.insertBefore(nodeToRelocate, insertBeforeNode);\n            }\n          }\n        } else {\n          // this node doesn't have a slot home to go to, so let's hide it\n          if (nodeToRelocate.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n            nodeToRelocate.hidden = true;\n          }\n        }\n      }\n    }\n    if (checkSlotFallbackVisibility) {\n      updateFallbackSlotVisibility(rootVnode.$elm$);\n    }\n    // done moving nodes around\n    // allow the disconnect callback to work again\n    plt.$flags$ &= ~1 /* PLATFORM_FLAGS.isTmpDisconnected */;\n    // always reset\n    relocateNodes.length = 0;\n  }\n};\n// slot comment debug nodes only created with the `--debug` flag\n// otherwise these nodes are text nodes w/out content\nconst slotReferenceDebugNode = slotVNode => doc.createComment(`<slot${slotVNode.$name$ ? ' name=\"' + slotVNode.$name$ + '\"' : ''}> (host=${hostTagName.toLowerCase()})`);\nconst originalLocationDebugNode = nodeToRelocate => doc.createComment(`org-location for ` + (nodeToRelocate.localName ? `<${nodeToRelocate.localName}> (host=${nodeToRelocate['s-hn']})` : `[${nodeToRelocate.textContent}]`));\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n  if (BUILD.asyncLoading && ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n    ancestorComponent['s-p'].push(new Promise(r => hostRef.$onRenderResolve$ = r));\n  }\n};\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n  if (BUILD.taskQueue && BUILD.updatable) {\n    hostRef.$flags$ |= 16 /* HOST_FLAGS.isQueuedForUpdate */;\n  }\n  if (BUILD.asyncLoading && hostRef.$flags$ & 4 /* HOST_FLAGS.isWaitingForChildren */) {\n    hostRef.$flags$ |= 512 /* HOST_FLAGS.needsRerender */;\n    return;\n  }\n  attachToAncestor(hostRef, hostRef.$ancestorComponent$);\n  // there is no ancestor component or the ancestor component\n  // has already fired off its lifecycle update then\n  // fire off the initial update\n  const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n  return BUILD.taskQueue ? writeTask(dispatch) : dispatch();\n};\n/**\n * Dispatch initial-render and update lifecycle hooks, enqueuing calls to\n * component lifecycle methods like `componentWillLoad` as well as\n * {@link updateComponent}, which will kick off the virtual DOM re-render.\n *\n * @param hostRef a reference to a host DOM node\n * @param isInitialLoad whether we're on the initial load or not\n * @returns an empty Promise which is used to enqueue a series of operations for\n * the component\n */\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n  const elm = hostRef.$hostElement$;\n  const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n  const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n  // We're going to use this variable together with `enqueue` to implement a\n  // little promise-based queue. We start out with it `undefined`. When we add\n  // the first function to the queue we'll set this variable to be that\n  // function's return value. When we attempt to add subsequent values to the\n  // queue we'll check that value and, if it was a `Promise`, we'll then chain\n  // the new function off of that `Promise` using `.then()`. This will give our\n  // queue two nice properties:\n  //\n  // 1. If all functions added to the queue are synchronous they'll be called\n  //    synchronously right away.\n  // 2. If all functions added to the queue are asynchronous they'll all be\n  //    called in order after `dispatchHooks` exits.\n  let maybePromise;\n  if (isInitialLoad) {\n    if (BUILD.lazyLoad && BUILD.hostListener) {\n      hostRef.$flags$ |= 256 /* HOST_FLAGS.isListenReady */;\n      if (hostRef.$queuedListeners$) {\n        hostRef.$queuedListeners$.map(_ref2 => {\n          let [methodName, event] = _ref2;\n          return safeCall(instance, methodName, event);\n        });\n        hostRef.$queuedListeners$ = undefined;\n      }\n    }\n    emitLifecycleEvent(elm, 'componentWillLoad');\n    if (BUILD.cmpWillLoad) {\n      // If `componentWillLoad` returns a `Promise` then we want to wait on\n      // whatever's going on in that `Promise` before we launch into\n      // rendering the component, doing other lifecycle stuff, etc. So\n      // in that case we assign the returned promise to the variable we\n      // declared above to hold a possible 'queueing' Promise\n      maybePromise = safeCall(instance, 'componentWillLoad');\n    }\n  } else {\n    emitLifecycleEvent(elm, 'componentWillUpdate');\n    if (BUILD.cmpWillUpdate) {\n      // Like `componentWillLoad` above, we allow Stencil component\n      // authors to return a `Promise` from this lifecycle callback, and\n      // we specify that our runtime will wait for that `Promise` to\n      // resolve before the component re-renders. So if the method\n      // returns a `Promise` we need to keep it around!\n      maybePromise = safeCall(instance, 'componentWillUpdate');\n    }\n  }\n  emitLifecycleEvent(elm, 'componentWillRender');\n  if (BUILD.cmpWillRender) {\n    maybePromise = enqueue(maybePromise, () => safeCall(instance, 'componentWillRender'));\n  }\n  endSchedule();\n  return enqueue(maybePromise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\n/**\n * This function uses a Promise to implement a simple first-in, first-out queue\n * of functions to be called.\n *\n * The queue is ordered on the basis of the first argument. If it's\n * `undefined`, then nothing is on the queue yet, so the provided function can\n * be called synchronously (although note that this function may return a\n * `Promise`). The idea is that then the return value of that enqueueing\n * operation is kept around, so that if it was a `Promise` then subsequent\n * functions can be enqueued by calling this function again with that `Promise`\n * as the first argument.\n *\n * @param maybePromise either a `Promise` which should resolve before the next function is called or an 'empty' sentinel\n * @param fn a function to enqueue\n * @returns either a `Promise` or the return value of the provided function\n */\nconst enqueue = (maybePromise, fn) => isPromisey(maybePromise) ? maybePromise.then(fn) : fn();\n/**\n * Check that a value is a `Promise`. To check, we first see if the value is an\n * instance of the `Promise` global. In a few circumstances, in particular if\n * the global has been overwritten, this is could be misleading, so we also do\n * a little 'duck typing' check to see if the `.then` property of the value is\n * defined and a function.\n *\n * @param maybePromise it might be a promise!\n * @returns whether it is or not\n */\nconst isPromisey = maybePromise => maybePromise instanceof Promise || maybePromise && maybePromise.then && typeof maybePromise.then === 'function';\n/**\n * Update a component given reference to its host elements and so on.\n *\n * @param hostRef an object containing references to the element's host node,\n * VDom nodes, and other metadata\n * @param instance a reference to the underlying host element where it will be\n * rendered\n * @param isInitialLoad whether or not this function is being called as part of\n * the first render cycle\n */\nconst updateComponent = async (hostRef, instance, isInitialLoad) => {\n  var _a;\n  const elm = hostRef.$hostElement$;\n  const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n  const rc = elm['s-rc'];\n  if (BUILD.style && isInitialLoad) {\n    // DOM WRITE!\n    attachStyles(hostRef);\n  }\n  const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n  if (BUILD.isDev) {\n    hostRef.$flags$ |= 1024 /* HOST_FLAGS.devOnRender */;\n  }\n  if (BUILD.hydrateServerSide) {\n    await callRender(hostRef, instance, elm, isInitialLoad);\n  } else {\n    callRender(hostRef, instance, elm, isInitialLoad);\n  }\n  if (BUILD.isDev) {\n    hostRef.$renderCount$ = hostRef.$renderCount$ === undefined ? 1 : hostRef.$renderCount$ + 1;\n    hostRef.$flags$ &= ~1024 /* HOST_FLAGS.devOnRender */;\n  }\n  if (BUILD.hydrateServerSide) {\n    try {\n      // manually connected child components during server-side hydrate\n      serverSideConnected(elm);\n      if (isInitialLoad) {\n        // using only during server-side hydrate\n        if (hostRef.$cmpMeta$.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n          elm['s-en'] = '';\n        } else if (hostRef.$cmpMeta$.$flags$ & 2 /* CMP_FLAGS.scopedCssEncapsulation */) {\n          elm['s-en'] = 'c';\n        }\n      }\n    } catch (e) {\n      consoleError(e, elm);\n    }\n  }\n  if (BUILD.asyncLoading && rc) {\n    // ok, so turns out there are some child host elements\n    // waiting on this parent element to load\n    // let's fire off all update callbacks waiting\n    rc.map(cb => cb());\n    elm['s-rc'] = undefined;\n  }\n  endRender();\n  endUpdate();\n  if (BUILD.asyncLoading) {\n    const childrenPromises = (_a = elm['s-p']) !== null && _a !== void 0 ? _a : [];\n    const postUpdate = () => postUpdateComponent(hostRef);\n    if (childrenPromises.length === 0) {\n      postUpdate();\n    } else {\n      Promise.all(childrenPromises).then(postUpdate);\n      hostRef.$flags$ |= 4 /* HOST_FLAGS.isWaitingForChildren */;\n      childrenPromises.length = 0;\n    }\n  } else {\n    postUpdateComponent(hostRef);\n  }\n};\n/**\n * Handle making the call to the VDom renderer with the proper context given\n * various build variables\n *\n * @param hostRef an object containing references to the element's host node,\n * VDom nodes, and other metadata\n * @param instance a reference to the underlying host element where it will be\n * rendered\n * @param elm the Host element for the component\n * @param isInitialLoad whether or not this function is being called as part of\n * @returns an empty promise\n */\nconst callRender = (hostRef, instance, elm, isInitialLoad) => {\n  // in order for bundlers to correctly tree-shake the BUILD object\n  // we need to ensure BUILD is not deoptimized within a try/catch\n  // https://rollupjs.org/guide/en/#treeshake tryCatchDeoptimization\n  const allRenderFn = BUILD.allRenderFn ? true : false;\n  const lazyLoad = BUILD.lazyLoad ? true : false;\n  const taskQueue = BUILD.taskQueue ? true : false;\n  const updatable = BUILD.updatable ? true : false;\n  try {\n    renderingRef = instance;\n    /**\n     * minification optimization: `allRenderFn` is `true` if all components have a `render`\n     * method, so we can call the method immediately. If not, check before calling it.\n     */\n    instance = allRenderFn ? instance.render() : instance.render && instance.render();\n    if (updatable && taskQueue) {\n      hostRef.$flags$ &= ~16 /* HOST_FLAGS.isQueuedForUpdate */;\n    }\n    if (updatable || lazyLoad) {\n      hostRef.$flags$ |= 2 /* HOST_FLAGS.hasRendered */;\n    }\n    if (BUILD.hasRenderFn || BUILD.reflect) {\n      if (BUILD.vdomRender || BUILD.reflect) {\n        // looks like we've got child nodes to render into this host element\n        // or we need to update the css class/attrs on the host element\n        // DOM WRITE!\n        if (BUILD.hydrateServerSide) {\n          return Promise.resolve(instance).then(value => renderVdom(hostRef, value, isInitialLoad));\n        } else {\n          renderVdom(hostRef, instance, isInitialLoad);\n        }\n      } else {\n        const shadowRoot = elm.shadowRoot;\n        if (hostRef.$cmpMeta$.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n          shadowRoot.textContent = instance;\n        } else {\n          elm.textContent = instance;\n        }\n      }\n    }\n  } catch (e) {\n    consoleError(e, hostRef.$hostElement$);\n  }\n  renderingRef = null;\n  return null;\n};\nconst getRenderingRef = () => renderingRef;\nconst postUpdateComponent = hostRef => {\n  const tagName = hostRef.$cmpMeta$.$tagName$;\n  const elm = hostRef.$hostElement$;\n  const endPostUpdate = createTime('postUpdate', tagName);\n  const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n  const ancestorComponent = hostRef.$ancestorComponent$;\n  if (BUILD.cmpDidRender) {\n    if (BUILD.isDev) {\n      hostRef.$flags$ |= 1024 /* HOST_FLAGS.devOnRender */;\n    }\n    safeCall(instance, 'componentDidRender');\n    if (BUILD.isDev) {\n      hostRef.$flags$ &= ~1024 /* HOST_FLAGS.devOnRender */;\n    }\n  }\n  emitLifecycleEvent(elm, 'componentDidRender');\n  if (!(hostRef.$flags$ & 64 /* HOST_FLAGS.hasLoadedComponent */)) {\n    hostRef.$flags$ |= 64 /* HOST_FLAGS.hasLoadedComponent */;\n    if (BUILD.asyncLoading && BUILD.cssAnnotations) {\n      // DOM WRITE!\n      addHydratedFlag(elm);\n    }\n    if (BUILD.cmpDidLoad) {\n      if (BUILD.isDev) {\n        hostRef.$flags$ |= 2048 /* HOST_FLAGS.devOnDidLoad */;\n      }\n      safeCall(instance, 'componentDidLoad');\n      if (BUILD.isDev) {\n        hostRef.$flags$ &= ~2048 /* HOST_FLAGS.devOnDidLoad */;\n      }\n    }\n    emitLifecycleEvent(elm, 'componentDidLoad');\n    endPostUpdate();\n    if (BUILD.asyncLoading) {\n      hostRef.$onReadyResolve$(elm);\n      if (!ancestorComponent) {\n        appDidLoad(tagName);\n      }\n    }\n  } else {\n    if (BUILD.cmpDidUpdate) {\n      // we've already loaded this component\n      // fire off the user's componentDidUpdate method (if one was provided)\n      // componentDidUpdate runs AFTER render() has been called\n      // and all child components have finished updating\n      if (BUILD.isDev) {\n        hostRef.$flags$ |= 1024 /* HOST_FLAGS.devOnRender */;\n      }\n      safeCall(instance, 'componentDidUpdate');\n      if (BUILD.isDev) {\n        hostRef.$flags$ &= ~1024 /* HOST_FLAGS.devOnRender */;\n      }\n    }\n    emitLifecycleEvent(elm, 'componentDidUpdate');\n    endPostUpdate();\n  }\n  if (BUILD.method && BUILD.lazyLoad) {\n    hostRef.$onInstanceResolve$(elm);\n  }\n  // load events fire from bottom to top\n  // the deepest elements load first then bubbles up\n  if (BUILD.asyncLoading) {\n    if (hostRef.$onRenderResolve$) {\n      hostRef.$onRenderResolve$();\n      hostRef.$onRenderResolve$ = undefined;\n    }\n    if (hostRef.$flags$ & 512 /* HOST_FLAGS.needsRerender */) {\n      nextTick(() => scheduleUpdate(hostRef, false));\n    }\n    hostRef.$flags$ &= ~(4 /* HOST_FLAGS.isWaitingForChildren */ | 512 /* HOST_FLAGS.needsRerender */);\n  }\n  // ( •_•)\n  // ( •_•)>⌐■-■\n  // (⌐■_■)\n};\nconst forceUpdate = ref => {\n  if (BUILD.updatable && (Build.isBrowser || Build.isTesting)) {\n    const hostRef = getHostRef(ref);\n    const isConnected = hostRef.$hostElement$.isConnected;\n    if (isConnected && (hostRef.$flags$ & (2 /* HOST_FLAGS.hasRendered */ | 16 /* HOST_FLAGS.isQueuedForUpdate */)) === 2 /* HOST_FLAGS.hasRendered */) {\n      scheduleUpdate(hostRef, false);\n    }\n    // Returns \"true\" when the forced update was successfully scheduled\n    return isConnected;\n  }\n  return false;\n};\nconst appDidLoad = who => {\n  // on appload\n  // we have finish the first big initial render\n  if (BUILD.cssAnnotations) {\n    addHydratedFlag(doc.documentElement);\n  }\n  if (BUILD.asyncQueue) {\n    plt.$flags$ |= 2 /* PLATFORM_FLAGS.appLoaded */;\n  }\n  nextTick(() => emitEvent(win, 'appload', {\n    detail: {\n      namespace: NAMESPACE\n    }\n  }));\n  if (BUILD.profile && performance.measure) {\n    performance.measure(`[Stencil] ${NAMESPACE} initial load (by ${who})`, 'st:app:start');\n  }\n};\n/**\n * Allows to safely call a method, e.g. `componentDidLoad`, on an instance,\n * e.g. custom element node. If a build figures out that e.g. no component\n * has a `componentDidLoad` method, the instance method gets removed from the\n * output bundle and this function returns `undefined`.\n * @param instance any object that may or may not contain methods\n * @param method method name\n * @param arg single arbitrary argument\n * @returns result of method call if it exists, otherwise `undefined`\n */\nconst safeCall = (instance, method, arg) => {\n  if (instance && instance[method]) {\n    try {\n      return instance[method](arg);\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n  return undefined;\n};\n/**\n * For debugging purposes as `BUILD.lifecycleDOMEvents` is `false` by default and will\n * get removed by the compiler. Used for timing events to see how long they take.\n * @param elm the target of the Event\n * @param lifecycleName name of the event\n */\nconst emitLifecycleEvent = (elm, lifecycleName) => {\n  if (BUILD.lifecycleDOMEvents) {\n    emitEvent(elm, 'stencil_' + lifecycleName, {\n      bubbles: true,\n      composed: true,\n      detail: {\n        namespace: NAMESPACE\n      }\n    });\n  }\n};\nconst addHydratedFlag = elm => BUILD.hydratedClass ? elm.classList.add('hydrated') : BUILD.hydratedAttribute ? elm.setAttribute('hydrated', '') : undefined;\nconst serverSideConnected = elm => {\n  const children = elm.children;\n  if (children != null) {\n    for (let i = 0, ii = children.length; i < ii; i++) {\n      const childElm = children[i];\n      if (typeof childElm.connectedCallback === 'function') {\n        childElm.connectedCallback();\n      }\n      serverSideConnected(childElm);\n    }\n  }\n};\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n  // check our new property value against our internal value\n  const hostRef = getHostRef(ref);\n  const elm = BUILD.lazyLoad ? hostRef.$hostElement$ : ref;\n  const oldVal = hostRef.$instanceValues$.get(propName);\n  const flags = hostRef.$flags$;\n  const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n  newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n  // explicitly check for NaN on both sides, as `NaN === NaN` is always false\n  const areBothNaN = Number.isNaN(oldVal) && Number.isNaN(newVal);\n  const didValueChange = newVal !== oldVal && !areBothNaN;\n  if ((!BUILD.lazyLoad || !(flags & 8 /* HOST_FLAGS.isConstructingInstance */) || oldVal === undefined) && didValueChange) {\n    // gadzooks! the property's value has changed!!\n    // set our new value!\n    hostRef.$instanceValues$.set(propName, newVal);\n    if (BUILD.isDev) {\n      if (hostRef.$flags$ & 1024 /* HOST_FLAGS.devOnRender */) {\n        consoleDevWarn(`The state/prop \"${propName}\" changed during rendering. This can potentially lead to infinite-loops and other bugs.`, '\\nElement', elm, '\\nNew value', newVal, '\\nOld value', oldVal);\n      } else if (hostRef.$flags$ & 2048 /* HOST_FLAGS.devOnDidLoad */) {\n        consoleDevWarn(`The state/prop \"${propName}\" changed during \"componentDidLoad()\", this triggers extra re-renders, try to setup on \"componentWillLoad()\"`, '\\nElement', elm, '\\nNew value', newVal, '\\nOld value', oldVal);\n      }\n    }\n    if (!BUILD.lazyLoad || instance) {\n      // get an array of method names of watch functions to call\n      if (BUILD.watchCallback && cmpMeta.$watchers$ && flags & 128 /* HOST_FLAGS.isWatchReady */) {\n        const watchMethods = cmpMeta.$watchers$[propName];\n        if (watchMethods) {\n          // this instance is watching for when this property changed\n          watchMethods.map(watchMethodName => {\n            try {\n              // fire off each of the watch methods that are watching this property\n              instance[watchMethodName](newVal, oldVal, propName);\n            } catch (e) {\n              consoleError(e, elm);\n            }\n          });\n        }\n      }\n      if (BUILD.updatable && (flags & (2 /* HOST_FLAGS.hasRendered */ | 16 /* HOST_FLAGS.isQueuedForUpdate */)) === 2 /* HOST_FLAGS.hasRendered */) {\n        if (BUILD.cmpShouldUpdate && instance.componentShouldUpdate) {\n          if (instance.componentShouldUpdate(newVal, oldVal, propName) === false) {\n            return;\n          }\n        }\n        // looks like this value actually changed, so we've got work to do!\n        // but only if we've already rendered, otherwise just chill out\n        // queue that we need to do an update, but don't worry about queuing\n        // up millions cuz this function ensures it only runs once\n        scheduleUpdate(hostRef, false);\n      }\n    }\n  }\n};\n/**\n * Attach a series of runtime constructs to a compiled Stencil component\n * constructor, including getters and setters for the `@Prop` and `@State`\n * decorators, callbacks for when attributes change, and so on.\n *\n * @param Cstr the constructor for a component that we need to process\n * @param cmpMeta metadata collected previously about the component\n * @param flags a number used to store a series of bit flags\n * @returns a reference to the same constructor passed in (but now mutated)\n */\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n  var _a;\n  const prototype = Cstr.prototype;\n  /**\n   * proxy form associated custom element lifecycle callbacks\n   * @ref https://web.dev/articles/more-capable-form-controls#lifecycle_callbacks\n   */\n  if (BUILD.formAssociated && cmpMeta.$flags$ & 64 /* CMP_FLAGS.formAssociated */ && flags & 1 /* PROXY_FLAGS.isElementConstructor */) {\n    FORM_ASSOCIATED_CUSTOM_ELEMENT_CALLBACKS.forEach(cbName => Object.defineProperty(prototype, cbName, {\n      value() {\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n        const hostRef = getHostRef(this);\n        const elm = BUILD.lazyLoad ? hostRef.$hostElement$ : this;\n        const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n        if (!instance) {\n          hostRef.$onReadyPromise$.then(instance => {\n            var _a;\n            return (_a = instance[cbName]) === null || _a === void 0 ? void 0 : _a.call(instance, ...args);\n          });\n        } else {\n          const cb = instance[cbName];\n          typeof cb === 'function' && cb(...args);\n        }\n      }\n    }));\n  }\n  if (BUILD.member && cmpMeta.$members$) {\n    if (BUILD.watchCallback && Cstr.watchers) {\n      cmpMeta.$watchers$ = Cstr.watchers;\n    }\n    // It's better to have a const than two Object.entries()\n    const members = Object.entries(cmpMeta.$members$);\n    members.map(_ref3 => {\n      let [memberName, [memberFlags]] = _ref3;\n      if ((BUILD.prop || BUILD.state) && (memberFlags & 31 /* MEMBER_FLAGS.Prop */ || (!BUILD.lazyLoad || flags & 2 /* PROXY_FLAGS.proxyState */) && memberFlags & 32 /* MEMBER_FLAGS.State */)) {\n        // proxyComponent - prop\n        Object.defineProperty(prototype, memberName, {\n          get() {\n            // proxyComponent, get value\n            return getValue(this, memberName);\n          },\n          set(newValue) {\n            // only during dev time\n            if (BUILD.isDev) {\n              const ref = getHostRef(this);\n              if (\n              // we are proxying the instance (not element)\n              (flags & 1 /* PROXY_FLAGS.isElementConstructor */) === 0 &&\n              // the element is not constructing\n              (ref && ref.$flags$ & 8 /* HOST_FLAGS.isConstructingInstance */) === 0 &&\n              // the member is a prop\n              (memberFlags & 31 /* MEMBER_FLAGS.Prop */) !== 0 &&\n              // the member is not mutable\n              (memberFlags & 1024 /* MEMBER_FLAGS.Mutable */) === 0) {\n                consoleDevWarn(`@Prop() \"${memberName}\" on <${cmpMeta.$tagName$}> is immutable but was modified from within the component.\\nMore information: https://stenciljs.com/docs/properties#prop-mutability`);\n              }\n            }\n            // proxyComponent, set value\n            setValue(this, memberName, newValue, cmpMeta);\n          },\n          configurable: true,\n          enumerable: true\n        });\n      } else if (BUILD.lazyLoad && BUILD.method && flags & 1 /* PROXY_FLAGS.isElementConstructor */ && memberFlags & 64 /* MEMBER_FLAGS.Method */) {\n        // proxyComponent - method\n        Object.defineProperty(prototype, memberName, {\n          value() {\n            for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n              args[_key3] = arguments[_key3];\n            }\n            var _a;\n            const ref = getHostRef(this);\n            return (_a = ref === null || ref === void 0 ? void 0 : ref.$onInstancePromise$) === null || _a === void 0 ? void 0 : _a.then(() => {\n              var _a;\n              return (_a = ref.$lazyInstance$) === null || _a === void 0 ? void 0 : _a[memberName](...args);\n            });\n          }\n        });\n      }\n    });\n    if (BUILD.observeAttribute && (!BUILD.lazyLoad || flags & 1 /* PROXY_FLAGS.isElementConstructor */)) {\n      const attrNameToPropName = new Map();\n      prototype.attributeChangedCallback = function (attrName, oldValue, newValue) {\n        plt.jmp(() => {\n          var _a;\n          const propName = attrNameToPropName.get(attrName);\n          //  In a web component lifecycle the attributeChangedCallback runs prior to connectedCallback\n          //  in the case where an attribute was set inline.\n          //  ```html\n          //    <my-component some-attribute=\"some-value\"></my-component>\n          //  ```\n          //\n          //  There is an edge case where a developer sets the attribute inline on a custom element and then\n          //  programmatically changes it before it has been upgraded as shown below:\n          //\n          //  ```html\n          //    <!-- this component has _not_ been upgraded yet -->\n          //    <my-component id=\"test\" some-attribute=\"some-value\"></my-component>\n          //    <script>\n          //      // grab non-upgraded component\n          //      el = document.querySelector(\"#test\");\n          //      el.someAttribute = \"another-value\";\n          //      // upgrade component\n          //      customElements.define('my-component', MyComponent);\n          //    </script>\n          //  ```\n          //  In this case if we do not un-shadow here and use the value of the shadowing property, attributeChangedCallback\n          //  will be called with `newValue = \"some-value\"` and will set the shadowed property (this.someAttribute = \"another-value\")\n          //  to the value that was set inline i.e. \"some-value\" from above example. When\n          //  the connectedCallback attempts to un-shadow it will use \"some-value\" as the initial value rather than \"another-value\"\n          //\n          //  The case where the attribute was NOT set inline but was not set programmatically shall be handled/un-shadowed\n          //  by connectedCallback as this attributeChangedCallback will not fire.\n          //\n          //  https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n          //\n          //  TODO(STENCIL-16) we should think about whether or not we actually want to be reflecting the attributes to\n          //  properties here given that this goes against best practices outlined here\n          //  https://developers.google.com/web/fundamentals/web-components/best-practices#avoid-reentrancy\n          if (this.hasOwnProperty(propName)) {\n            newValue = this[propName];\n            delete this[propName];\n          } else if (prototype.hasOwnProperty(propName) && typeof this[propName] === 'number' && this[propName] == newValue) {\n            // if the propName exists on the prototype of `Cstr`, this update may be a result of Stencil using native\n            // APIs to reflect props as attributes. Calls to `setAttribute(someElement, propName)` will result in\n            // `propName` to be converted to a `DOMString`, which may not be what we want for other primitive props.\n            return;\n          } else if (propName == null) {\n            // At this point we should know this is not a \"member\", so we can treat it like watching an attribute\n            // on a vanilla web component\n            const hostRef = getHostRef(this);\n            const flags = hostRef === null || hostRef === void 0 ? void 0 : hostRef.$flags$;\n            // We only want to trigger the callback(s) if:\n            // 1. The instance is ready\n            // 2. The watchers are ready\n            // 3. The value has changed\n            if (flags && !(flags & 8 /* HOST_FLAGS.isConstructingInstance */) && flags & 128 /* HOST_FLAGS.isWatchReady */ && newValue !== oldValue) {\n              const elm = BUILD.lazyLoad ? hostRef.$hostElement$ : this;\n              const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n              const entry = (_a = cmpMeta.$watchers$) === null || _a === void 0 ? void 0 : _a[attrName];\n              entry === null || entry === void 0 ? void 0 : entry.forEach(callbackName => {\n                if (instance[callbackName] != null) {\n                  instance[callbackName].call(instance, newValue, oldValue, attrName);\n                }\n              });\n            }\n            return;\n          }\n          this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\n        });\n      };\n      // Create an array of attributes to observe\n      // This list in comprised of all strings used within a `@Watch()` decorator\n      // on a component as well as any Stencil-specific \"members\" (`@Prop()`s and `@State()`s).\n      // As such, there is no way to guarantee type-safety here that a user hasn't entered\n      // an invalid attribute.\n      Cstr.observedAttributes = Array.from(new Set([...Object.keys((_a = cmpMeta.$watchers$) !== null && _a !== void 0 ? _a : {}), ...members.filter(_ref4 => {\n        let [_, m] = _ref4;\n        return m[0] & 15;\n      } /* MEMBER_FLAGS.HasAttribute */).map(_ref5 => {\n        let [propName, m] = _ref5;\n        var _a;\n        const attrName = m[1] || propName;\n        attrNameToPropName.set(attrName, propName);\n        if (BUILD.reflect && m[0] & 512 /* MEMBER_FLAGS.ReflectAttr */) {\n          (_a = cmpMeta.$attrsToReflect$) === null || _a === void 0 ? void 0 : _a.push([propName, attrName]);\n        }\n        return attrName;\n      })]));\n    }\n  }\n  return Cstr;\n};\n/**\n * Initialize a Stencil component given a reference to its host element, its\n * runtime bookkeeping data structure, runtime metadata about the component,\n * and (optionally) an HMR version ID.\n *\n * @param elm a host element\n * @param hostRef the element's runtime bookkeeping object\n * @param cmpMeta runtime metadata for the Stencil component\n * @param hmrVersionId an (optional) HMR version ID\n */\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId) => {\n  let Cstr;\n  // initializeComponent\n  if ((hostRef.$flags$ & 32 /* HOST_FLAGS.hasInitializedComponent */) === 0) {\n    // Let the runtime know that the component has been initialized\n    hostRef.$flags$ |= 32 /* HOST_FLAGS.hasInitializedComponent */;\n    if (BUILD.lazyLoad || BUILD.hydrateClientSide) {\n      // lazy loaded components\n      // request the component's implementation to be\n      // wired up with the host element\n      Cstr = loadModule(cmpMeta, hostRef, hmrVersionId);\n      if (Cstr.then) {\n        // Await creates a micro-task avoid if possible\n        const endLoad = uniqueTime(`st:load:${cmpMeta.$tagName$}:${hostRef.$modeName$}`, `[Stencil] Load module for <${cmpMeta.$tagName$}>`);\n        Cstr = await Cstr;\n        endLoad();\n      }\n      if ((BUILD.isDev || BUILD.isDebug) && !Cstr) {\n        throw new Error(`Constructor for \"${cmpMeta.$tagName$}#${hostRef.$modeName$}\" was not found`);\n      }\n      if (BUILD.member && !Cstr.isProxied) {\n        // we've never proxied this Constructor before\n        // let's add the getters/setters to its prototype before\n        // the first time we create an instance of the implementation\n        if (BUILD.watchCallback) {\n          cmpMeta.$watchers$ = Cstr.watchers;\n        }\n        proxyComponent(Cstr, cmpMeta, 2 /* PROXY_FLAGS.proxyState */);\n        Cstr.isProxied = true;\n      }\n      const endNewInstance = createTime('createInstance', cmpMeta.$tagName$);\n      // ok, time to construct the instance\n      // but let's keep track of when we start and stop\n      // so that the getters/setters don't incorrectly step on data\n      if (BUILD.member) {\n        hostRef.$flags$ |= 8 /* HOST_FLAGS.isConstructingInstance */;\n      }\n      // construct the lazy-loaded component implementation\n      // passing the hostRef is very important during\n      // construction in order to directly wire together the\n      // host element and the lazy-loaded instance\n      try {\n        new Cstr(hostRef);\n      } catch (e) {\n        consoleError(e);\n      }\n      if (BUILD.member) {\n        hostRef.$flags$ &= ~8 /* HOST_FLAGS.isConstructingInstance */;\n      }\n      if (BUILD.watchCallback) {\n        hostRef.$flags$ |= 128 /* HOST_FLAGS.isWatchReady */;\n      }\n      endNewInstance();\n      fireConnectedCallback(hostRef.$lazyInstance$);\n    } else {\n      // sync constructor component\n      Cstr = elm.constructor;\n      // wait for the CustomElementRegistry to mark the component as ready before setting `isWatchReady`. Otherwise,\n      // watchers may fire prematurely if `customElements.get()`/`customElements.whenDefined()` resolves _before_\n      // Stencil has completed instantiating the component.\n      customElements.whenDefined(cmpMeta.$tagName$).then(() => hostRef.$flags$ |= 128 /* HOST_FLAGS.isWatchReady */);\n    }\n    if (BUILD.style && Cstr.style) {\n      // this component has styles but we haven't registered them yet\n      let style = Cstr.style;\n      if (BUILD.mode && typeof style !== 'string') {\n        style = style[hostRef.$modeName$ = computeMode(elm)];\n        if (BUILD.hydrateServerSide && hostRef.$modeName$) {\n          elm.setAttribute('s-mode', hostRef.$modeName$);\n        }\n      }\n      const scopeId = getScopeId(cmpMeta, hostRef.$modeName$);\n      if (!styles.has(scopeId)) {\n        const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n        if (!BUILD.hydrateServerSide && BUILD.shadowDom &&\n        // TODO(STENCIL-854): Remove code related to legacy shadowDomShim field\n        BUILD.shadowDomShim && cmpMeta.$flags$ & 8 /* CMP_FLAGS.needsShadowDomShim */) {\n          style = await import('./shadow-css.js').then(m => m.scopeCss(style, scopeId, false));\n        }\n        registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */));\n        endRegisterStyles();\n      }\n    }\n  }\n  // we've successfully created a lazy instance\n  const ancestorComponent = hostRef.$ancestorComponent$;\n  const schedule = () => scheduleUpdate(hostRef, true);\n  if (BUILD.asyncLoading && ancestorComponent && ancestorComponent['s-rc']) {\n    // this is the initial load and this component it has an ancestor component\n    // but the ancestor component has NOT fired its will update lifecycle yet\n    // so let's just cool our jets and wait for the ancestor to continue first\n    // this will get fired off when the ancestor component\n    // finally gets around to rendering its lazy self\n    // fire off the initial update\n    ancestorComponent['s-rc'].push(schedule);\n  } else {\n    schedule();\n  }\n};\nconst fireConnectedCallback = instance => {\n  if (BUILD.lazyLoad && BUILD.connectedCallback) {\n    safeCall(instance, 'connectedCallback');\n  }\n};\nconst connectedCallback = elm => {\n  if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\n    const hostRef = getHostRef(elm);\n    const cmpMeta = hostRef.$cmpMeta$;\n    const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n    if (BUILD.hostListenerTargetParent) {\n      // only run if we have listeners being attached to a parent\n      addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, true);\n    }\n    if (!(hostRef.$flags$ & 1 /* HOST_FLAGS.hasConnected */)) {\n      // first time this component has connected\n      hostRef.$flags$ |= 1 /* HOST_FLAGS.hasConnected */;\n      let hostId;\n      if (BUILD.hydrateClientSide) {\n        hostId = elm.getAttribute(HYDRATE_ID);\n        if (hostId) {\n          if (BUILD.shadowDom && supportsShadow && cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n            const scopeId = BUILD.mode ? addStyle(elm.shadowRoot, cmpMeta, elm.getAttribute('s-mode')) : addStyle(elm.shadowRoot, cmpMeta);\n            elm.classList.remove(scopeId + '-h', scopeId + '-s');\n          }\n          initializeClientHydrate(elm, cmpMeta.$tagName$, hostId, hostRef);\n        }\n      }\n      if (BUILD.slotRelocation && !hostId) {\n        // initUpdate\n        // if the slot polyfill is required we'll need to put some nodes\n        // in here to act as original content anchors as we move nodes around\n        // host element has been connected to the DOM\n        if (BUILD.hydrateServerSide || (BUILD.slot || BUILD.shadowDom) &&\n        // TODO(STENCIL-854): Remove code related to legacy shadowDomShim field\n        cmpMeta.$flags$ & (4 /* CMP_FLAGS.hasSlotRelocation */ | 8 /* CMP_FLAGS.needsShadowDomShim */)) {\n          setContentReference(elm);\n        }\n      }\n      if (BUILD.asyncLoading) {\n        // find the first ancestor component (if there is one) and register\n        // this component as one of the actively loading child components for its ancestor\n        let ancestorComponent = elm;\n        while (ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host) {\n          // climb up the ancestors looking for the first\n          // component that hasn't finished its lifecycle update yet\n          if (BUILD.hydrateClientSide && ancestorComponent.nodeType === 1 /* NODE_TYPE.ElementNode */ && ancestorComponent.hasAttribute('s-id') && ancestorComponent['s-p'] || ancestorComponent['s-p']) {\n            // we found this components first ancestor component\n            // keep a reference to this component's ancestor component\n            attachToAncestor(hostRef, hostRef.$ancestorComponent$ = ancestorComponent);\n            break;\n          }\n        }\n      }\n      // Lazy properties\n      // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n      if (BUILD.prop && !BUILD.hydrateServerSide && cmpMeta.$members$) {\n        Object.entries(cmpMeta.$members$).map(_ref6 => {\n          let [memberName, [memberFlags]] = _ref6;\n          if (memberFlags & 31 /* MEMBER_FLAGS.Prop */ && elm.hasOwnProperty(memberName)) {\n            const value = elm[memberName];\n            delete elm[memberName];\n            elm[memberName] = value;\n          }\n        });\n      }\n      if (BUILD.initializeNextTick) {\n        // connectedCallback, taskQueue, initialLoad\n        // angular sets attribute AFTER connectCallback\n        // https://github.com/angular/angular/issues/18909\n        // https://github.com/angular/angular/issues/19940\n        nextTick(() => initializeComponent(elm, hostRef, cmpMeta));\n      } else {\n        initializeComponent(elm, hostRef, cmpMeta);\n      }\n    } else {\n      // not the first time this has connected\n      // reattach any event listeners to the host\n      // since they would have been removed when disconnected\n      addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, false);\n      // fire off connectedCallback() on component instance\n      if (hostRef === null || hostRef === void 0 ? void 0 : hostRef.$lazyInstance$) {\n        fireConnectedCallback(hostRef.$lazyInstance$);\n      } else if (hostRef === null || hostRef === void 0 ? void 0 : hostRef.$onReadyPromise$) {\n        hostRef.$onReadyPromise$.then(() => fireConnectedCallback(hostRef.$lazyInstance$));\n      }\n    }\n    endConnected();\n  }\n};\nconst setContentReference = elm => {\n  // only required when we're NOT using native shadow dom (slot)\n  // or this browser doesn't support native shadow dom\n  // and this host element was NOT created with SSR\n  // let's pick out the inner content for slot projection\n  // create a node to represent where the original\n  // content was first placed, which is useful later on\n  const contentRefElm = elm['s-cr'] = doc.createComment(BUILD.isDebug ? `content-ref (host=${elm.localName})` : '');\n  contentRefElm['s-cn'] = true;\n  elm.insertBefore(contentRefElm, elm.firstChild);\n};\nconst disconnectInstance = instance => {\n  if (BUILD.lazyLoad && BUILD.disconnectedCallback) {\n    safeCall(instance, 'disconnectedCallback');\n  }\n  if (BUILD.cmpDidUnload) {\n    safeCall(instance, 'componentDidUnload');\n  }\n};\nconst disconnectedCallback = async elm => {\n  if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\n    const hostRef = getHostRef(elm);\n    if (BUILD.hostListener) {\n      if (hostRef.$rmListeners$) {\n        hostRef.$rmListeners$.map(rmListener => rmListener());\n        hostRef.$rmListeners$ = undefined;\n      }\n    }\n    if (!BUILD.lazyLoad) {\n      disconnectInstance(elm);\n    } else if (hostRef === null || hostRef === void 0 ? void 0 : hostRef.$lazyInstance$) {\n      disconnectInstance(hostRef.$lazyInstance$);\n    } else if (hostRef === null || hostRef === void 0 ? void 0 : hostRef.$onReadyPromise$) {\n      hostRef.$onReadyPromise$.then(() => disconnectInstance(hostRef.$lazyInstance$));\n    }\n  }\n};\nconst patchPseudoShadowDom = (hostElementPrototype, descriptorPrototype) => {\n  patchCloneNode(hostElementPrototype);\n  patchSlotAppendChild(hostElementPrototype);\n  patchSlotAppend(hostElementPrototype);\n  patchSlotPrepend(hostElementPrototype);\n  patchSlotInsertAdjacentElement(hostElementPrototype);\n  patchSlotInsertAdjacentHTML(hostElementPrototype);\n  patchSlotInsertAdjacentText(hostElementPrototype);\n  patchTextContent(hostElementPrototype, descriptorPrototype);\n  patchChildSlotNodes(hostElementPrototype, descriptorPrototype);\n};\nconst patchCloneNode = HostElementPrototype => {\n  const orgCloneNode = HostElementPrototype.cloneNode;\n  HostElementPrototype.cloneNode = function (deep) {\n    const srcNode = this;\n    const isShadowDom = BUILD.shadowDom ? srcNode.shadowRoot && supportsShadow : false;\n    const clonedNode = orgCloneNode.call(srcNode, isShadowDom ? deep : false);\n    if (BUILD.slot && !isShadowDom && deep) {\n      let i = 0;\n      let slotted, nonStencilNode;\n      const stencilPrivates = ['s-id', 's-cr', 's-lr', 's-rc', 's-sc', 's-p', 's-cn', 's-sr', 's-sn', 's-hn', 's-ol', 's-nr', 's-si'];\n      for (; i < srcNode.childNodes.length; i++) {\n        slotted = srcNode.childNodes[i]['s-nr'];\n        nonStencilNode = stencilPrivates.every(privateField => !srcNode.childNodes[i][privateField]);\n        if (slotted) {\n          if (BUILD.appendChildSlotFix && clonedNode.__appendChild) {\n            clonedNode.__appendChild(slotted.cloneNode(true));\n          } else {\n            clonedNode.appendChild(slotted.cloneNode(true));\n          }\n        }\n        if (nonStencilNode) {\n          clonedNode.appendChild(srcNode.childNodes[i].cloneNode(true));\n        }\n      }\n    }\n    return clonedNode;\n  };\n};\nconst patchSlotAppendChild = HostElementPrototype => {\n  HostElementPrototype.__appendChild = HostElementPrototype.appendChild;\n  HostElementPrototype.appendChild = function (newChild) {\n    const slotName = newChild['s-sn'] = getSlotName(newChild);\n    const slotNode = getHostSlotNode(this.childNodes, slotName);\n    if (slotNode) {\n      const slotChildNodes = getHostSlotChildNodes(slotNode, slotName);\n      const appendAfter = slotChildNodes[slotChildNodes.length - 1];\n      return appendAfter.parentNode.insertBefore(newChild, appendAfter.nextSibling);\n    }\n    return this.__appendChild(newChild);\n  };\n};\n/**\n * Patches the `prepend` method for a slotted node inside a scoped component.\n *\n * @param HostElementPrototype the `Element` to be patched\n */\nconst patchSlotPrepend = HostElementPrototype => {\n  const originalPrepend = HostElementPrototype.prepend;\n  HostElementPrototype.prepend = function () {\n    for (var _len4 = arguments.length, newChildren = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      newChildren[_key4] = arguments[_key4];\n    }\n    newChildren.forEach(newChild => {\n      if (typeof newChild === 'string') {\n        newChild = this.ownerDocument.createTextNode(newChild);\n      }\n      const slotName = newChild['s-sn'] = getSlotName(newChild);\n      const slotNode = getHostSlotNode(this.childNodes, slotName);\n      if (slotNode) {\n        const slotPlaceholder = document.createTextNode('');\n        slotPlaceholder['s-nr'] = newChild;\n        slotNode['s-cr'].parentNode.__appendChild(slotPlaceholder);\n        newChild['s-ol'] = slotPlaceholder;\n        const slotChildNodes = getHostSlotChildNodes(slotNode, slotName);\n        const appendAfter = slotChildNodes[0];\n        return appendAfter.parentNode.insertBefore(newChild, appendAfter.nextSibling);\n      }\n      if (newChild.nodeType === 1 && !!newChild.getAttribute('slot')) {\n        newChild.hidden = true;\n      }\n      return originalPrepend.call(this, newChild);\n    });\n  };\n};\n/**\n * Patches the `append` method for a slotted node inside a scoped component. The patched method uses\n * `appendChild` under-the-hood while creating text nodes for any new children that passed as bare strings.\n *\n * @param HostElementPrototype the `Element` to be patched\n */\nconst patchSlotAppend = HostElementPrototype => {\n  HostElementPrototype.append = function () {\n    for (var _len5 = arguments.length, newChildren = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      newChildren[_key5] = arguments[_key5];\n    }\n    newChildren.forEach(newChild => {\n      if (typeof newChild === 'string') {\n        newChild = this.ownerDocument.createTextNode(newChild);\n      }\n      this.appendChild(newChild);\n    });\n  };\n};\n/**\n * Patches the `insertAdjacentHTML` method for a slotted node inside a scoped component. Specifically,\n * we only need to patch the behavior for the specific `beforeend` and `afterbegin` positions so the element\n * gets inserted into the DOM in the correct location.\n *\n * @param HostElementPrototype the `Element` to be patched\n */\nconst patchSlotInsertAdjacentHTML = HostElementPrototype => {\n  const originalInsertAdjacentHtml = HostElementPrototype.insertAdjacentHTML;\n  HostElementPrototype.insertAdjacentHTML = function (position, text) {\n    if (position !== 'afterbegin' && position !== 'beforeend') {\n      return originalInsertAdjacentHtml.call(this, position, text);\n    }\n    const container = this.ownerDocument.createElement('_');\n    let node;\n    container.innerHTML = text;\n    if (position === 'afterbegin') {\n      while (node = container.firstChild) {\n        this.prepend(node);\n      }\n    } else if (position === 'beforeend') {\n      while (node = container.firstChild) {\n        this.append(node);\n      }\n    }\n  };\n};\n/**\n * Patches the `insertAdjacentText` method for a slotted node inside a scoped component. Specifically,\n * we only need to patch the behavior for the specific `beforeend` and `afterbegin` positions so the text node\n * gets inserted into the DOM in the correct location.\n *\n * @param HostElementPrototype the `Element` to be patched\n */\nconst patchSlotInsertAdjacentText = HostElementPrototype => {\n  HostElementPrototype.insertAdjacentText = function (position, text) {\n    this.insertAdjacentHTML(position, text);\n  };\n};\n/**\n * Patches the `insertAdjacentElement` method for a slotted node inside a scoped component. Specifically,\n * we only need to patch the behavior for the specific `beforeend` and `afterbegin` positions so the element\n * gets inserted into the DOM in the correct location.\n *\n * @param HostElementPrototype the `Element` to be patched\n */\nconst patchSlotInsertAdjacentElement = HostElementPrototype => {\n  const originalInsertAdjacentElement = HostElementPrototype.insertAdjacentElement;\n  HostElementPrototype.insertAdjacentElement = function (position, element) {\n    if (position !== 'afterbegin' && position !== 'beforeend') {\n      return originalInsertAdjacentElement.call(this, position, element);\n    }\n    if (position === 'afterbegin') {\n      this.prepend(element);\n      return element;\n    } else if (position === 'beforeend') {\n      this.append(element);\n      return element;\n    }\n    return element;\n  };\n};\n/**\n * Patches the text content of an unnamed slotted node inside a scoped component\n * @param hostElementPrototype the `Element` to be patched\n * @param cmpMeta component runtime metadata used to determine if the component should be patched or not\n */\nconst patchTextContent = (hostElementPrototype, cmpMeta) => {\n  if (BUILD.scoped && cmpMeta.$flags$ & 2 /* CMP_FLAGS.scopedCssEncapsulation */) {\n    const descriptor = Object.getOwnPropertyDescriptor(Node.prototype, 'textContent');\n    Object.defineProperty(hostElementPrototype, '__textContent', descriptor);\n    Object.defineProperty(hostElementPrototype, 'textContent', {\n      get() {\n        var _a;\n        // get the 'default slot', which would be the first slot in a shadow tree (if we were using one), whose name is\n        // the empty string\n        const slotNode = getHostSlotNode(this.childNodes, '');\n        // when a slot node is found, the textContent _may_ be found in the next sibling (text) node, depending on how\n        // nodes were reordered during the vdom render. first try to get the text content from the sibling.\n        if (((_a = slotNode === null || slotNode === void 0 ? void 0 : slotNode.nextSibling) === null || _a === void 0 ? void 0 : _a.nodeType) === 3 /* NODE_TYPES.TEXT_NODE */) {\n          return slotNode.nextSibling.textContent;\n        } else if (slotNode) {\n          return slotNode.textContent;\n        } else {\n          // fallback to the original implementation\n          return this.__textContent;\n        }\n      },\n      set(value) {\n        var _a;\n        // get the 'default slot', which would be the first slot in a shadow tree (if we were using one), whose name is\n        // the empty string\n        const slotNode = getHostSlotNode(this.childNodes, '');\n        // when a slot node is found, the textContent _may_ need to be placed in the next sibling (text) node,\n        // depending on how nodes were reordered during the vdom render. first try to set the text content on the\n        // sibling.\n        if (((_a = slotNode === null || slotNode === void 0 ? void 0 : slotNode.nextSibling) === null || _a === void 0 ? void 0 : _a.nodeType) === 3 /* NODE_TYPES.TEXT_NODE */) {\n          slotNode.nextSibling.textContent = value;\n        } else if (slotNode) {\n          slotNode.textContent = value;\n        } else {\n          // we couldn't find a slot, but that doesn't mean that there isn't one. if this check ran before the DOM\n          // loaded, we could have missed it. check for a content reference element on the scoped component and insert\n          // it there\n          this.__textContent = value;\n          const contentRefElm = this['s-cr'];\n          if (contentRefElm) {\n            this.insertBefore(contentRefElm, this.firstChild);\n          }\n        }\n      }\n    });\n  }\n};\nconst patchChildSlotNodes = (elm, cmpMeta) => {\n  class FakeNodeList extends Array {\n    item(n) {\n      return this[n];\n    }\n  }\n  // TODO(STENCIL-854): Remove code related to legacy shadowDomShim field\n  if (cmpMeta.$flags$ & 8 /* CMP_FLAGS.needsShadowDomShim */) {\n    const childNodesFn = elm.__lookupGetter__('childNodes');\n    Object.defineProperty(elm, 'children', {\n      get() {\n        return this.childNodes.map(n => n.nodeType === 1);\n      }\n    });\n    Object.defineProperty(elm, 'childElementCount', {\n      get() {\n        return elm.children.length;\n      }\n    });\n    Object.defineProperty(elm, 'childNodes', {\n      get() {\n        const childNodes = childNodesFn.call(this);\n        if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0 && getHostRef(this).$flags$ & 2 /* HOST_FLAGS.hasRendered */) {\n          const result = new FakeNodeList();\n          for (let i = 0; i < childNodes.length; i++) {\n            const slot = childNodes[i]['s-nr'];\n            if (slot) {\n              result.push(slot);\n            }\n          }\n          return result;\n        }\n        return FakeNodeList.from(childNodes);\n      }\n    });\n  }\n};\nconst getSlotName = node => node['s-sn'] || node.nodeType === 1 && node.getAttribute('slot') || '';\n/**\n * Recursively searches a series of child nodes for a slot with the provided name.\n * @param childNodes the nodes to search for a slot with a specific name.\n * @param slotName the name of the slot to match on.\n * @returns a reference to the slot node that matches the provided name, `null` otherwise\n */\nconst getHostSlotNode = (childNodes, slotName) => {\n  let i = 0;\n  let childNode;\n  for (; i < childNodes.length; i++) {\n    childNode = childNodes[i];\n    if (childNode['s-sr'] && childNode['s-sn'] === slotName) {\n      return childNode;\n    }\n    childNode = getHostSlotNode(childNode.childNodes, slotName);\n    if (childNode) {\n      return childNode;\n    }\n  }\n  return null;\n};\nconst getHostSlotChildNodes = (n, slotName) => {\n  const childNodes = [n];\n  while ((n = n.nextSibling) && n['s-sn'] === slotName) {\n    childNodes.push(n);\n  }\n  return childNodes;\n};\nconst defineCustomElement = (Cstr, compactMeta) => {\n  customElements.define(compactMeta[1], proxyCustomElement(Cstr, compactMeta));\n};\nconst proxyCustomElement = (Cstr, compactMeta) => {\n  const cmpMeta = {\n    $flags$: compactMeta[0],\n    $tagName$: compactMeta[1]\n  };\n  if (BUILD.member) {\n    cmpMeta.$members$ = compactMeta[2];\n  }\n  if (BUILD.hostListener) {\n    cmpMeta.$listeners$ = compactMeta[3];\n  }\n  if (BUILD.watchCallback) {\n    cmpMeta.$watchers$ = Cstr.$watchers$;\n  }\n  if (BUILD.reflect) {\n    cmpMeta.$attrsToReflect$ = [];\n  }\n  if (BUILD.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n    // TODO(STENCIL-854): Remove code related to legacy shadowDomShim field\n    cmpMeta.$flags$ |= 8 /* CMP_FLAGS.needsShadowDomShim */;\n  }\n  // TODO(STENCIL-914): this check and `else` block can go away and be replaced by just `BUILD.scoped` once we\n  // default our pseudo-slot behavior\n  if (BUILD.experimentalSlotFixes && BUILD.scoped) {\n    patchPseudoShadowDom(Cstr.prototype, cmpMeta);\n  } else {\n    if (BUILD.slotChildNodesFix) {\n      patchChildSlotNodes(Cstr.prototype, cmpMeta);\n    }\n    if (BUILD.cloneNodeFix) {\n      patchCloneNode(Cstr.prototype);\n    }\n    if (BUILD.appendChildSlotFix) {\n      patchSlotAppendChild(Cstr.prototype);\n    }\n    if (BUILD.scopedSlotTextContentFix) {\n      patchTextContent(Cstr.prototype, cmpMeta);\n    }\n  }\n  const originalConnectedCallback = Cstr.prototype.connectedCallback;\n  const originalDisconnectedCallback = Cstr.prototype.disconnectedCallback;\n  Object.assign(Cstr.prototype, {\n    __registerHost() {\n      registerHost(this, cmpMeta);\n    },\n    connectedCallback() {\n      connectedCallback(this);\n      if (BUILD.connectedCallback && originalConnectedCallback) {\n        originalConnectedCallback.call(this);\n      }\n    },\n    disconnectedCallback() {\n      disconnectedCallback(this);\n      if (BUILD.disconnectedCallback && originalDisconnectedCallback) {\n        originalDisconnectedCallback.call(this);\n      }\n    },\n    __attachShadow() {\n      if (supportsShadow) {\n        if (BUILD.shadowDelegatesFocus) {\n          this.attachShadow({\n            mode: 'open',\n            delegatesFocus: !!(cmpMeta.$flags$ & 16 /* CMP_FLAGS.shadowDelegatesFocus */)\n          });\n        } else {\n          this.attachShadow({\n            mode: 'open'\n          });\n        }\n      } else {\n        this.shadowRoot = this;\n      }\n    }\n  });\n  Cstr.is = cmpMeta.$tagName$;\n  return proxyComponent(Cstr, cmpMeta, 1 /* PROXY_FLAGS.isElementConstructor */ | 2 /* PROXY_FLAGS.proxyState */);\n};\nconst forceModeUpdate = elm => {\n  if (BUILD.style && BUILD.mode && !BUILD.lazyLoad) {\n    const mode = computeMode(elm);\n    const hostRef = getHostRef(elm);\n    if (hostRef.$modeName$ !== mode) {\n      const cmpMeta = hostRef.$cmpMeta$;\n      const oldScopeId = elm['s-sc'];\n      const scopeId = getScopeId(cmpMeta, mode);\n      const style = elm.constructor.style[mode];\n      const flags = cmpMeta.$flags$;\n      if (style) {\n        if (!styles.has(scopeId)) {\n          registerStyle(scopeId, style, !!(flags & 1 /* CMP_FLAGS.shadowDomEncapsulation */));\n        }\n        hostRef.$modeName$ = mode;\n        elm.classList.remove(oldScopeId + '-h', oldScopeId + '-s');\n        attachStyles(hostRef);\n        forceUpdate(elm);\n      }\n    }\n  }\n};\n/**\n * Kick off hot-module-replacement for a component. In order to replace the\n * component in-place we:\n *\n * 1. get a reference to the {@link d.HostRef} for the element\n * 2. reset the element's runtime flags\n * 3. re-run the initialization logic for the element (via\n *    {@link initializeComponent})\n *\n * @param hostElement the host element for the component which we want to start\n * doing HMR\n * @param cmpMeta runtime metadata for the component\n * @param hmrVersionId the current HMR version ID\n */\nconst hmrStart = (hostElement, cmpMeta, hmrVersionId) => {\n  // ¯\\_(ツ)_/¯\n  const hostRef = getHostRef(hostElement);\n  // reset state flags to only have been connected\n  hostRef.$flags$ = 1 /* HOST_FLAGS.hasConnected */;\n  // TODO\n  // detach any event listeners that may have been added\n  // because we're not passing an exact event name it'll\n  // remove all of this element's event, which is good\n  // re-initialize the component\n  initializeComponent(hostElement, hostRef, cmpMeta, hmrVersionId);\n};\nconst bootstrapLazy = function (lazyBundles) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var _a;\n  if (BUILD.profile && performance.mark) {\n    performance.mark('st:app:start');\n  }\n  installDevTools();\n  const endBootstrap = createTime('bootstrapLazy');\n  const cmpTags = [];\n  const exclude = options.exclude || [];\n  const customElements = win.customElements;\n  const head = doc.head;\n  const metaCharset = /*@__PURE__*/head.querySelector('meta[charset]');\n  const dataStyles = /*@__PURE__*/doc.createElement('style');\n  const deferredConnectedCallbacks = [];\n  const styles = /*@__PURE__*/doc.querySelectorAll(`[${HYDRATED_STYLE_ID}]`);\n  let appLoadFallback;\n  let isBootstrapping = true;\n  let i = 0;\n  Object.assign(plt, options);\n  plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n  if (BUILD.asyncQueue) {\n    if (options.syncQueue) {\n      plt.$flags$ |= 4 /* PLATFORM_FLAGS.queueSync */;\n    }\n  }\n  if (BUILD.hydrateClientSide) {\n    // If the app is already hydrated there is not point to disable the\n    // async queue. This will improve the first input delay\n    plt.$flags$ |= 2 /* PLATFORM_FLAGS.appLoaded */;\n  }\n  if (BUILD.hydrateClientSide && BUILD.shadowDom) {\n    for (; i < styles.length; i++) {\n      registerStyle(styles[i].getAttribute(HYDRATED_STYLE_ID), convertScopedToShadow(styles[i].innerHTML), true);\n    }\n  }\n  let hasSlotRelocation = false;\n  lazyBundles.map(lazyBundle => {\n    lazyBundle[1].map(compactMeta => {\n      var _a;\n      const cmpMeta = {\n        $flags$: compactMeta[0],\n        $tagName$: compactMeta[1],\n        $members$: compactMeta[2],\n        $listeners$: compactMeta[3]\n      };\n      // Check if we are using slots outside the shadow DOM in this component.\n      // We'll use this information later to add styles for `slot-fb` elements\n      if (cmpMeta.$flags$ & 4 /* CMP_FLAGS.hasSlotRelocation */) {\n        hasSlotRelocation = true;\n      }\n      if (BUILD.member) {\n        cmpMeta.$members$ = compactMeta[2];\n      }\n      if (BUILD.hostListener) {\n        cmpMeta.$listeners$ = compactMeta[3];\n      }\n      if (BUILD.reflect) {\n        cmpMeta.$attrsToReflect$ = [];\n      }\n      if (BUILD.watchCallback) {\n        cmpMeta.$watchers$ = (_a = compactMeta[4]) !== null && _a !== void 0 ? _a : {};\n      }\n      if (BUILD.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n        // TODO(STENCIL-854): Remove code related to legacy shadowDomShim field\n        cmpMeta.$flags$ |= 8 /* CMP_FLAGS.needsShadowDomShim */;\n      }\n      const tagName = BUILD.transformTagName && options.transformTagName ? options.transformTagName(cmpMeta.$tagName$) : cmpMeta.$tagName$;\n      const HostElement = class extends HTMLElement {\n        // StencilLazyHost\n        constructor(self) {\n          // @ts-ignore\n          super(self);\n          self = this;\n          registerHost(self, cmpMeta);\n          if (BUILD.shadowDom && cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n            // this component is using shadow dom\n            // and this browser supports shadow dom\n            // add the read-only property \"shadowRoot\" to the host element\n            // adding the shadow root build conditionals to minimize runtime\n            if (supportsShadow) {\n              if (BUILD.shadowDelegatesFocus) {\n                self.attachShadow({\n                  mode: 'open',\n                  delegatesFocus: !!(cmpMeta.$flags$ & 16 /* CMP_FLAGS.shadowDelegatesFocus */)\n                });\n              } else {\n                self.attachShadow({\n                  mode: 'open'\n                });\n              }\n            } else if (!BUILD.hydrateServerSide && !('shadowRoot' in self)) {\n              self.shadowRoot = self;\n            }\n          }\n        }\n        connectedCallback() {\n          if (appLoadFallback) {\n            clearTimeout(appLoadFallback);\n            appLoadFallback = null;\n          }\n          if (isBootstrapping) {\n            // connectedCallback will be processed once all components have been registered\n            deferredConnectedCallbacks.push(this);\n          } else {\n            plt.jmp(() => connectedCallback(this));\n          }\n        }\n        disconnectedCallback() {\n          plt.jmp(() => disconnectedCallback(this));\n        }\n        componentOnReady() {\n          return getHostRef(this).$onReadyPromise$;\n        }\n      };\n      // TODO(STENCIL-914): this check and `else` block can go away and be replaced by just `BUILD.scoped` once we\n      // default our pseudo-slot behavior\n      if (BUILD.experimentalSlotFixes && BUILD.scoped) {\n        patchPseudoShadowDom(HostElement.prototype, cmpMeta);\n      } else {\n        if (BUILD.slotChildNodesFix) {\n          patchChildSlotNodes(HostElement.prototype, cmpMeta);\n        }\n        if (BUILD.cloneNodeFix) {\n          patchCloneNode(HostElement.prototype);\n        }\n        if (BUILD.appendChildSlotFix) {\n          patchSlotAppendChild(HostElement.prototype);\n        }\n        if (BUILD.scopedSlotTextContentFix) {\n          patchTextContent(HostElement.prototype, cmpMeta);\n        }\n      }\n      // if the component is formAssociated we need to set that on the host\n      // element so that it will be ready for `attachInternals` to be called on\n      // it later on\n      if (BUILD.formAssociated && cmpMeta.$flags$ & 64 /* CMP_FLAGS.formAssociated */) {\n        HostElement.formAssociated = true;\n      }\n      if (BUILD.hotModuleReplacement) {\n        // if we're in an HMR dev build then we need to set up the callback\n        // which will carry out the work of actually replacing the module for\n        // this particular component\n        HostElement.prototype['s-hmr'] = function (hmrVersionId) {\n          hmrStart(this, cmpMeta, hmrVersionId);\n        };\n      }\n      cmpMeta.$lazyBundleId$ = lazyBundle[0];\n      if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n        cmpTags.push(tagName);\n        customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* PROXY_FLAGS.isElementConstructor */));\n      }\n    });\n  });\n  // Add styles for `slot-fb` elements if any of our components are using slots outside the Shadow DOM\n  if (hasSlotRelocation) {\n    dataStyles.innerHTML += SLOT_FB_CSS;\n  }\n  // Add hydration styles\n  if (BUILD.invisiblePrehydration && (BUILD.hydratedClass || BUILD.hydratedAttribute)) {\n    dataStyles.innerHTML += cmpTags + HYDRATED_CSS;\n  }\n  // If we have styles, add them to the DOM\n  if (dataStyles.innerHTML.length) {\n    dataStyles.setAttribute('data-styles', '');\n    head.insertBefore(dataStyles, metaCharset ? metaCharset.nextSibling : head.firstChild);\n    // Apply CSP nonce to the style tag if it exists\n    const nonce = (_a = plt.$nonce$) !== null && _a !== void 0 ? _a : queryNonceMetaTagContent(doc);\n    if (nonce != null) {\n      dataStyles.setAttribute('nonce', nonce);\n    }\n  }\n  // Process deferred connectedCallbacks now all components have been registered\n  isBootstrapping = false;\n  if (deferredConnectedCallbacks.length) {\n    deferredConnectedCallbacks.map(host => host.connectedCallback());\n  } else {\n    if (BUILD.profile) {\n      plt.jmp(() => appLoadFallback = setTimeout(appDidLoad, 30, 'timeout'));\n    } else {\n      plt.jmp(() => appLoadFallback = setTimeout(appDidLoad, 30));\n    }\n  }\n  // Fallback appLoad event\n  endBootstrap();\n};\nconst Fragment = (_, children) => children;\nconst addHostEventListeners = (elm, hostRef, listeners, attachParentListeners) => {\n  if (BUILD.hostListener && listeners) {\n    // this is called immediately within the element's constructor\n    // initialize our event listeners on the host element\n    // we do this now so that we can listen to events that may\n    // have fired even before the instance is ready\n    if (BUILD.hostListenerTargetParent) {\n      // this component may have event listeners that should be attached to the parent\n      if (attachParentListeners) {\n        // this is being ran from within the connectedCallback\n        // which is important so that we know the host element actually has a parent element\n        // filter out the listeners to only have the ones that ARE being attached to the parent\n        listeners = listeners.filter(_ref7 => {\n          let [flags] = _ref7;\n          return flags & 32;\n        } /* LISTENER_FLAGS.TargetParent */);\n      } else {\n        // this is being ran from within the component constructor\n        // everything BUT the parent element listeners should be attached at this time\n        // filter out the listeners that are NOT being attached to the parent\n        listeners = listeners.filter(_ref8 => {\n          let [flags] = _ref8;\n          return !(flags & 32 /* LISTENER_FLAGS.TargetParent */);\n        });\n      }\n    }\n    listeners.map(_ref9 => {\n      let [flags, name, method] = _ref9;\n      const target = BUILD.hostListenerTarget ? getHostListenerTarget(elm, flags) : elm;\n      const handler = hostListenerProxy(hostRef, method);\n      const opts = hostListenerOpts(flags);\n      plt.ael(target, name, handler, opts);\n      (hostRef.$rmListeners$ = hostRef.$rmListeners$ || []).push(() => plt.rel(target, name, handler, opts));\n    });\n  }\n};\nconst hostListenerProxy = (hostRef, methodName) => ev => {\n  try {\n    if (BUILD.lazyLoad) {\n      if (hostRef.$flags$ & 256 /* HOST_FLAGS.isListenReady */) {\n        // instance is ready, let's call it's member method for this event\n        hostRef.$lazyInstance$[methodName](ev);\n      } else {\n        (hostRef.$queuedListeners$ = hostRef.$queuedListeners$ || []).push([methodName, ev]);\n      }\n    } else {\n      hostRef.$hostElement$[methodName](ev);\n    }\n  } catch (e) {\n    consoleError(e);\n  }\n};\nconst getHostListenerTarget = (elm, flags) => {\n  if (BUILD.hostListenerTargetDocument && flags & 4 /* LISTENER_FLAGS.TargetDocument */) return doc;\n  if (BUILD.hostListenerTargetWindow && flags & 8 /* LISTENER_FLAGS.TargetWindow */) return win;\n  if (BUILD.hostListenerTargetBody && flags & 16 /* LISTENER_FLAGS.TargetBody */) return doc.body;\n  if (BUILD.hostListenerTargetParent && flags & 32 /* LISTENER_FLAGS.TargetParent */) return elm.parentElement;\n  return elm;\n};\n// prettier-ignore\nconst hostListenerOpts = flags => supportsListenerOptions ? {\n  passive: (flags & 1 /* LISTENER_FLAGS.Passive */) !== 0,\n  capture: (flags & 2 /* LISTENER_FLAGS.Capture */) !== 0\n} : (flags & 2 /* LISTENER_FLAGS.Capture */) !== 0;\n/**\n * Assigns the given value to the nonce property on the runtime platform object.\n * During runtime, this value is used to set the nonce attribute on all dynamically created script and style tags.\n * @param nonce The value to be assigned to the platform nonce property.\n * @returns void\n */\nconst setNonce = nonce => plt.$nonce$ = nonce;\nconst setPlatformOptions = opts => Object.assign(plt, opts);\nconst insertVdomAnnotations = (doc, staticComponents) => {\n  if (doc != null) {\n    const docData = {\n      hostIds: 0,\n      rootLevelIds: 0,\n      staticComponents: new Set(staticComponents)\n    };\n    const orgLocationNodes = [];\n    parseVNodeAnnotations(doc, doc.body, docData, orgLocationNodes);\n    orgLocationNodes.forEach(orgLocationNode => {\n      if (orgLocationNode != null) {\n        const nodeRef = orgLocationNode['s-nr'];\n        let hostId = nodeRef['s-host-id'];\n        let nodeId = nodeRef['s-node-id'];\n        let childId = `${hostId}.${nodeId}`;\n        if (hostId == null) {\n          hostId = 0;\n          docData.rootLevelIds++;\n          nodeId = docData.rootLevelIds;\n          childId = `${hostId}.${nodeId}`;\n          if (nodeRef.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n            nodeRef.setAttribute(HYDRATE_CHILD_ID, childId);\n          } else if (nodeRef.nodeType === 3 /* NODE_TYPE.TextNode */) {\n            if (hostId === 0) {\n              const textContent = nodeRef.nodeValue.trim();\n              if (textContent === '') {\n                // useless whitespace node at the document root\n                orgLocationNode.remove();\n                return;\n              }\n            }\n            const commentBeforeTextNode = doc.createComment(childId);\n            commentBeforeTextNode.nodeValue = `${TEXT_NODE_ID}.${childId}`;\n            nodeRef.parentNode.insertBefore(commentBeforeTextNode, nodeRef);\n          }\n        }\n        let orgLocationNodeId = `${ORG_LOCATION_ID}.${childId}`;\n        const orgLocationParentNode = orgLocationNode.parentElement;\n        if (orgLocationParentNode) {\n          if (orgLocationParentNode['s-en'] === '') {\n            // ending with a \".\" means that the parent element\n            // of this node's original location is a SHADOW dom element\n            // and this node is apart of the root level light dom\n            orgLocationNodeId += `.`;\n          } else if (orgLocationParentNode['s-en'] === 'c') {\n            // ending with a \".c\" means that the parent element\n            // of this node's original location is a SCOPED element\n            // and this node is apart of the root level light dom\n            orgLocationNodeId += `.c`;\n          }\n        }\n        orgLocationNode.nodeValue = orgLocationNodeId;\n      }\n    });\n  }\n};\nconst parseVNodeAnnotations = (doc, node, docData, orgLocationNodes) => {\n  if (node == null) {\n    return;\n  }\n  if (node['s-nr'] != null) {\n    orgLocationNodes.push(node);\n  }\n  if (node.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n    node.childNodes.forEach(childNode => {\n      const hostRef = getHostRef(childNode);\n      if (hostRef != null && !docData.staticComponents.has(childNode.nodeName.toLowerCase())) {\n        const cmpData = {\n          nodeIds: 0\n        };\n        insertVNodeAnnotations(doc, childNode, hostRef.$vnode$, docData, cmpData);\n      }\n      parseVNodeAnnotations(doc, childNode, docData, orgLocationNodes);\n    });\n  }\n};\nconst insertVNodeAnnotations = (doc, hostElm, vnode, docData, cmpData) => {\n  if (vnode != null) {\n    const hostId = ++docData.hostIds;\n    hostElm.setAttribute(HYDRATE_ID, hostId);\n    if (hostElm['s-cr'] != null) {\n      hostElm['s-cr'].nodeValue = `${CONTENT_REF_ID}.${hostId}`;\n    }\n    if (vnode.$children$ != null) {\n      const depth = 0;\n      vnode.$children$.forEach((vnodeChild, index) => {\n        insertChildVNodeAnnotations(doc, vnodeChild, cmpData, hostId, depth, index);\n      });\n    }\n    if (hostElm && vnode && vnode.$elm$ && !hostElm.hasAttribute('c-id')) {\n      const parent = hostElm.parentElement;\n      if (parent && parent.childNodes) {\n        const parentChildNodes = Array.from(parent.childNodes);\n        const comment = parentChildNodes.find(node => node.nodeType === 8 /* NODE_TYPE.CommentNode */ && node['s-sr']);\n        if (comment) {\n          const index = parentChildNodes.indexOf(hostElm) - 1;\n          vnode.$elm$.setAttribute(HYDRATE_CHILD_ID, `${comment['s-host-id']}.${comment['s-node-id']}.0.${index}`);\n        }\n      }\n    }\n  }\n};\nconst insertChildVNodeAnnotations = (doc, vnodeChild, cmpData, hostId, depth, index) => {\n  const childElm = vnodeChild.$elm$;\n  if (childElm == null) {\n    return;\n  }\n  const nodeId = cmpData.nodeIds++;\n  const childId = `${hostId}.${nodeId}.${depth}.${index}`;\n  childElm['s-host-id'] = hostId;\n  childElm['s-node-id'] = nodeId;\n  if (childElm.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n    childElm.setAttribute(HYDRATE_CHILD_ID, childId);\n  } else if (childElm.nodeType === 3 /* NODE_TYPE.TextNode */) {\n    const parentNode = childElm.parentNode;\n    const nodeName = parentNode.nodeName;\n    if (nodeName !== 'STYLE' && nodeName !== 'SCRIPT') {\n      const textNodeId = `${TEXT_NODE_ID}.${childId}`;\n      const commentBeforeTextNode = doc.createComment(textNodeId);\n      parentNode.insertBefore(commentBeforeTextNode, childElm);\n    }\n  } else if (childElm.nodeType === 8 /* NODE_TYPE.CommentNode */) {\n    if (childElm['s-sr']) {\n      const slotName = childElm['s-sn'] || '';\n      const slotNodeId = `${SLOT_NODE_ID}.${childId}.${slotName}`;\n      childElm.nodeValue = slotNodeId;\n    }\n  }\n  if (vnodeChild.$children$ != null) {\n    const childDepth = depth + 1;\n    vnodeChild.$children$.forEach((vnode, index) => {\n      insertChildVNodeAnnotations(doc, vnode, cmpData, hostId, childDepth, index);\n    });\n  }\n};\n/**\n * A WeakMap mapping runtime component references to their corresponding host reference\n * instances.\n */\nconst hostRefs = /*@__PURE__*/new WeakMap();\n/**\n * Given a {@link d.RuntimeRef} retrieve the corresponding {@link d.HostRef}\n *\n * @param ref the runtime ref of interest\n * @returns the Host reference (if found) or undefined\n */\nconst getHostRef = ref => hostRefs.get(ref);\n/**\n * Register a lazy instance with the {@link hostRefs} object so it's\n * corresponding {@link d.HostRef} can be retrieved later.\n *\n * @param lazyInstance the lazy instance of interest\n * @param hostRef that instances `HostRef` object\n * @returns a reference to the host ref WeakMap\n */\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set(hostRef.$lazyInstance$ = lazyInstance, hostRef);\n/**\n * Register a host element for a Stencil component, setting up various metadata\n * and callbacks based on {@link BUILD} flags as well as the component's runtime\n * metadata.\n *\n * @param hostElement the host element to register\n * @param cmpMeta runtime metadata for that component\n * @returns a reference to the host ref WeakMap\n */\nconst registerHost = (hostElement, cmpMeta) => {\n  const hostRef = {\n    $flags$: 0,\n    $hostElement$: hostElement,\n    $cmpMeta$: cmpMeta,\n    $instanceValues$: new Map()\n  };\n  if (BUILD.isDev) {\n    hostRef.$renderCount$ = 0;\n  }\n  if (BUILD.method && BUILD.lazyLoad) {\n    hostRef.$onInstancePromise$ = new Promise(r => hostRef.$onInstanceResolve$ = r);\n  }\n  if (BUILD.asyncLoading) {\n    hostRef.$onReadyPromise$ = new Promise(r => hostRef.$onReadyResolve$ = r);\n    hostElement['s-p'] = [];\n    hostElement['s-rc'] = [];\n  }\n  addHostEventListeners(hostElement, hostRef, cmpMeta.$listeners$, false);\n  return hostRefs.set(hostElement, hostRef);\n};\nconst isMemberInElement = (elm, memberName) => memberName in elm;\nconst consoleError = (e, el) => (customError || console.error)(e, el);\nconst STENCIL_DEV_MODE = BUILD.isTesting ? ['STENCIL:'] // E2E testing\n: ['%cstencil', 'color: white;background:#4c47ff;font-weight: bold; font-size:10px; padding:2px 6px; border-radius: 5px'];\nconst consoleDevError = function () {\n  for (var _len6 = arguments.length, m = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n    m[_key6] = arguments[_key6];\n  }\n  return console.error(...STENCIL_DEV_MODE, ...m);\n};\nconst consoleDevWarn = function () {\n  for (var _len7 = arguments.length, m = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n    m[_key7] = arguments[_key7];\n  }\n  return console.warn(...STENCIL_DEV_MODE, ...m);\n};\nconst consoleDevInfo = function () {\n  for (var _len8 = arguments.length, m = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n    m[_key8] = arguments[_key8];\n  }\n  return console.info(...STENCIL_DEV_MODE, ...m);\n};\nconst setErrorHandler = handler => customError = handler;\nconst cmpModules = /*@__PURE__*/new Map();\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n  // loadModuleImport\n  const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n  const bundleId = cmpMeta.$lazyBundleId$;\n  if (BUILD.isDev && typeof bundleId !== 'string') {\n    consoleDevError(`Trying to lazily load component <${cmpMeta.$tagName$}> with style mode \"${hostRef.$modeName$}\", but it does not exist.`);\n    return undefined;\n  }\n  const module = !BUILD.hotModuleReplacement ? cmpModules.get(bundleId) : false;\n  if (module) {\n    return module[exportName];\n  }\n  /*!__STENCIL_STATIC_IMPORT_SWITCH__*/\n  return import( /* @vite-ignore */\n  /* webpackInclude: /\\.entry\\.js$/ */\n  /* webpackExclude: /\\.system\\.entry\\.js$/ */\n  /* webpackMode: \"lazy\" */\n  `./${bundleId}.entry.js${BUILD.hotModuleReplacement && hmrVersionId ? '?s-hmr=' + hmrVersionId : ''}`).then(importedModule => {\n    if (!BUILD.hotModuleReplacement) {\n      cmpModules.set(bundleId, importedModule);\n    }\n    return importedModule[exportName];\n  }, consoleError);\n};\nconst styles = /*@__PURE__*/new Map();\nconst modeResolutionChain = [];\nconst win = typeof window !== 'undefined' ? window : {};\nconst doc = win.document || {\n  head: {}\n};\nconst H = win.HTMLElement || class {};\nconst plt = {\n  $flags$: 0,\n  $resourcesUrl$: '',\n  jmp: h => h(),\n  raf: h => requestAnimationFrame(h),\n  ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n  rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n  ce: (eventName, opts) => new CustomEvent(eventName, opts)\n};\nconst setPlatformHelpers = helpers => {\n  Object.assign(plt, helpers);\n};\nconst supportsShadow =\n// TODO(STENCIL-854): Remove code related to legacy shadowDomShim field\nBUILD.shadowDomShim && BUILD.shadowDom ? /*@__PURE__*/(() => (doc.head.attachShadow + '').indexOf('[native') > -1)() : true;\nconst supportsListenerOptions = /*@__PURE__*/(() => {\n  let supportsListenerOptions = false;\n  try {\n    doc.addEventListener('e', null, Object.defineProperty({}, 'passive', {\n      get() {\n        supportsListenerOptions = true;\n      }\n    }));\n  } catch (e) {}\n  return supportsListenerOptions;\n})();\nconst promiseResolve = v => Promise.resolve(v);\nconst supportsConstructableStylesheets = BUILD.constructableCSS ? /*@__PURE__*/(() => {\n  try {\n    new CSSStyleSheet();\n    return typeof new CSSStyleSheet().replaceSync === 'function';\n  } catch (e) {}\n  return false;\n})() : false;\nconst queueDomReads = [];\nconst queueDomWrites = [];\nconst queueDomWritesLow = [];\nconst queueTask = (queue, write) => cb => {\n  queue.push(cb);\n  if (!queuePending) {\n    queuePending = true;\n    if (write && plt.$flags$ & 4 /* PLATFORM_FLAGS.queueSync */) {\n      nextTick(flush);\n    } else {\n      plt.raf(flush);\n    }\n  }\n};\nconst consume = queue => {\n  for (let i = 0; i < queue.length; i++) {\n    try {\n      queue[i](performance.now());\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n  queue.length = 0;\n};\nconst consumeTimeout = (queue, timeout) => {\n  let i = 0;\n  let ts = 0;\n  while (i < queue.length && (ts = performance.now()) < timeout) {\n    try {\n      queue[i++](ts);\n    } catch (e) {\n      consoleError(e);\n    }\n  }\n  if (i === queue.length) {\n    queue.length = 0;\n  } else if (i !== 0) {\n    queue.splice(0, i);\n  }\n};\nconst flush = () => {\n  if (BUILD.asyncQueue) {\n    queueCongestion++;\n  }\n  // always force a bunch of medium callbacks to run, but still have\n  // a throttle on how many can run in a certain time\n  // DOM READS!!!\n  consume(queueDomReads);\n  // DOM WRITES!!!\n  if (BUILD.asyncQueue) {\n    const timeout = (plt.$flags$ & 6 /* PLATFORM_FLAGS.queueMask */) === 2 /* PLATFORM_FLAGS.appLoaded */ ? performance.now() + 14 * Math.ceil(queueCongestion * (1.0 / 10.0)) : Infinity;\n    consumeTimeout(queueDomWrites, timeout);\n    consumeTimeout(queueDomWritesLow, timeout);\n    if (queueDomWrites.length > 0) {\n      queueDomWritesLow.push(...queueDomWrites);\n      queueDomWrites.length = 0;\n    }\n    if (queuePending = queueDomReads.length + queueDomWrites.length + queueDomWritesLow.length > 0) {\n      // still more to do yet, but we've run out of time\n      // let's let this thing cool off and try again in the next tick\n      plt.raf(flush);\n    } else {\n      queueCongestion = 0;\n    }\n  } else {\n    consume(queueDomWrites);\n    if (queuePending = queueDomReads.length > 0) {\n      // still more to do yet, but we've run out of time\n      // let's let this thing cool off and try again in the next tick\n      plt.raf(flush);\n    }\n  }\n};\nconst nextTick = cb => promiseResolve().then(cb);\nconst readTask = /*@__PURE__*/queueTask(queueDomReads, false);\nconst writeTask = /*@__PURE__*/queueTask(queueDomWrites, true);\nexport { BUILD, Env, NAMESPACE } from '@stencil/core/internal/app-data';\nexport { Build, Fragment, H, H as HTMLElement, Host, STENCIL_DEV_MODE, addHostEventListeners, bootstrapLazy, cmpModules, connectedCallback, consoleDevError, consoleDevInfo, consoleDevWarn, consoleError, createEvent, defineCustomElement, disconnectedCallback, doc, forceModeUpdate, forceUpdate, getAssetPath, getElement, getHostRef, getMode, getRenderingRef, getValue, h, insertVdomAnnotations, isMemberInElement, loadModule, modeResolutionChain, nextTick, parsePropertyValue, plt, postUpdateComponent, promiseResolve, proxyComponent, proxyCustomElement, readTask, registerHost, registerInstance, renderVdom, setAssetPath, setErrorHandler, setMode, setNonce, setPlatformHelpers, setPlatformOptions, setValue, styles, supportsConstructableStylesheets, supportsListenerOptions, supportsShadow, win, writeTask };","map":{"version":3,"names":["scopeId","contentRef","hostTagName","customError","i","useNativeShadowDom","checkSlotFallbackVisibility","checkSlotRelocate","isSvgMode","renderingRef","queueCongestion","queuePending","BUILD","NAMESPACE","Build","isDev","isBrowser","isServer","isTesting","getAssetPath","path","assetUrl","URL","plt","$resourcesUrl$","origin","win","location","href","pathname","setAssetPath","createTime","fnName","tagName","arguments","length","undefined","profile","performance","mark","key","measure","uniqueTime","measureText","getEntriesByName","inspect","ref","hostRef","getHostRef","flags","$flags$","hostElement","$hostElement$","renderCount","$renderCount$","hasRendered","hasConnected","isWaitingForChildren","isConstructingInstance","isQueuedForUpdate","hasInitializedComponent","hasLoadedComponent","isWatchReady","isListenReady","needsRerender","instanceValues","$instanceValues$","ancestorComponent","$ancestorComponent$","lazyInstance","$lazyInstance$","vnode","$vnode$","modeName","$modeName$","onReadyPromise","$onReadyPromise$","onReadyResolve","$onReadyResolve$","onInstancePromise","$onInstancePromise$","onInstanceResolve","$onInstanceResolve$","onRenderResolve","$onRenderResolve$","queuedListeners","$queuedListeners$","rmListeners","$rmListeners$","installDevTools","devTools","stencil","originalInspect","result","CONTENT_REF_ID","ORG_LOCATION_ID","SLOT_NODE_ID","TEXT_NODE_ID","HYDRATE_ID","HYDRATED_STYLE_ID","HYDRATE_CHILD_ID","HYDRATED_CSS","SLOT_FB_CSS","XLINK_NS","FORM_ASSOCIATED_CUSTOM_ELEMENT_CALLBACKS","EMPTY_OBJ","SVG_NS","HTML_NS","isDef","v","isComplexType","o","queryNonceMetaTagContent","doc","_a","_b","_c","head","querySelector","getAttribute","h","nodeName","vnodeData","child","slotName","simple","lastSimple","vNodeChildren","walk","c","Array","isArray","String","consoleDevError","$text$","push","newVNode","_len","children","_key","validateInputProperties","vdomKey","slotRelocation","name","vdomClass","classData","className","class","Object","keys","filter","k","join","some","isHost","vdomFunctional","vdomFnUtils","$attrs$","$children$","$key$","$name$","tag","text","$tag$","$elm$","vdomAttribute","Host","node","forEach","cb","map","convertToPublic","convertToPrivate","vattrs","vchildren","vkey","vname","vtag","vtext","assign","inputElm","props","value","indexOf","typeIndex","minIndex","maxIndex","stepIndex","consoleDevWarn","initializeClientHydrate","hostElm","hostId","endHydrate","shadowRoot","childRenderNodes","slotNodes","shadowRootNodes","shadowDom","$orgLocNodes$","initializeDocumentHydrate","body","Map","removeAttribute","clientHydrate","orgLocationId","$hostId$","$nodeId$","orgLocationNode","get","supportsShadow","parentNode","insertBefore","nextSibling","delete","shadowRootNode","appendChild","parentVNode","childNodeType","childIdSplt","childVNode","nodeType","split","$depth$","$index$","toLowerCase","childNodes","nodeValue","textContent","remove","createElement","setAttribute","orgLocNodes","set","computeMode","elm","modeResolutionChain","find","m","setMode","handler","getMode","parsePropertyValue","propValue","propType","propBoolean","propNumber","parseFloat","propString","getElement","lazyLoad","createEvent","emit","detail","isConnected","emitEvent","bubbles","composed","cancelable","opts","ev","ce","dispatchEvent","rootAppliedStyles","WeakMap","registerStyle","cssText","allowCS","style","styles","supportsConstructableStylesheets","CSSStyleSheet","replaceSync","addStyle","styleContainerNode","cmpMeta","mode","getScopeId","attachStyles","appliedStyles","styleElm","Set","has","hydrateClientSide","host","innerHTML","nonce","$nonce$","hydrateServerSide","hotModuleReplacement","add","constructableCSS","adoptedStyleSheets","includes","$cmpMeta$","endAttachStyles","$tagName$","getRootNode","scoped","cssAnnotations","classList","cmp","convertScopedToShadow","css","replace","setAccessor","memberName","oldValue","newValue","isSvg","isProp","isMemberInElement","ln","oldClasses","parseClassList","newClasses","vdomStyle","updatable","prop","removeProperty","setProperty","vdomRef","vdomListener","__lookupSetter__","slice","capture","endsWith","CAPTURE_EVENT_SUFFIX","CAPTURE_EVENT_REGEX","rel","ael","vdomPropOrAttr","isComplex","n","e","xlink","vdomXlink","removeAttributeNS","setAttributeNS","parseClassListRegex","RegExp","updateElement","oldVnode","newVnode","oldVnodeAttrs","newVnodeAttrs","createElm","oldParentVNode","newParentVNode","childIndex","parentElm","childNode","oldVNode","vdomText","createTextNode","isDebug","slotReferenceDebugNode","svg","createElementNS","slot","putBackInOriginalLocation","recursive","oldSlotChildNodes","parentReferenceNode","referenceNode","addVnodes","before","vnodes","startIdx","endIdx","containerElm","removeVnodes","index","nullifyVNodeRefs","updateChildren","oldCh","newCh","oldStartIdx","newStartIdx","idxInOld","oldEndIdx","oldStartVnode","oldEndVnode","newEndIdx","newStartVnode","newEndVnode","elmToMove","isSameVnode","patch","leftVNode","rightVNode","oldChildren","newChildren","defaultHolder","reflect","data","updateFallbackSlotVisibility","hidden","siblingNode","trim","relocateNodes","markSlotContentForRelocation","hostContentNodes","j","experimentalSlotFixes","isNodeLocatedInSlot","relocateNodeData","r","$nodeToRelocate$","$slotRefNode$","relocateNode","nodeToRelocate","vNode","renderVdom","renderFnResults","isInitialLoad","rootVnode","Error","$attrsToReflect$","_ref","propName","attribute","hasAttribute","relocateData","originalLocationDebugNode","slotRefNode","parentNodeRef","insertBeforeNode","previousSibling","refNode","slotVNode","createComment","localName","attachToAncestor","asyncLoading","Promise","scheduleUpdate","taskQueue","dispatch","dispatchHooks","writeTask","endSchedule","instance","maybePromise","hostListener","_ref2","methodName","event","safeCall","emitLifecycleEvent","cmpWillLoad","cmpWillUpdate","cmpWillRender","enqueue","updateComponent","fn","isPromisey","then","endUpdate","rc","endRender","callRender","serverSideConnected","consoleError","childrenPromises","postUpdate","postUpdateComponent","all","allRenderFn","render","hasRenderFn","vdomRender","resolve","getRenderingRef","endPostUpdate","cmpDidRender","addHydratedFlag","cmpDidLoad","appDidLoad","cmpDidUpdate","method","nextTick","forceUpdate","who","documentElement","asyncQueue","namespace","arg","lifecycleName","lifecycleDOMEvents","hydratedClass","hydratedAttribute","ii","childElm","connectedCallback","getValue","setValue","newVal","oldVal","$members$","areBothNaN","Number","isNaN","didValueChange","watchCallback","$watchers$","watchMethods","watchMethodName","cmpShouldUpdate","componentShouldUpdate","proxyComponent","Cstr","prototype","formAssociated","cbName","defineProperty","_len2","args","_key2","call","member","watchers","members","entries","_ref3","memberFlags","state","configurable","enumerable","_len3","_key3","observeAttribute","attrNameToPropName","attributeChangedCallback","attrName","jmp","hasOwnProperty","entry","callbackName","observedAttributes","from","_ref4","_","_ref5","initializeComponent","hmrVersionId","loadModule","endLoad","isProxied","endNewInstance","fireConnectedCallback","constructor","customElements","whenDefined","endRegisterStyles","shadowDomShim","scopeCss","schedule","endConnected","hostListenerTargetParent","addHostEventListeners","$listeners$","setContentReference","_ref6","initializeNextTick","contentRefElm","firstChild","disconnectInstance","disconnectedCallback","cmpDidUnload","rmListener","patchPseudoShadowDom","hostElementPrototype","descriptorPrototype","patchCloneNode","patchSlotAppendChild","patchSlotAppend","patchSlotPrepend","patchSlotInsertAdjacentElement","patchSlotInsertAdjacentHTML","patchSlotInsertAdjacentText","patchTextContent","patchChildSlotNodes","HostElementPrototype","orgCloneNode","cloneNode","deep","srcNode","isShadowDom","clonedNode","slotted","nonStencilNode","stencilPrivates","every","privateField","appendChildSlotFix","__appendChild","newChild","getSlotName","slotNode","getHostSlotNode","slotChildNodes","getHostSlotChildNodes","appendAfter","originalPrepend","prepend","_len4","_key4","ownerDocument","slotPlaceholder","document","append","_len5","_key5","originalInsertAdjacentHtml","insertAdjacentHTML","position","container","insertAdjacentText","originalInsertAdjacentElement","insertAdjacentElement","element","descriptor","getOwnPropertyDescriptor","Node","__textContent","FakeNodeList","item","childNodesFn","__lookupGetter__","defineCustomElement","compactMeta","define","proxyCustomElement","slotChildNodesFix","cloneNodeFix","scopedSlotTextContentFix","originalConnectedCallback","originalDisconnectedCallback","__registerHost","registerHost","__attachShadow","shadowDelegatesFocus","attachShadow","delegatesFocus","is","forceModeUpdate","oldScopeId","hmrStart","bootstrapLazy","lazyBundles","options","endBootstrap","cmpTags","exclude","metaCharset","dataStyles","deferredConnectedCallbacks","querySelectorAll","appLoadFallback","isBootstrapping","resourcesUrl","baseURI","syncQueue","hasSlotRelocation","lazyBundle","transformTagName","HostElement","HTMLElement","self","clearTimeout","componentOnReady","$lazyBundleId$","invisiblePrehydration","setTimeout","Fragment","listeners","attachParentListeners","_ref7","_ref8","_ref9","target","hostListenerTarget","getHostListenerTarget","hostListenerProxy","hostListenerOpts","hostListenerTargetDocument","hostListenerTargetWindow","hostListenerTargetBody","parentElement","supportsListenerOptions","passive","setNonce","setPlatformOptions","insertVdomAnnotations","staticComponents","docData","hostIds","rootLevelIds","orgLocationNodes","parseVNodeAnnotations","nodeRef","nodeId","childId","commentBeforeTextNode","orgLocationNodeId","orgLocationParentNode","cmpData","nodeIds","insertVNodeAnnotations","depth","vnodeChild","insertChildVNodeAnnotations","parent","parentChildNodes","comment","textNodeId","slotNodeId","childDepth","hostRefs","registerInstance","el","console","error","STENCIL_DEV_MODE","_len6","_key6","_len7","_key7","warn","consoleDevInfo","_len8","_key8","info","setErrorHandler","cmpModules","exportName","bundleId","module","importedModule","window","H","raf","requestAnimationFrame","eventName","listener","addEventListener","removeEventListener","CustomEvent","setPlatformHelpers","helpers","promiseResolve","queueDomReads","queueDomWrites","queueDomWritesLow","queueTask","queue","write","flush","consume","now","consumeTimeout","timeout","ts","splice","Math","ceil","Infinity","readTask","Env"],"sources":["/Users/franckliantsoaraminoson/Downloads/Dossier dev/ionic/TestIonic/node_modules/@stencil/core/internal/client/index.js"],"sourcesContent":["/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/snabbdom/snabbdom/blob/master/LICENSE\n *\n * Modified for Stencil's renderer and slot projection\n */\nlet scopeId;\nlet contentRef;\nlet hostTagName;\nlet customError;\nlet i = 0;\nlet useNativeShadowDom = false;\nlet checkSlotFallbackVisibility = false;\nlet checkSlotRelocate = false;\nlet isSvgMode = false;\nlet renderingRef = null;\nlet queueCongestion = 0;\nlet queuePending = false;\n/*\n Stencil Client Platform v4.8.0 | MIT Licensed | https://stenciljs.com\n */\nimport { BUILD, NAMESPACE } from '@stencil/core/internal/app-data';\nconst Build = {\n    isDev: BUILD.isDev ? true : false,\n    isBrowser: true,\n    isServer: false,\n    isTesting: BUILD.isTesting ? true : false,\n};\nconst getAssetPath = (path) => {\n    const assetUrl = new URL(path, plt.$resourcesUrl$);\n    return assetUrl.origin !== win.location.origin ? assetUrl.href : assetUrl.pathname;\n};\nconst setAssetPath = (path) => (plt.$resourcesUrl$ = path);\nconst createTime = (fnName, tagName = '') => {\n    if (BUILD.profile && performance.mark) {\n        const key = `st:${fnName}:${tagName}:${i++}`;\n        // Start\n        performance.mark(key);\n        // End\n        return () => performance.measure(`[Stencil] ${fnName}() <${tagName}>`, key);\n    }\n    else {\n        return () => {\n            return;\n        };\n    }\n};\nconst uniqueTime = (key, measureText) => {\n    if (BUILD.profile && performance.mark) {\n        if (performance.getEntriesByName(key, 'mark').length === 0) {\n            performance.mark(key);\n        }\n        return () => {\n            if (performance.getEntriesByName(measureText, 'measure').length === 0) {\n                performance.measure(measureText, key);\n            }\n        };\n    }\n    else {\n        return () => {\n            return;\n        };\n    }\n};\nconst inspect = (ref) => {\n    const hostRef = getHostRef(ref);\n    if (!hostRef) {\n        return undefined;\n    }\n    const flags = hostRef.$flags$;\n    const hostElement = hostRef.$hostElement$;\n    return {\n        renderCount: hostRef.$renderCount$,\n        flags: {\n            hasRendered: !!(flags & 2 /* HOST_FLAGS.hasRendered */),\n            hasConnected: !!(flags & 1 /* HOST_FLAGS.hasConnected */),\n            isWaitingForChildren: !!(flags & 4 /* HOST_FLAGS.isWaitingForChildren */),\n            isConstructingInstance: !!(flags & 8 /* HOST_FLAGS.isConstructingInstance */),\n            isQueuedForUpdate: !!(flags & 16 /* HOST_FLAGS.isQueuedForUpdate */),\n            hasInitializedComponent: !!(flags & 32 /* HOST_FLAGS.hasInitializedComponent */),\n            hasLoadedComponent: !!(flags & 64 /* HOST_FLAGS.hasLoadedComponent */),\n            isWatchReady: !!(flags & 128 /* HOST_FLAGS.isWatchReady */),\n            isListenReady: !!(flags & 256 /* HOST_FLAGS.isListenReady */),\n            needsRerender: !!(flags & 512 /* HOST_FLAGS.needsRerender */),\n        },\n        instanceValues: hostRef.$instanceValues$,\n        ancestorComponent: hostRef.$ancestorComponent$,\n        hostElement,\n        lazyInstance: hostRef.$lazyInstance$,\n        vnode: hostRef.$vnode$,\n        modeName: hostRef.$modeName$,\n        onReadyPromise: hostRef.$onReadyPromise$,\n        onReadyResolve: hostRef.$onReadyResolve$,\n        onInstancePromise: hostRef.$onInstancePromise$,\n        onInstanceResolve: hostRef.$onInstanceResolve$,\n        onRenderResolve: hostRef.$onRenderResolve$,\n        queuedListeners: hostRef.$queuedListeners$,\n        rmListeners: hostRef.$rmListeners$,\n        ['s-id']: hostElement['s-id'],\n        ['s-cr']: hostElement['s-cr'],\n        ['s-lr']: hostElement['s-lr'],\n        ['s-p']: hostElement['s-p'],\n        ['s-rc']: hostElement['s-rc'],\n        ['s-sc']: hostElement['s-sc'],\n    };\n};\nconst installDevTools = () => {\n    if (BUILD.devTools) {\n        const stencil = (win.stencil = win.stencil || {});\n        const originalInspect = stencil.inspect;\n        stencil.inspect = (ref) => {\n            let result = inspect(ref);\n            if (!result && typeof originalInspect === 'function') {\n                result = originalInspect(ref);\n            }\n            return result;\n        };\n    }\n};\nconst CONTENT_REF_ID = 'r';\nconst ORG_LOCATION_ID = 'o';\nconst SLOT_NODE_ID = 's';\nconst TEXT_NODE_ID = 't';\nconst HYDRATE_ID = 's-id';\nconst HYDRATED_STYLE_ID = 'sty-id';\nconst HYDRATE_CHILD_ID = 'c-id';\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\n/**\n * Constant for styles to be globally applied to `slot-fb` elements for pseudo-slot behavior.\n *\n * Two cascading rules must be used instead of a `:not()` selector due to Stencil browser\n * support as of Stencil v4.\n */\nconst SLOT_FB_CSS = 'slot-fb{display:contents}slot-fb[hidden]{display:none}';\nconst XLINK_NS = 'http://www.w3.org/1999/xlink';\nconst FORM_ASSOCIATED_CUSTOM_ELEMENT_CALLBACKS = [\n    'formAssociatedCallback',\n    'formResetCallback',\n    'formDisabledCallback',\n    'formStateRestoreCallback',\n];\n/**\n * Default style mode id\n */\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\nconst EMPTY_OBJ = {};\n/**\n * Namespaces\n */\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst HTML_NS = 'http://www.w3.org/1999/xhtml';\nconst isDef = (v) => v != null;\n/**\n * Check whether a value is a 'complex type', defined here as an object or a\n * function.\n *\n * @param o the value to check\n * @returns whether it's a complex type or not\n */\nconst isComplexType = (o) => {\n    // https://jsperf.com/typeof-fn-object/5\n    o = typeof o;\n    return o === 'object' || o === 'function';\n};\n/**\n * Helper method for querying a `meta` tag that contains a nonce value\n * out of a DOM's head.\n *\n * @param doc The DOM containing the `head` to query against\n * @returns The content of the meta tag representing the nonce value, or `undefined` if no tag\n * exists or the tag has no content.\n */\nfunction queryNonceMetaTagContent(doc) {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = doc.head) === null || _a === void 0 ? void 0 : _a.querySelector('meta[name=\"csp-nonce\"]')) === null || _b === void 0 ? void 0 : _b.getAttribute('content')) !== null && _c !== void 0 ? _c : undefined;\n}\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\nconst h = (nodeName, vnodeData, ...children) => {\n    let child = null;\n    let key = null;\n    let slotName = null;\n    let simple = false;\n    let lastSimple = false;\n    const vNodeChildren = [];\n    const walk = (c) => {\n        for (let i = 0; i < c.length; i++) {\n            child = c[i];\n            if (Array.isArray(child)) {\n                walk(child);\n            }\n            else if (child != null && typeof child !== 'boolean') {\n                if ((simple = typeof nodeName !== 'function' && !isComplexType(child))) {\n                    child = String(child);\n                }\n                else if (BUILD.isDev && typeof nodeName !== 'function' && child.$flags$ === undefined) {\n                    consoleDevError(`vNode passed as children has unexpected type.\nMake sure it's using the correct h() function.\nEmpty objects can also be the cause, look for JSX comments that became objects.`);\n                }\n                if (simple && lastSimple) {\n                    // If the previous child was simple (string), we merge both\n                    vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n                }\n                else {\n                    // Append a new vNode, if it's text, we create a text vNode\n                    vNodeChildren.push(simple ? newVNode(null, child) : child);\n                }\n                lastSimple = simple;\n            }\n        }\n    };\n    walk(children);\n    if (vnodeData) {\n        if (BUILD.isDev && nodeName === 'input') {\n            validateInputProperties(vnodeData);\n        }\n        if (BUILD.vdomKey && vnodeData.key) {\n            key = vnodeData.key;\n        }\n        if (BUILD.slotRelocation && vnodeData.name) {\n            slotName = vnodeData.name;\n        }\n        // normalize class / className attributes\n        if (BUILD.vdomClass) {\n            const classData = vnodeData.className || vnodeData.class;\n            if (classData) {\n                vnodeData.class =\n                    typeof classData !== 'object'\n                        ? classData\n                        : Object.keys(classData)\n                            .filter((k) => classData[k])\n                            .join(' ');\n            }\n        }\n    }\n    if (BUILD.isDev && vNodeChildren.some(isHost)) {\n        consoleDevError(`The <Host> must be the single root component. Make sure:\n- You are NOT using hostData() and <Host> in the same component.\n- <Host> is used once, and it's the single root component of the render() function.`);\n    }\n    if (BUILD.vdomFunctional && typeof nodeName === 'function') {\n        // nodeName is a functional component\n        return nodeName(vnodeData === null ? {} : vnodeData, vNodeChildren, vdomFnUtils);\n    }\n    const vnode = newVNode(nodeName, null);\n    vnode.$attrs$ = vnodeData;\n    if (vNodeChildren.length > 0) {\n        vnode.$children$ = vNodeChildren;\n    }\n    if (BUILD.vdomKey) {\n        vnode.$key$ = key;\n    }\n    if (BUILD.slotRelocation) {\n        vnode.$name$ = slotName;\n    }\n    return vnode;\n};\n/**\n * A utility function for creating a virtual DOM node from a tag and some\n * possible text content.\n *\n * @param tag the tag for this element\n * @param text possible text content for the node\n * @returns a newly-minted virtual DOM node\n */\nconst newVNode = (tag, text) => {\n    const vnode = {\n        $flags$: 0,\n        $tag$: tag,\n        $text$: text,\n        $elm$: null,\n        $children$: null,\n    };\n    if (BUILD.vdomAttribute) {\n        vnode.$attrs$ = null;\n    }\n    if (BUILD.vdomKey) {\n        vnode.$key$ = null;\n    }\n    if (BUILD.slotRelocation) {\n        vnode.$name$ = null;\n    }\n    return vnode;\n};\nconst Host = {};\n/**\n * Check whether a given node is a Host node or not\n *\n * @param node the virtual DOM node to check\n * @returns whether it's a Host node or not\n */\nconst isHost = (node) => node && node.$tag$ === Host;\n/**\n * Implementation of {@link d.FunctionalUtilities} for Stencil's VDom.\n *\n * Note that these functions convert from {@link d.VNode} to\n * {@link d.ChildNode} to give functional component developers a friendly\n * interface.\n */\nconst vdomFnUtils = {\n    forEach: (children, cb) => children.map(convertToPublic).forEach(cb),\n    map: (children, cb) => children.map(convertToPublic).map(cb).map(convertToPrivate),\n};\n/**\n * Convert a {@link d.VNode} to a {@link d.ChildNode} in order to present a\n * friendlier public interface (hence, 'convertToPublic').\n *\n * @param node the virtual DOM node to convert\n * @returns a converted child node\n */\nconst convertToPublic = (node) => ({\n    vattrs: node.$attrs$,\n    vchildren: node.$children$,\n    vkey: node.$key$,\n    vname: node.$name$,\n    vtag: node.$tag$,\n    vtext: node.$text$,\n});\n/**\n * Convert a {@link d.ChildNode} back to an equivalent {@link d.VNode} in\n * order to use the resulting object in the virtual DOM. The initial object was\n * likely created as part of presenting a public API, so converting it back\n * involved making it 'private' again (hence, `convertToPrivate`).\n *\n * @param node the child node to convert\n * @returns a converted virtual DOM node\n */\nconst convertToPrivate = (node) => {\n    if (typeof node.vtag === 'function') {\n        const vnodeData = Object.assign({}, node.vattrs);\n        if (node.vkey) {\n            vnodeData.key = node.vkey;\n        }\n        if (node.vname) {\n            vnodeData.name = node.vname;\n        }\n        return h(node.vtag, vnodeData, ...(node.vchildren || []));\n    }\n    const vnode = newVNode(node.vtag, node.vtext);\n    vnode.$attrs$ = node.vattrs;\n    vnode.$children$ = node.vchildren;\n    vnode.$key$ = node.vkey;\n    vnode.$name$ = node.vname;\n    return vnode;\n};\n/**\n * Validates the ordering of attributes on an input element\n *\n * @param inputElm the element to validate\n */\nconst validateInputProperties = (inputElm) => {\n    const props = Object.keys(inputElm);\n    const value = props.indexOf('value');\n    if (value === -1) {\n        return;\n    }\n    const typeIndex = props.indexOf('type');\n    const minIndex = props.indexOf('min');\n    const maxIndex = props.indexOf('max');\n    const stepIndex = props.indexOf('step');\n    if (value < typeIndex || value < minIndex || value < maxIndex || value < stepIndex) {\n        consoleDevWarn(`The \"value\" prop of <input> should be set after \"min\", \"max\", \"type\" and \"step\"`);\n    }\n};\nconst initializeClientHydrate = (hostElm, tagName, hostId, hostRef) => {\n    const endHydrate = createTime('hydrateClient', tagName);\n    const shadowRoot = hostElm.shadowRoot;\n    const childRenderNodes = [];\n    const slotNodes = [];\n    const shadowRootNodes = BUILD.shadowDom && shadowRoot ? [] : null;\n    const vnode = (hostRef.$vnode$ = newVNode(tagName, null));\n    if (!plt.$orgLocNodes$) {\n        initializeDocumentHydrate(doc.body, (plt.$orgLocNodes$ = new Map()));\n    }\n    hostElm[HYDRATE_ID] = hostId;\n    hostElm.removeAttribute(HYDRATE_ID);\n    clientHydrate(vnode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, hostElm, hostId);\n    childRenderNodes.map((c) => {\n        const orgLocationId = c.$hostId$ + '.' + c.$nodeId$;\n        const orgLocationNode = plt.$orgLocNodes$.get(orgLocationId);\n        const node = c.$elm$;\n        if (orgLocationNode && supportsShadow && orgLocationNode['s-en'] === '') {\n            orgLocationNode.parentNode.insertBefore(node, orgLocationNode.nextSibling);\n        }\n        if (!shadowRoot) {\n            node['s-hn'] = tagName;\n            if (orgLocationNode) {\n                node['s-ol'] = orgLocationNode;\n                node['s-ol']['s-nr'] = node;\n            }\n        }\n        plt.$orgLocNodes$.delete(orgLocationId);\n    });\n    if (BUILD.shadowDom && shadowRoot) {\n        shadowRootNodes.map((shadowRootNode) => {\n            if (shadowRootNode) {\n                shadowRoot.appendChild(shadowRootNode);\n            }\n        });\n    }\n    endHydrate();\n};\nconst clientHydrate = (parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node, hostId) => {\n    let childNodeType;\n    let childIdSplt;\n    let childVNode;\n    let i;\n    if (node.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n        childNodeType = node.getAttribute(HYDRATE_CHILD_ID);\n        if (childNodeType) {\n            // got the node data from the element's attribute\n            // `${hostId}.${nodeId}.${depth}.${index}`\n            childIdSplt = childNodeType.split('.');\n            if (childIdSplt[0] === hostId || childIdSplt[0] === '0') {\n                childVNode = {\n                    $flags$: 0,\n                    $hostId$: childIdSplt[0],\n                    $nodeId$: childIdSplt[1],\n                    $depth$: childIdSplt[2],\n                    $index$: childIdSplt[3],\n                    $tag$: node.tagName.toLowerCase(),\n                    $elm$: node,\n                    $attrs$: null,\n                    $children$: null,\n                    $key$: null,\n                    $name$: null,\n                    $text$: null,\n                };\n                childRenderNodes.push(childVNode);\n                node.removeAttribute(HYDRATE_CHILD_ID);\n                // this is a new child vnode\n                // so ensure its parent vnode has the vchildren array\n                if (!parentVNode.$children$) {\n                    parentVNode.$children$ = [];\n                }\n                // add our child vnode to a specific index of the vnode's children\n                parentVNode.$children$[childVNode.$index$] = childVNode;\n                // this is now the new parent vnode for all the next child checks\n                parentVNode = childVNode;\n                if (shadowRootNodes && childVNode.$depth$ === '0') {\n                    shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n                }\n            }\n        }\n        // recursively drill down, end to start so we can remove nodes\n        for (i = node.childNodes.length - 1; i >= 0; i--) {\n            clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.childNodes[i], hostId);\n        }\n        if (node.shadowRoot) {\n            // keep drilling down through the shadow root nodes\n            for (i = node.shadowRoot.childNodes.length - 1; i >= 0; i--) {\n                clientHydrate(parentVNode, childRenderNodes, slotNodes, shadowRootNodes, hostElm, node.shadowRoot.childNodes[i], hostId);\n            }\n        }\n    }\n    else if (node.nodeType === 8 /* NODE_TYPE.CommentNode */) {\n        // `${COMMENT_TYPE}.${hostId}.${nodeId}.${depth}.${index}`\n        childIdSplt = node.nodeValue.split('.');\n        if (childIdSplt[1] === hostId || childIdSplt[1] === '0') {\n            // comment node for either the host id or a 0 host id\n            childNodeType = childIdSplt[0];\n            childVNode = {\n                $flags$: 0,\n                $hostId$: childIdSplt[1],\n                $nodeId$: childIdSplt[2],\n                $depth$: childIdSplt[3],\n                $index$: childIdSplt[4],\n                $elm$: node,\n                $attrs$: null,\n                $children$: null,\n                $key$: null,\n                $name$: null,\n                $tag$: null,\n                $text$: null,\n            };\n            if (childNodeType === TEXT_NODE_ID) {\n                childVNode.$elm$ = node.nextSibling;\n                if (childVNode.$elm$ && childVNode.$elm$.nodeType === 3 /* NODE_TYPE.TextNode */) {\n                    childVNode.$text$ = childVNode.$elm$.textContent;\n                    childRenderNodes.push(childVNode);\n                    // remove the text comment since it's no longer needed\n                    node.remove();\n                    if (!parentVNode.$children$) {\n                        parentVNode.$children$ = [];\n                    }\n                    parentVNode.$children$[childVNode.$index$] = childVNode;\n                    if (shadowRootNodes && childVNode.$depth$ === '0') {\n                        shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n                    }\n                }\n            }\n            else if (childVNode.$hostId$ === hostId) {\n                // this comment node is specifically for this host id\n                if (childNodeType === SLOT_NODE_ID) {\n                    // `${SLOT_NODE_ID}.${hostId}.${nodeId}.${depth}.${index}.${slotName}`;\n                    childVNode.$tag$ = 'slot';\n                    if (childIdSplt[5]) {\n                        node['s-sn'] = childVNode.$name$ = childIdSplt[5];\n                    }\n                    else {\n                        node['s-sn'] = '';\n                    }\n                    node['s-sr'] = true;\n                    if (BUILD.shadowDom && shadowRootNodes) {\n                        // browser support shadowRoot and this is a shadow dom component\n                        // create an actual slot element\n                        childVNode.$elm$ = doc.createElement(childVNode.$tag$);\n                        if (childVNode.$name$) {\n                            // add the slot name attribute\n                            childVNode.$elm$.setAttribute('name', childVNode.$name$);\n                        }\n                        // insert the new slot element before the slot comment\n                        node.parentNode.insertBefore(childVNode.$elm$, node);\n                        // remove the slot comment since it's not needed for shadow\n                        node.remove();\n                        if (childVNode.$depth$ === '0') {\n                            shadowRootNodes[childVNode.$index$] = childVNode.$elm$;\n                        }\n                    }\n                    slotNodes.push(childVNode);\n                    if (!parentVNode.$children$) {\n                        parentVNode.$children$ = [];\n                    }\n                    parentVNode.$children$[childVNode.$index$] = childVNode;\n                }\n                else if (childNodeType === CONTENT_REF_ID) {\n                    // `${CONTENT_REF_ID}.${hostId}`;\n                    if (BUILD.shadowDom && shadowRootNodes) {\n                        // remove the content ref comment since it's not needed for shadow\n                        node.remove();\n                    }\n                    else if (BUILD.slotRelocation) {\n                        hostElm['s-cr'] = node;\n                        node['s-cn'] = true;\n                    }\n                }\n            }\n        }\n    }\n    else if (parentVNode && parentVNode.$tag$ === 'style') {\n        const vnode = newVNode(null, node.textContent);\n        vnode.$elm$ = node;\n        vnode.$index$ = '0';\n        parentVNode.$children$ = [vnode];\n    }\n};\nconst initializeDocumentHydrate = (node, orgLocNodes) => {\n    if (node.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n        let i = 0;\n        for (; i < node.childNodes.length; i++) {\n            initializeDocumentHydrate(node.childNodes[i], orgLocNodes);\n        }\n        if (node.shadowRoot) {\n            for (i = 0; i < node.shadowRoot.childNodes.length; i++) {\n                initializeDocumentHydrate(node.shadowRoot.childNodes[i], orgLocNodes);\n            }\n        }\n    }\n    else if (node.nodeType === 8 /* NODE_TYPE.CommentNode */) {\n        const childIdSplt = node.nodeValue.split('.');\n        if (childIdSplt[0] === ORG_LOCATION_ID) {\n            orgLocNodes.set(childIdSplt[1] + '.' + childIdSplt[2], node);\n            node.nodeValue = '';\n            // useful to know if the original location is\n            // the root light-dom of a shadow dom component\n            node['s-en'] = childIdSplt[3];\n        }\n    }\n};\n// Private\nconst computeMode = (elm) => modeResolutionChain.map((h) => h(elm)).find((m) => !!m);\n// Public\nconst setMode = (handler) => modeResolutionChain.push(handler);\nconst getMode = (ref) => getHostRef(ref).$modeName$;\n/**\n * Parse a new property value for a given property type.\n *\n * While the prop value can reasonably be expected to be of `any` type as far as TypeScript's type checker is concerned,\n * it is not safe to assume that the string returned by evaluating `typeof propValue` matches:\n *   1. `any`, the type given to `propValue` in the function signature\n *   2. the type stored from `propType`.\n *\n * This function provides the capability to parse/coerce a property's value to potentially any other JavaScript type.\n *\n * Property values represented in TSX preserve their type information. In the example below, the number 0 is passed to\n * a component. This `propValue` will preserve its type information (`typeof propValue === 'number'`). Note that is\n * based on the type of the value being passed in, not the type declared of the class member decorated with `@Prop`.\n * ```tsx\n * <my-cmp prop-val={0}></my-cmp>\n * ```\n *\n * HTML prop values on the other hand, will always a string\n *\n * @param propValue the new value to coerce to some type\n * @param propType the type of the prop, expressed as a binary number\n * @returns the parsed/coerced value\n */\nconst parsePropertyValue = (propValue, propType) => {\n    // ensure this value is of the correct prop type\n    if (propValue != null && !isComplexType(propValue)) {\n        if (BUILD.propBoolean && propType & 4 /* MEMBER_FLAGS.Boolean */) {\n            // per the HTML spec, any string value means it is a boolean true value\n            // but we'll cheat here and say that the string \"false\" is the boolean false\n            return propValue === 'false' ? false : propValue === '' || !!propValue;\n        }\n        if (BUILD.propNumber && propType & 2 /* MEMBER_FLAGS.Number */) {\n            // force it to be a number\n            return parseFloat(propValue);\n        }\n        if (BUILD.propString && propType & 1 /* MEMBER_FLAGS.String */) {\n            // could have been passed as a number or boolean\n            // but we still want it as a string\n            return String(propValue);\n        }\n        // redundant return here for better minification\n        return propValue;\n    }\n    // not sure exactly what type we want\n    // so no need to change to a different type\n    return propValue;\n};\nconst getElement = (ref) => (BUILD.lazyLoad ? getHostRef(ref).$hostElement$ : ref);\nconst createEvent = (ref, name, flags) => {\n    const elm = getElement(ref);\n    return {\n        emit: (detail) => {\n            if (BUILD.isDev && !elm.isConnected) {\n                consoleDevWarn(`The \"${name}\" event was emitted, but the dispatcher node is no longer connected to the dom.`);\n            }\n            return emitEvent(elm, name, {\n                bubbles: !!(flags & 4 /* EVENT_FLAGS.Bubbles */),\n                composed: !!(flags & 2 /* EVENT_FLAGS.Composed */),\n                cancelable: !!(flags & 1 /* EVENT_FLAGS.Cancellable */),\n                detail,\n            });\n        },\n    };\n};\n/**\n * Helper function to create & dispatch a custom Event on a provided target\n * @param elm the target of the Event\n * @param name the name to give the custom Event\n * @param opts options for configuring a custom Event\n * @returns the custom Event\n */\nconst emitEvent = (elm, name, opts) => {\n    const ev = plt.ce(name, opts);\n    elm.dispatchEvent(ev);\n    return ev;\n};\nconst rootAppliedStyles = /*@__PURE__*/ new WeakMap();\nconst registerStyle = (scopeId, cssText, allowCS) => {\n    let style = styles.get(scopeId);\n    if (supportsConstructableStylesheets && allowCS) {\n        style = (style || new CSSStyleSheet());\n        if (typeof style === 'string') {\n            style = cssText;\n        }\n        else {\n            style.replaceSync(cssText);\n        }\n    }\n    else {\n        style = cssText;\n    }\n    styles.set(scopeId, style);\n};\nconst addStyle = (styleContainerNode, cmpMeta, mode) => {\n    var _a;\n    const scopeId = getScopeId(cmpMeta, mode);\n    const style = styles.get(scopeId);\n    if (!BUILD.attachStyles) {\n        return scopeId;\n    }\n    // if an element is NOT connected then getRootNode() will return the wrong root node\n    // so the fallback is to always use the document for the root node in those cases\n    styleContainerNode = styleContainerNode.nodeType === 11 /* NODE_TYPE.DocumentFragment */ ? styleContainerNode : doc;\n    if (style) {\n        if (typeof style === 'string') {\n            styleContainerNode = styleContainerNode.head || styleContainerNode;\n            let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n            let styleElm;\n            if (!appliedStyles) {\n                rootAppliedStyles.set(styleContainerNode, (appliedStyles = new Set()));\n            }\n            if (!appliedStyles.has(scopeId)) {\n                if (BUILD.hydrateClientSide &&\n                    styleContainerNode.host &&\n                    (styleElm = styleContainerNode.querySelector(`[${HYDRATED_STYLE_ID}=\"${scopeId}\"]`))) {\n                    // This is only happening on native shadow-dom, do not needs CSS var shim\n                    styleElm.innerHTML = style;\n                }\n                else {\n                    styleElm = doc.createElement('style');\n                    styleElm.innerHTML = style;\n                    // Apply CSP nonce to the style tag if it exists\n                    const nonce = (_a = plt.$nonce$) !== null && _a !== void 0 ? _a : queryNonceMetaTagContent(doc);\n                    if (nonce != null) {\n                        styleElm.setAttribute('nonce', nonce);\n                    }\n                    if (BUILD.hydrateServerSide || BUILD.hotModuleReplacement) {\n                        styleElm.setAttribute(HYDRATED_STYLE_ID, scopeId);\n                    }\n                    styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n                }\n                // Add styles for `slot-fb` elements if we're using slots outside the Shadow DOM\n                if (cmpMeta.$flags$ & 4 /* CMP_FLAGS.hasSlotRelocation */) {\n                    styleElm.innerHTML += SLOT_FB_CSS;\n                }\n                if (appliedStyles) {\n                    appliedStyles.add(scopeId);\n                }\n            }\n        }\n        else if (BUILD.constructableCSS && !styleContainerNode.adoptedStyleSheets.includes(style)) {\n            styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n        }\n    }\n    return scopeId;\n};\nconst attachStyles = (hostRef) => {\n    const cmpMeta = hostRef.$cmpMeta$;\n    const elm = hostRef.$hostElement$;\n    const flags = cmpMeta.$flags$;\n    const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n    const scopeId = addStyle(BUILD.shadowDom && supportsShadow && elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta, hostRef.$modeName$);\n    if ((BUILD.shadowDom || BUILD.scoped) && BUILD.cssAnnotations && flags & 10 /* CMP_FLAGS.needsScopedEncapsulation */) {\n        // only required when we're NOT using native shadow dom (slot)\n        // or this browser doesn't support native shadow dom\n        // and this host element was NOT created with SSR\n        // let's pick out the inner content for slot projection\n        // create a node to represent where the original\n        // content was first placed, which is useful later on\n        // DOM WRITE!!\n        elm['s-sc'] = scopeId;\n        elm.classList.add(scopeId + '-h');\n        if (BUILD.scoped && flags & 2 /* CMP_FLAGS.scopedCssEncapsulation */) {\n            elm.classList.add(scopeId + '-s');\n        }\n    }\n    endAttachStyles();\n};\nconst getScopeId = (cmp, mode) => 'sc-' + (BUILD.mode && mode && cmp.$flags$ & 32 /* CMP_FLAGS.hasMode */ ? cmp.$tagName$ + '-' + mode : cmp.$tagName$);\nconst convertScopedToShadow = (css) => css.replace(/\\/\\*!@([^\\/]+)\\*\\/[^\\{]+\\{/g, '$1{');\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n/**\n * When running a VDom render set properties present on a VDom node onto the\n * corresponding HTML element.\n *\n * Note that this function has special functionality for the `class`,\n * `style`, `key`, and `ref` attributes, as well as event handlers (like\n * `onClick`, etc). All others are just passed through as-is.\n *\n * @param elm the HTMLElement onto which attributes should be set\n * @param memberName the name of the attribute to set\n * @param oldValue the old value for the attribute\n * @param newValue the new value for the attribute\n * @param isSvg whether we're in an svg context or not\n * @param flags bitflags for Vdom variables\n */\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n    if (oldValue !== newValue) {\n        let isProp = isMemberInElement(elm, memberName);\n        let ln = memberName.toLowerCase();\n        if (BUILD.vdomClass && memberName === 'class') {\n            const classList = elm.classList;\n            const oldClasses = parseClassList(oldValue);\n            const newClasses = parseClassList(newValue);\n            classList.remove(...oldClasses.filter((c) => c && !newClasses.includes(c)));\n            classList.add(...newClasses.filter((c) => c && !oldClasses.includes(c)));\n        }\n        else if (BUILD.vdomStyle && memberName === 'style') {\n            // update style attribute, css properties and values\n            if (BUILD.updatable) {\n                for (const prop in oldValue) {\n                    if (!newValue || newValue[prop] == null) {\n                        if (!BUILD.hydrateServerSide && prop.includes('-')) {\n                            elm.style.removeProperty(prop);\n                        }\n                        else {\n                            elm.style[prop] = '';\n                        }\n                    }\n                }\n            }\n            for (const prop in newValue) {\n                if (!oldValue || newValue[prop] !== oldValue[prop]) {\n                    if (!BUILD.hydrateServerSide && prop.includes('-')) {\n                        elm.style.setProperty(prop, newValue[prop]);\n                    }\n                    else {\n                        elm.style[prop] = newValue[prop];\n                    }\n                }\n            }\n        }\n        else if (BUILD.vdomKey && memberName === 'key')\n            ;\n        else if (BUILD.vdomRef && memberName === 'ref') {\n            // minifier will clean this up\n            if (newValue) {\n                newValue(elm);\n            }\n        }\n        else if (BUILD.vdomListener &&\n            (BUILD.lazyLoad ? !isProp : !elm.__lookupSetter__(memberName)) &&\n            memberName[0] === 'o' &&\n            memberName[1] === 'n') {\n            // Event Handlers\n            // so if the member name starts with \"on\" and the 3rd characters is\n            // a capital letter, and it's not already a member on the element,\n            // then we're assuming it's an event listener\n            if (memberName[2] === '-') {\n                // on- prefixed events\n                // allows to be explicit about the dom event to listen without any magic\n                // under the hood:\n                // <my-cmp on-click> // listens for \"click\"\n                // <my-cmp on-Click> // listens for \"Click\"\n                // <my-cmp on-ionChange> // listens for \"ionChange\"\n                // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n                memberName = memberName.slice(3);\n            }\n            else if (isMemberInElement(win, ln)) {\n                // standard event\n                // the JSX attribute could have been \"onMouseOver\" and the\n                // member name \"onmouseover\" is on the window's prototype\n                // so let's add the listener \"mouseover\", which is all lowercased\n                memberName = ln.slice(2);\n            }\n            else {\n                // custom event\n                // the JSX attribute could have been \"onMyCustomEvent\"\n                // so let's trim off the \"on\" prefix and lowercase the first character\n                // and add the listener \"myCustomEvent\"\n                // except for the first character, we keep the event name case\n                memberName = ln[2] + memberName.slice(3);\n            }\n            if (oldValue || newValue) {\n                // Need to account for \"capture\" events.\n                // If the event name ends with \"Capture\", we'll update the name to remove\n                // the \"Capture\" suffix and make sure the event listener is setup to handle the capture event.\n                const capture = memberName.endsWith(CAPTURE_EVENT_SUFFIX);\n                // Make sure we only replace the last instance of \"Capture\"\n                memberName = memberName.replace(CAPTURE_EVENT_REGEX, '');\n                if (oldValue) {\n                    plt.rel(elm, memberName, oldValue, capture);\n                }\n                if (newValue) {\n                    plt.ael(elm, memberName, newValue, capture);\n                }\n            }\n        }\n        else if (BUILD.vdomPropOrAttr) {\n            // Set property if it exists and it's not a SVG\n            const isComplex = isComplexType(newValue);\n            if ((isProp || (isComplex && newValue !== null)) && !isSvg) {\n                try {\n                    if (!elm.tagName.includes('-')) {\n                        const n = newValue == null ? '' : newValue;\n                        // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n                        if (memberName === 'list') {\n                            isProp = false;\n                        }\n                        else if (oldValue == null || elm[memberName] != n) {\n                            elm[memberName] = n;\n                        }\n                    }\n                    else {\n                        elm[memberName] = newValue;\n                    }\n                }\n                catch (e) {\n                    /**\n                     * in case someone tries to set a read-only property, e.g. \"namespaceURI\", we just ignore it\n                     */\n                }\n            }\n            /**\n             * Need to manually update attribute if:\n             * - memberName is not an attribute\n             * - if we are rendering the host element in order to reflect attribute\n             * - if it's a SVG, since properties might not work in <svg>\n             * - if the newValue is null/undefined or 'false'.\n             */\n            let xlink = false;\n            if (BUILD.vdomXlink) {\n                if (ln !== (ln = ln.replace(/^xlink\\:?/, ''))) {\n                    memberName = ln;\n                    xlink = true;\n                }\n            }\n            if (newValue == null || newValue === false) {\n                if (newValue !== false || elm.getAttribute(memberName) === '') {\n                    if (BUILD.vdomXlink && xlink) {\n                        elm.removeAttributeNS(XLINK_NS, memberName);\n                    }\n                    else {\n                        elm.removeAttribute(memberName);\n                    }\n                }\n            }\n            else if ((!isProp || flags & 4 /* VNODE_FLAGS.isHost */ || isSvg) && !isComplex) {\n                newValue = newValue === true ? '' : newValue;\n                if (BUILD.vdomXlink && xlink) {\n                    elm.setAttributeNS(XLINK_NS, memberName, newValue);\n                }\n                else {\n                    elm.setAttribute(memberName, newValue);\n                }\n            }\n        }\n    }\n};\nconst parseClassListRegex = /\\s/;\n/**\n * Parsed a string of classnames into an array\n * @param value className string, e.g. \"foo bar baz\"\n * @returns list of classes, e.g. [\"foo\", \"bar\", \"baz\"]\n */\nconst parseClassList = (value) => (!value ? [] : value.split(parseClassListRegex));\nconst CAPTURE_EVENT_SUFFIX = 'Capture';\nconst CAPTURE_EVENT_REGEX = new RegExp(CAPTURE_EVENT_SUFFIX + '$');\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n    // if the element passed in is a shadow root, which is a document fragment\n    // then we want to be adding attrs/props to the shadow root's \"host\" element\n    // if it's not a shadow root, then we add attrs/props to the same element\n    const elm = newVnode.$elm$.nodeType === 11 /* NODE_TYPE.DocumentFragment */ && newVnode.$elm$.host\n        ? newVnode.$elm$.host\n        : newVnode.$elm$;\n    const oldVnodeAttrs = (oldVnode && oldVnode.$attrs$) || EMPTY_OBJ;\n    const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n    if (BUILD.updatable) {\n        // remove attributes no longer present on the vnode by setting them to undefined\n        for (memberName in oldVnodeAttrs) {\n            if (!(memberName in newVnodeAttrs)) {\n                setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n            }\n        }\n    }\n    // add new & update changed attributes\n    for (memberName in newVnodeAttrs) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n    }\n};\n/**\n * Create a DOM Node corresponding to one of the children of a given VNode.\n *\n * @param oldParentVNode the parent VNode from the previous render\n * @param newParentVNode the parent VNode from the current render\n * @param childIndex the index of the VNode, in the _new_ parent node's\n * children, for which we will create a new DOM node\n * @param parentElm the parent DOM node which our new node will be a child of\n * @returns the newly created node\n */\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n    var _a;\n    // tslint:disable-next-line: prefer-const\n    const newVNode = newParentVNode.$children$[childIndex];\n    let i = 0;\n    let elm;\n    let childNode;\n    let oldVNode;\n    if (BUILD.slotRelocation && !useNativeShadowDom) {\n        // remember for later we need to check to relocate nodes\n        checkSlotRelocate = true;\n        if (newVNode.$tag$ === 'slot') {\n            if (scopeId) {\n                // scoped css needs to add its scoped id to the parent element\n                parentElm.classList.add(scopeId + '-s');\n            }\n            newVNode.$flags$ |= newVNode.$children$\n                ? // slot element has fallback content\n                    2 /* VNODE_FLAGS.isSlotFallback */\n                : // slot element does not have fallback content\n                    1 /* VNODE_FLAGS.isSlotReference */;\n        }\n    }\n    if (BUILD.isDev && newVNode.$elm$) {\n        consoleDevError(`The JSX ${newVNode.$text$ !== null ? `\"${newVNode.$text$}\" text` : `\"${newVNode.$tag$}\" element`} node should not be shared within the same renderer. The renderer caches element lookups in order to improve performance. However, a side effect from this is that the exact same JSX node should not be reused. For more information please see https://stenciljs.com/docs/templating-jsx#avoid-shared-jsx-nodes`);\n    }\n    if (BUILD.vdomText && newVNode.$text$ !== null) {\n        // create text node\n        elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n    }\n    else if (BUILD.slotRelocation && newVNode.$flags$ & 1 /* VNODE_FLAGS.isSlotReference */) {\n        // create a slot reference node\n        elm = newVNode.$elm$ =\n            BUILD.isDebug || BUILD.hydrateServerSide ? slotReferenceDebugNode(newVNode) : doc.createTextNode('');\n    }\n    else {\n        if (BUILD.svg && !isSvgMode) {\n            isSvgMode = newVNode.$tag$ === 'svg';\n        }\n        // create element\n        elm = newVNode.$elm$ = (BUILD.svg\n            ? doc.createElementNS(isSvgMode ? SVG_NS : HTML_NS, BUILD.slotRelocation && newVNode.$flags$ & 2 /* VNODE_FLAGS.isSlotFallback */\n                ? 'slot-fb'\n                : newVNode.$tag$)\n            : doc.createElement(BUILD.slotRelocation && newVNode.$flags$ & 2 /* VNODE_FLAGS.isSlotFallback */\n                ? 'slot-fb'\n                : newVNode.$tag$));\n        if (BUILD.svg && isSvgMode && newVNode.$tag$ === 'foreignObject') {\n            isSvgMode = false;\n        }\n        // add css classes, attrs, props, listeners, etc.\n        if (BUILD.vdomAttribute) {\n            updateElement(null, newVNode, isSvgMode);\n        }\n        if ((BUILD.shadowDom || BUILD.scoped) && isDef(scopeId) && elm['s-si'] !== scopeId) {\n            // if there is a scopeId and this is the initial render\n            // then let's add the scopeId as a css class\n            elm.classList.add((elm['s-si'] = scopeId));\n        }\n        if (newVNode.$children$) {\n            for (i = 0; i < newVNode.$children$.length; ++i) {\n                // create the node\n                childNode = createElm(oldParentVNode, newVNode, i, elm);\n                // return node could have been null\n                if (childNode) {\n                    // append our new node\n                    elm.appendChild(childNode);\n                }\n            }\n        }\n        if (BUILD.svg) {\n            if (newVNode.$tag$ === 'svg') {\n                // Only reset the SVG context when we're exiting <svg> element\n                isSvgMode = false;\n            }\n            else if (elm.tagName === 'foreignObject') {\n                // Reenter SVG context when we're exiting <foreignObject> element\n                isSvgMode = true;\n            }\n        }\n    }\n    if (BUILD.slotRelocation) {\n        elm['s-hn'] = hostTagName;\n        if (newVNode.$flags$ & (2 /* VNODE_FLAGS.isSlotFallback */ | 1 /* VNODE_FLAGS.isSlotReference */)) {\n            // remember the content reference comment\n            elm['s-sr'] = true;\n            // Persist the name of the slot that this slot was going to be projected into.\n            elm['s-fs'] = (_a = newVNode.$attrs$) === null || _a === void 0 ? void 0 : _a.slot;\n            // remember the content reference comment\n            elm['s-cr'] = contentRef;\n            // remember the slot name, or empty string for default slot\n            elm['s-sn'] = newVNode.$name$ || '';\n            // check if we've got an old vnode for this slot\n            oldVNode = oldParentVNode && oldParentVNode.$children$ && oldParentVNode.$children$[childIndex];\n            if (oldVNode && oldVNode.$tag$ === newVNode.$tag$ && oldParentVNode.$elm$) {\n                // we've got an old slot vnode and the wrapper is being replaced\n                // so let's move the old slot content back to it's original location\n                putBackInOriginalLocation(oldParentVNode.$elm$, false);\n            }\n        }\n    }\n    return elm;\n};\nconst putBackInOriginalLocation = (parentElm, recursive) => {\n    var _a;\n    plt.$flags$ |= 1 /* PLATFORM_FLAGS.isTmpDisconnected */;\n    const oldSlotChildNodes = parentElm.childNodes;\n    for (let i = oldSlotChildNodes.length - 1; i >= 0; i--) {\n        const childNode = oldSlotChildNodes[i];\n        if (childNode['s-hn'] !== hostTagName && childNode['s-ol']) {\n            // // this child node in the old element is from another component\n            // // remove this node from the old slot's parent\n            // childNode.remove();\n            // and relocate it back to it's original location\n            parentReferenceNode(childNode).insertBefore(childNode, referenceNode(childNode));\n            // remove the old original location comment entirely\n            // later on the patch function will know what to do\n            // and move this to the correct spot if need be\n            childNode['s-ol'].remove();\n            childNode['s-ol'] = undefined;\n            // Reset so we can correctly move the node around again.\n            childNode['s-sh'] = undefined;\n            // When putting an element node back in its original location,\n            // we need to reset the `slot` attribute back to the value it originally had\n            // so we can correctly relocate it again in the future\n            if (childNode.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n                childNode.setAttribute('slot', (_a = childNode['s-sn']) !== null && _a !== void 0 ? _a : '');\n            }\n            checkSlotRelocate = true;\n        }\n        if (recursive) {\n            putBackInOriginalLocation(childNode, recursive);\n        }\n    }\n    plt.$flags$ &= ~1 /* PLATFORM_FLAGS.isTmpDisconnected */;\n};\n/**\n * Create DOM nodes corresponding to a list of {@link d.Vnode} objects and\n * add them to the DOM in the appropriate place.\n *\n * @param parentElm the DOM node which should be used as a parent for the new\n * DOM nodes\n * @param before a child of the `parentElm` which the new children should be\n * inserted before (optional)\n * @param parentVNode the parent virtual DOM node\n * @param vnodes the new child virtual DOM nodes to produce DOM nodes for\n * @param startIdx the index in the child virtual DOM nodes at which to start\n * creating DOM nodes (inclusive)\n * @param endIdx the index in the child virtual DOM nodes at which to stop\n * creating DOM nodes (inclusive)\n */\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n    let containerElm = ((BUILD.slotRelocation && parentElm['s-cr'] && parentElm['s-cr'].parentNode) || parentElm);\n    let childNode;\n    if (BUILD.shadowDom && containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n        containerElm = containerElm.shadowRoot;\n    }\n    for (; startIdx <= endIdx; ++startIdx) {\n        if (vnodes[startIdx]) {\n            childNode = createElm(null, parentVNode, startIdx, parentElm);\n            if (childNode) {\n                vnodes[startIdx].$elm$ = childNode;\n                containerElm.insertBefore(childNode, BUILD.slotRelocation ? referenceNode(before) : before);\n            }\n        }\n    }\n};\n/**\n * Remove the DOM elements corresponding to a list of {@link d.VNode} objects.\n * This can be used to, for instance, clean up after a list of children which\n * should no longer be shown.\n *\n * This function also handles some of Stencil's slot relocation logic.\n *\n * @param vnodes a list of virtual DOM nodes to remove\n * @param startIdx the index at which to start removing nodes (inclusive)\n * @param endIdx the index at which to stop removing nodes (inclusive)\n */\nconst removeVnodes = (vnodes, startIdx, endIdx) => {\n    for (let index = startIdx; index <= endIdx; ++index) {\n        const vnode = vnodes[index];\n        if (vnode) {\n            const elm = vnode.$elm$;\n            nullifyVNodeRefs(vnode);\n            if (elm) {\n                if (BUILD.slotRelocation) {\n                    // we're removing this element\n                    // so it's possible we need to show slot fallback content now\n                    checkSlotFallbackVisibility = true;\n                    if (elm['s-ol']) {\n                        // remove the original location comment\n                        elm['s-ol'].remove();\n                    }\n                    else {\n                        // it's possible that child nodes of the node\n                        // that's being removed are slot nodes\n                        putBackInOriginalLocation(elm, true);\n                    }\n                }\n                // remove the vnode's element from the dom\n                elm.remove();\n            }\n        }\n    }\n};\n/**\n * Reconcile the children of a new VNode with the children of an old VNode by\n * traversing the two collections of children, identifying nodes that are\n * conserved or changed, calling out to `patch` to make any necessary\n * updates to the DOM, and rearranging DOM nodes as needed.\n *\n * The algorithm for reconciling children works by analyzing two 'windows' onto\n * the two arrays of children (`oldCh` and `newCh`). We keep track of the\n * 'windows' by storing start and end indices and references to the\n * corresponding array entries. Initially the two 'windows' are basically equal\n * to the entire array, but we progressively narrow the windows until there are\n * no children left to update by doing the following:\n *\n * 1. Skip any `null` entries at the beginning or end of the two arrays, so\n *    that if we have an initial array like the following we'll end up dealing\n *    only with a window bounded by the highlighted elements:\n *\n *    [null, null, VNode1 , ... , VNode2, null, null]\n *                 ^^^^^^         ^^^^^^\n *\n * 2. Check to see if the elements at the head and tail positions are equal\n *    across the windows. This will basically detect elements which haven't\n *    been added, removed, or changed position, i.e. if you had the following\n *    VNode elements (represented as HTML):\n *\n *    oldVNode: `<div><p><span>HEY</span></p></div>`\n *    newVNode: `<div><p><span>THERE</span></p></div>`\n *\n *    Then when comparing the children of the `<div>` tag we check the equality\n *    of the VNodes corresponding to the `<p>` tags and, since they are the\n *    same tag in the same position, we'd be able to avoid completely\n *    re-rendering the subtree under them with a new DOM element and would just\n *    call out to `patch` to handle reconciling their children and so on.\n *\n * 3. Check, for both windows, to see if the element at the beginning of the\n *    window corresponds to the element at the end of the other window. This is\n *    a heuristic which will let us identify _some_ situations in which\n *    elements have changed position, for instance it _should_ detect that the\n *    children nodes themselves have not changed but merely moved in the\n *    following example:\n *\n *    oldVNode: `<div><element-one /><element-two /></div>`\n *    newVNode: `<div><element-two /><element-one /></div>`\n *\n *    If we find cases like this then we also need to move the concrete DOM\n *    elements corresponding to the moved children to write the re-order to the\n *    DOM.\n *\n * 4. Finally, if VNodes have the `key` attribute set on them we check for any\n *    nodes in the old children which have the same key as the first element in\n *    our window on the new children. If we find such a node we handle calling\n *    out to `patch`, moving relevant DOM nodes, and so on, in accordance with\n *    what we find.\n *\n * Finally, once we've narrowed our 'windows' to the point that either of them\n * collapse (i.e. they have length 0) we then handle any remaining VNode\n * insertion or deletion that needs to happen to get a DOM state that correctly\n * reflects the new child VNodes. If, for instance, after our window on the old\n * children has collapsed we still have more nodes on the new children that\n * we haven't dealt with yet then we need to add them, or if the new children\n * collapse but we still have unhandled _old_ children then we need to make\n * sure the corresponding DOM nodes are removed.\n *\n * @param parentElm the node into which the parent VNode is rendered\n * @param oldCh the old children of the parent node\n * @param newVNode the new VNode which will replace the parent\n * @param newCh the new children of the parent node\n */\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let idxInOld = 0;\n    let i = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let node;\n    let elmToMove;\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            // VNode might have been moved left\n            oldStartVnode = oldCh[++oldStartIdx];\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newStartVnode)) {\n            // if the start nodes are the same then we should patch the new VNode\n            // onto the old one, and increment our `newStartIdx` and `oldStartIdx`\n            // indices to reflect that. We don't need to move any DOM Nodes around\n            // since things are matched up in order.\n            patch(oldStartVnode, newStartVnode);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newEndVnode)) {\n            // likewise, if the end nodes are the same we patch new onto old and\n            // decrement our end indices, and also likewise in this case we don't\n            // need to move any DOM Nodes.\n            patch(oldEndVnode, newEndVnode);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newEndVnode)) {\n            // case: \"Vnode moved right\"\n            //\n            // We've found that the last node in our window on the new children is\n            // the same VNode as the _first_ node in our window on the old children\n            // we're dealing with now. Visually, this is the layout of these two\n            // nodes:\n            //\n            // newCh: [..., newStartVnode , ... , newEndVnode , ...]\n            //                                    ^^^^^^^^^^^\n            // oldCh: [..., oldStartVnode , ... , oldEndVnode , ...]\n            //              ^^^^^^^^^^^^^\n            //\n            // In this situation we need to patch `newEndVnode` onto `oldStartVnode`\n            // and move the DOM element for `oldStartVnode`.\n            if (BUILD.slotRelocation && (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n                putBackInOriginalLocation(oldStartVnode.$elm$.parentNode, false);\n            }\n            patch(oldStartVnode, newEndVnode);\n            // We need to move the element for `oldStartVnode` into a position which\n            // will be appropriate for `newEndVnode`. For this we can use\n            // `.insertBefore` and `oldEndVnode.$elm$.nextSibling`. If there is a\n            // sibling for `oldEndVnode.$elm$` then we want to move the DOM node for\n            // `oldStartVnode` between `oldEndVnode` and it's sibling, like so:\n            //\n            // <old-start-node />\n            // <some-intervening-node />\n            // <old-end-node />\n            // <!-- ->              <-- `oldStartVnode.$elm$` should be inserted here\n            // <next-sibling />\n            //\n            // If instead `oldEndVnode.$elm$` has no sibling then we just want to put\n            // the node for `oldStartVnode` at the end of the children of\n            // `parentElm`. Luckily, `Node.nextSibling` will return `null` if there\n            // aren't any siblings, and passing `null` to `Node.insertBefore` will\n            // append it to the children of the parent element.\n            parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newStartVnode)) {\n            // case: \"Vnode moved left\"\n            //\n            // We've found that the first node in our window on the new children is\n            // the same VNode as the _last_ node in our window on the old children.\n            // Visually, this is the layout of these two nodes:\n            //\n            // newCh: [..., newStartVnode , ... , newEndVnode , ...]\n            //              ^^^^^^^^^^^^^\n            // oldCh: [..., oldStartVnode , ... , oldEndVnode , ...]\n            //                                    ^^^^^^^^^^^\n            //\n            // In this situation we need to patch `newStartVnode` onto `oldEndVnode`\n            // (which will handle updating any changed attributes, reconciling their\n            // children etc) but we also need to move the DOM node to which\n            // `oldEndVnode` corresponds.\n            if (BUILD.slotRelocation && (oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n                putBackInOriginalLocation(oldEndVnode.$elm$.parentNode, false);\n            }\n            patch(oldEndVnode, newStartVnode);\n            // We've already checked above if `oldStartVnode` and `newStartVnode` are\n            // the same node, so since we're here we know that they are not. Thus we\n            // can move the element for `oldEndVnode` _before_ the element for\n            // `oldStartVnode`, leaving `oldStartVnode` to be reconciled in the\n            // future.\n            parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            // Here we do some checks to match up old and new nodes based on the\n            // `$key$` attribute, which is set by putting a `key=\"my-key\"` attribute\n            // in the JSX for a DOM element in the implementation of a Stencil\n            // component.\n            //\n            // First we check to see if there are any nodes in the array of old\n            // children which have the same key as the first node in the new\n            // children.\n            idxInOld = -1;\n            if (BUILD.vdomKey) {\n                for (i = oldStartIdx; i <= oldEndIdx; ++i) {\n                    if (oldCh[i] && oldCh[i].$key$ !== null && oldCh[i].$key$ === newStartVnode.$key$) {\n                        idxInOld = i;\n                        break;\n                    }\n                }\n            }\n            if (BUILD.vdomKey && idxInOld >= 0) {\n                // We found a node in the old children which matches up with the first\n                // node in the new children! So let's deal with that\n                elmToMove = oldCh[idxInOld];\n                if (elmToMove.$tag$ !== newStartVnode.$tag$) {\n                    // the tag doesn't match so we'll need a new DOM element\n                    node = createElm(oldCh && oldCh[newStartIdx], newVNode, idxInOld, parentElm);\n                }\n                else {\n                    patch(elmToMove, newStartVnode);\n                    // invalidate the matching old node so that we won't try to update it\n                    // again later on\n                    oldCh[idxInOld] = undefined;\n                    node = elmToMove.$elm$;\n                }\n                newStartVnode = newCh[++newStartIdx];\n            }\n            else {\n                // We either didn't find an element in the old children that matches\n                // the key of the first new child OR the build is not using `key`\n                // attributes at all. In either case we need to create a new element\n                // for the new node.\n                node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx, parentElm);\n                newStartVnode = newCh[++newStartIdx];\n            }\n            if (node) {\n                // if we created a new node then handle inserting it to the DOM\n                if (BUILD.slotRelocation) {\n                    parentReferenceNode(oldStartVnode.$elm$).insertBefore(node, referenceNode(oldStartVnode.$elm$));\n                }\n                else {\n                    oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\n                }\n            }\n        }\n    }\n    if (oldStartIdx > oldEndIdx) {\n        // we have some more new nodes to add which don't match up with old nodes\n        addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n    }\n    else if (BUILD.updatable && newStartIdx > newEndIdx) {\n        // there are nodes in the `oldCh` array which no longer correspond to nodes\n        // in the new array, so lets remove them (which entails cleaning up the\n        // relevant DOM nodes)\n        removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n    }\n};\n/**\n * Compare two VNodes to determine if they are the same\n *\n * **NB**: This function is an equality _heuristic_ based on the available\n * information set on the two VNodes and can be misleading under certain\n * circumstances. In particular, if the two nodes do not have `key` attrs\n * (available under `$key$` on VNodes) then the function falls back on merely\n * checking that they have the same tag.\n *\n * So, in other words, if `key` attrs are not set on VNodes which may be\n * changing order within a `children` array or something along those lines then\n * we could obtain a false negative and then have to do needless re-rendering\n * (i.e. we'd say two VNodes aren't equal when in fact they should be).\n *\n * @param leftVNode the first VNode to check\n * @param rightVNode the second VNode to check\n * @returns whether they're equal or not\n */\nconst isSameVnode = (leftVNode, rightVNode) => {\n    // compare if two vnode to see if they're \"technically\" the same\n    // need to have the same element tag, and same key to be the same\n    if (leftVNode.$tag$ === rightVNode.$tag$) {\n        if (BUILD.slotRelocation && leftVNode.$tag$ === 'slot') {\n            return leftVNode.$name$ === rightVNode.$name$;\n        }\n        // this will be set if components in the build have `key` attrs set on them\n        if (BUILD.vdomKey) {\n            return leftVNode.$key$ === rightVNode.$key$;\n        }\n        return true;\n    }\n    return false;\n};\nconst referenceNode = (node) => {\n    // this node was relocated to a new location in the dom\n    // because of some other component's slot\n    // but we still have an html comment in place of where\n    // it's original location was according to it's original vdom\n    return (node && node['s-ol']) || node;\n};\nconst parentReferenceNode = (node) => (node['s-ol'] ? node['s-ol'] : node).parentNode;\n/**\n * Handle reconciling an outdated VNode with a new one which corresponds to\n * it. This function handles flushing updates to the DOM and reconciling the\n * children of the two nodes (if any).\n *\n * @param oldVNode an old VNode whose DOM element and children we want to update\n * @param newVNode a new VNode representing an updated version of the old one\n */\nconst patch = (oldVNode, newVNode) => {\n    const elm = (newVNode.$elm$ = oldVNode.$elm$);\n    const oldChildren = oldVNode.$children$;\n    const newChildren = newVNode.$children$;\n    const tag = newVNode.$tag$;\n    const text = newVNode.$text$;\n    let defaultHolder;\n    if (!BUILD.vdomText || text === null) {\n        if (BUILD.svg) {\n            // test if we're rendering an svg element, or still rendering nodes inside of one\n            // only add this to the when the compiler sees we're using an svg somewhere\n            isSvgMode = tag === 'svg' ? true : tag === 'foreignObject' ? false : isSvgMode;\n        }\n        if (BUILD.vdomAttribute || BUILD.reflect) {\n            if (BUILD.slot && tag === 'slot')\n                ;\n            else {\n                // either this is the first render of an element OR it's an update\n                // AND we already know it's possible it could have changed\n                // this updates the element's css classes, attrs, props, listeners, etc.\n                updateElement(oldVNode, newVNode, isSvgMode);\n            }\n        }\n        if (BUILD.updatable && oldChildren !== null && newChildren !== null) {\n            // looks like there's child vnodes for both the old and new vnodes\n            // so we need to call `updateChildren` to reconcile them\n            updateChildren(elm, oldChildren, newVNode, newChildren);\n        }\n        else if (newChildren !== null) {\n            // no old child vnodes, but there are new child vnodes to add\n            if (BUILD.updatable && BUILD.vdomText && oldVNode.$text$ !== null) {\n                // the old vnode was text, so be sure to clear it out\n                elm.textContent = '';\n            }\n            // add the new vnode children\n            addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n        }\n        else if (BUILD.updatable && oldChildren !== null) {\n            // no new child vnodes, but there are old child vnodes to remove\n            removeVnodes(oldChildren, 0, oldChildren.length - 1);\n        }\n        if (BUILD.svg && isSvgMode && tag === 'svg') {\n            isSvgMode = false;\n        }\n    }\n    else if (BUILD.vdomText && BUILD.slotRelocation && (defaultHolder = elm['s-cr'])) {\n        // this element has slotted content\n        defaultHolder.parentNode.textContent = text;\n    }\n    else if (BUILD.vdomText && oldVNode.$text$ !== text) {\n        // update the text content for the text only vnode\n        // and also only if the text is different than before\n        elm.data = text;\n    }\n};\n/**\n * Adjust the `.hidden` property as-needed on any nodes in a DOM subtree which\n * are slot fallbacks nodes.\n *\n * A slot fallback node should be visible by default. Then, it should be\n * conditionally hidden if:\n *\n * - it has a sibling with a `slot` property set to its slot name or if\n * - it is a default fallback slot node, in which case we hide if it has any\n *   content\n *\n * @param elm the element of interest\n */\nconst updateFallbackSlotVisibility = (elm) => {\n    const childNodes = elm.childNodes;\n    for (const childNode of childNodes) {\n        if (childNode.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n            if (childNode['s-sr']) {\n                // this is a slot fallback node\n                // get the slot name for this slot reference node\n                const slotName = childNode['s-sn'];\n                // by default always show a fallback slot node\n                // then hide it if there are other slots in the light dom\n                childNode.hidden = false;\n                // we need to check all of its sibling nodes in order to see if\n                // `childNode` should be hidden\n                for (const siblingNode of childNodes) {\n                    // Don't check the node against itself\n                    if (siblingNode !== childNode) {\n                        if (siblingNode['s-hn'] !== childNode['s-hn'] || slotName !== '') {\n                            // this sibling node is from a different component OR is a named\n                            // fallback slot node\n                            if (siblingNode.nodeType === 1 /* NODE_TYPE.ElementNode */ &&\n                                (slotName === siblingNode.getAttribute('slot') || slotName === siblingNode['s-sn'])) {\n                                childNode.hidden = true;\n                                break;\n                            }\n                        }\n                        else {\n                            // this is a default fallback slot node\n                            // any element or text node (with content)\n                            // should hide the default fallback slot node\n                            if (siblingNode.nodeType === 1 /* NODE_TYPE.ElementNode */ ||\n                                (siblingNode.nodeType === 3 /* NODE_TYPE.TextNode */ && siblingNode.textContent.trim() !== '')) {\n                                childNode.hidden = true;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n            // keep drilling down\n            updateFallbackSlotVisibility(childNode);\n        }\n    }\n};\n/**\n * Component-global information about nodes which are either currently being\n * relocated or will be shortly.\n */\nconst relocateNodes = [];\n/**\n * Mark the contents of a slot for relocation via adding references to them to\n * the {@link relocateNodes} data structure. The actual work of relocating them\n * will then be handled in {@link renderVdom}.\n *\n * @param elm a render node whose child nodes need to be relocated\n */\nconst markSlotContentForRelocation = (elm) => {\n    // tslint:disable-next-line: prefer-const\n    let node;\n    let hostContentNodes;\n    let j;\n    for (const childNode of elm.childNodes) {\n        // we need to find child nodes which are slot references so we can then try\n        // to match them up with nodes that need to be relocated\n        if (childNode['s-sr'] && (node = childNode['s-cr']) && node.parentNode) {\n            // first get the content reference comment node ('s-cr'), then we get\n            // its parent, which is where all the host content is now\n            hostContentNodes = node.parentNode.childNodes;\n            const slotName = childNode['s-sn'];\n            // iterate through all the nodes under the location where the host was\n            // originally rendered\n            for (j = hostContentNodes.length - 1; j >= 0; j--) {\n                node = hostContentNodes[j];\n                // check that the node is not a content reference node or a node\n                // reference and then check that the host name does not match that of\n                // childNode.\n                // In addition, check that the slot either has not already been relocated, or\n                // that its current location's host is not childNode's host. This is essentially\n                // a check so that we don't try to relocate (and then hide) a node that is already\n                // where it should be.\n                if (!node['s-cn'] &&\n                    !node['s-nr'] &&\n                    node['s-hn'] !== childNode['s-hn'] &&\n                    (!BUILD.experimentalSlotFixes || !node['s-sh'] || node['s-sh'] !== childNode['s-hn'])) {\n                    // if `node` is located in the slot that `childNode` refers to (via the\n                    // `'s-sn'` property) then we need to relocate it from it's current spot\n                    // (under the host element parent) to the right slot location\n                    if (isNodeLocatedInSlot(node, slotName)) {\n                        // it's possible we've already decided to relocate this node\n                        let relocateNodeData = relocateNodes.find((r) => r.$nodeToRelocate$ === node);\n                        // made some changes to slots\n                        // let's make sure we also double check\n                        // fallbacks are correctly hidden or shown\n                        checkSlotFallbackVisibility = true;\n                        // ensure that the slot-name attr is correct\n                        node['s-sn'] = node['s-sn'] || slotName;\n                        if (relocateNodeData) {\n                            relocateNodeData.$nodeToRelocate$['s-sh'] = childNode['s-hn'];\n                            // we marked this node for relocation previously but didn't find\n                            // out the slot reference node to which it needs to be relocated\n                            // so write it down now!\n                            relocateNodeData.$slotRefNode$ = childNode;\n                        }\n                        else {\n                            node['s-sh'] = childNode['s-hn'];\n                            // add to our list of nodes to relocate\n                            relocateNodes.push({\n                                $slotRefNode$: childNode,\n                                $nodeToRelocate$: node,\n                            });\n                        }\n                        if (node['s-sr']) {\n                            relocateNodes.map((relocateNode) => {\n                                if (isNodeLocatedInSlot(relocateNode.$nodeToRelocate$, node['s-sn'])) {\n                                    relocateNodeData = relocateNodes.find((r) => r.$nodeToRelocate$ === node);\n                                    if (relocateNodeData && !relocateNode.$slotRefNode$) {\n                                        relocateNode.$slotRefNode$ = relocateNodeData.$slotRefNode$;\n                                    }\n                                }\n                            });\n                        }\n                    }\n                    else if (!relocateNodes.some((r) => r.$nodeToRelocate$ === node)) {\n                        // the node is not found within the slot (`childNode`) that we're\n                        // currently looking at, so we stick it into `relocateNodes` to\n                        // handle later. If we never find a home for this element then\n                        // we'll need to hide it\n                        relocateNodes.push({\n                            $nodeToRelocate$: node,\n                        });\n                    }\n                }\n            }\n        }\n        // if we're dealing with any type of element (capable of itself being a\n        // slot reference or containing one) then we recur\n        if (childNode.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n            markSlotContentForRelocation(childNode);\n        }\n    }\n};\n/**\n * Check whether a node is located in a given named slot.\n *\n * @param nodeToRelocate the node of interest\n * @param slotName the slot name to check\n * @returns whether the node is located in the slot or not\n */\nconst isNodeLocatedInSlot = (nodeToRelocate, slotName) => {\n    if (nodeToRelocate.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n        if (nodeToRelocate.getAttribute('slot') === null && slotName === '') {\n            // if the node doesn't have a slot attribute, and the slot we're checking\n            // is not a named slot, then we assume the node should be within the slot\n            return true;\n        }\n        if (nodeToRelocate.getAttribute('slot') === slotName) {\n            return true;\n        }\n        return false;\n    }\n    if (nodeToRelocate['s-sn'] === slotName) {\n        return true;\n    }\n    return slotName === '';\n};\n/**\n * 'Nullify' any VDom `ref` callbacks on a VDom node or its children by calling\n * them with `null`. This signals that the DOM element corresponding to the VDom\n * node has been removed from the DOM.\n *\n * @param vNode a virtual DOM node\n */\nconst nullifyVNodeRefs = (vNode) => {\n    if (BUILD.vdomRef) {\n        vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(null);\n        vNode.$children$ && vNode.$children$.map(nullifyVNodeRefs);\n    }\n};\n/**\n * The main entry point for Stencil's virtual DOM-based rendering engine\n *\n * Given a {@link d.HostRef} container and some virtual DOM nodes, this\n * function will handle creating a virtual DOM tree with a single root, patching\n * the current virtual DOM tree onto an old one (if any), dealing with slot\n * relocation, and reflecting attributes.\n *\n * @param hostRef data needed to root and render the virtual DOM tree, such as\n * the DOM node into which it should be rendered.\n * @param renderFnResults the virtual DOM nodes to be rendered\n * @param isInitialLoad whether or not this is the first call after page load\n */\nconst renderVdom = (hostRef, renderFnResults, isInitialLoad = false) => {\n    var _a, _b;\n    const hostElm = hostRef.$hostElement$;\n    const cmpMeta = hostRef.$cmpMeta$;\n    const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n    // if `renderFnResults` is a Host node then we can use it directly. If not,\n    // we need to call `h` again to wrap the children of our component in a\n    // 'dummy' Host node (well, an empty vnode) since `renderVdom` assumes\n    // implicitly that the top-level vdom node is 1) an only child and 2)\n    // contains attrs that need to be set on the host element.\n    const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n    hostTagName = hostElm.tagName;\n    // <Host> runtime check\n    if (BUILD.isDev && Array.isArray(renderFnResults) && renderFnResults.some(isHost)) {\n        throw new Error(`The <Host> must be the single root component.\nLooks like the render() function of \"${hostTagName.toLowerCase()}\" is returning an array that contains the <Host>.\n\nThe render() function should look like this instead:\n\nrender() {\n  // Do not return an array\n  return (\n    <Host>{content}</Host>\n  );\n}\n  `);\n    }\n    if (BUILD.reflect && cmpMeta.$attrsToReflect$) {\n        rootVnode.$attrs$ = rootVnode.$attrs$ || {};\n        cmpMeta.$attrsToReflect$.map(([propName, attribute]) => (rootVnode.$attrs$[attribute] = hostElm[propName]));\n    }\n    // On the first render and *only* on the first render we want to check for\n    // any attributes set on the host element which are also set on the vdom\n    // node. If we find them, we override the value on the VDom node attrs with\n    // the value from the host element, which allows developers building apps\n    // with Stencil components to override e.g. the `role` attribute on a\n    // component even if it's already set on the `Host`.\n    if (isInitialLoad && rootVnode.$attrs$) {\n        for (const key of Object.keys(rootVnode.$attrs$)) {\n            // We have a special implementation in `setAccessor` for `style` and\n            // `class` which reconciles values coming from the VDom with values\n            // already present on the DOM element, so we don't want to override those\n            // attributes on the VDom tree with values from the host element if they\n            // are present.\n            //\n            // Likewise, `ref` and `key` are special internal values for the Stencil\n            // runtime and we don't want to override those either.\n            if (hostElm.hasAttribute(key) && !['key', 'ref', 'style', 'class'].includes(key)) {\n                rootVnode.$attrs$[key] = hostElm[key];\n            }\n        }\n    }\n    rootVnode.$tag$ = null;\n    rootVnode.$flags$ |= 4 /* VNODE_FLAGS.isHost */;\n    hostRef.$vnode$ = rootVnode;\n    rootVnode.$elm$ = oldVNode.$elm$ = (BUILD.shadowDom ? hostElm.shadowRoot || hostElm : hostElm);\n    if (BUILD.scoped || BUILD.shadowDom) {\n        scopeId = hostElm['s-sc'];\n    }\n    if (BUILD.slotRelocation) {\n        contentRef = hostElm['s-cr'];\n        useNativeShadowDom = supportsShadow && (cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) !== 0;\n        // always reset\n        checkSlotFallbackVisibility = false;\n    }\n    // synchronous patch\n    patch(oldVNode, rootVnode);\n    if (BUILD.slotRelocation) {\n        // while we're moving nodes around existing nodes, temporarily disable\n        // the disconnectCallback from working\n        plt.$flags$ |= 1 /* PLATFORM_FLAGS.isTmpDisconnected */;\n        if (checkSlotRelocate) {\n            markSlotContentForRelocation(rootVnode.$elm$);\n            for (const relocateData of relocateNodes) {\n                const nodeToRelocate = relocateData.$nodeToRelocate$;\n                if (!nodeToRelocate['s-ol']) {\n                    // add a reference node marking this node's original location\n                    // keep a reference to this node for later lookups\n                    const orgLocationNode = BUILD.isDebug || BUILD.hydrateServerSide\n                        ? originalLocationDebugNode(nodeToRelocate)\n                        : doc.createTextNode('');\n                    orgLocationNode['s-nr'] = nodeToRelocate;\n                    nodeToRelocate.parentNode.insertBefore((nodeToRelocate['s-ol'] = orgLocationNode), nodeToRelocate);\n                }\n            }\n            for (const relocateData of relocateNodes) {\n                const nodeToRelocate = relocateData.$nodeToRelocate$;\n                const slotRefNode = relocateData.$slotRefNode$;\n                if (slotRefNode) {\n                    const parentNodeRef = slotRefNode.parentNode;\n                    // When determining where to insert content, the most simple case would be\n                    // to relocate the node immediately following the slot reference node. We do this\n                    // by getting a reference to the node immediately following the slot reference node\n                    // since we will use `insertBefore` to manipulate the DOM.\n                    //\n                    // If there is no node immediately following the slot reference node, then we will just\n                    // end up appending the node as the last child of the parent.\n                    let insertBeforeNode = slotRefNode.nextSibling;\n                    // If the node we're currently planning on inserting the new node before is an element,\n                    // we need to do some additional checks to make sure we're inserting the node in the correct order.\n                    // The use case here would be that we have multiple nodes being relocated to the same slot. So, we want\n                    // to make sure they get inserted into their new how in the same order they were declared in their original location.\n                    //\n                    // TODO(STENCIL-914): Remove `experimentalSlotFixes` check\n                    if (!BUILD.experimentalSlotFixes ||\n                        (insertBeforeNode && insertBeforeNode.nodeType === 1 /* NODE_TYPE.ElementNode */)) {\n                        let orgLocationNode = (_a = nodeToRelocate['s-ol']) === null || _a === void 0 ? void 0 : _a.previousSibling;\n                        while (orgLocationNode) {\n                            let refNode = (_b = orgLocationNode['s-nr']) !== null && _b !== void 0 ? _b : null;\n                            if (refNode && refNode['s-sn'] === nodeToRelocate['s-sn'] && parentNodeRef === refNode.parentNode) {\n                                refNode = refNode.nextSibling;\n                                if (!refNode || !refNode['s-nr']) {\n                                    insertBeforeNode = refNode;\n                                    break;\n                                }\n                            }\n                            orgLocationNode = orgLocationNode.previousSibling;\n                        }\n                    }\n                    if ((!insertBeforeNode && parentNodeRef !== nodeToRelocate.parentNode) ||\n                        nodeToRelocate.nextSibling !== insertBeforeNode) {\n                        // we've checked that it's worth while to relocate\n                        // since that the node to relocate\n                        // has a different next sibling or parent relocated\n                        if (nodeToRelocate !== insertBeforeNode) {\n                            if (!nodeToRelocate['s-hn'] && nodeToRelocate['s-ol']) {\n                                // probably a component in the index.html that doesn't have its hostname set\n                                nodeToRelocate['s-hn'] = nodeToRelocate['s-ol'].parentNode.nodeName;\n                            }\n                            // Handle a use-case where we relocate a slot where\n                            // the slot name changes along the way (for instance, a default to a named slot).\n                            // In this case, we need to update the relocated node's slot attribute to match\n                            // the slot name it is being relocated into.\n                            //\n                            // There is a very niche use case where we may be relocating a text node. For now,\n                            // we ignore anything that is not an element node since non-element nodes cannot have\n                            // attributes to specify the slot. We'll deal with this if it becomes a problem... but super edge-case-y\n                            if (BUILD.experimentalSlotFixes &&\n                                nodeToRelocate.nodeType === 1 /* NODE_TYPE.ElementNode */ &&\n                                slotRefNode['s-fs'] !== nodeToRelocate.getAttribute('slot')) {\n                                if (!slotRefNode['s-fs']) {\n                                    nodeToRelocate.removeAttribute('slot');\n                                }\n                                else {\n                                    nodeToRelocate.setAttribute('slot', slotRefNode['s-fs']);\n                                }\n                            }\n                            // Add it back to the dom but in its new home\n                            // If we get to this point and `insertBeforeNode` is `null`, that means\n                            // we're just going to append the node as the last child of the parent. Passing\n                            // `null` as the second arg here will trigger that behavior.\n                            parentNodeRef.insertBefore(nodeToRelocate, insertBeforeNode);\n                        }\n                    }\n                }\n                else {\n                    // this node doesn't have a slot home to go to, so let's hide it\n                    if (nodeToRelocate.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n                        nodeToRelocate.hidden = true;\n                    }\n                }\n            }\n        }\n        if (checkSlotFallbackVisibility) {\n            updateFallbackSlotVisibility(rootVnode.$elm$);\n        }\n        // done moving nodes around\n        // allow the disconnect callback to work again\n        plt.$flags$ &= ~1 /* PLATFORM_FLAGS.isTmpDisconnected */;\n        // always reset\n        relocateNodes.length = 0;\n    }\n};\n// slot comment debug nodes only created with the `--debug` flag\n// otherwise these nodes are text nodes w/out content\nconst slotReferenceDebugNode = (slotVNode) => doc.createComment(`<slot${slotVNode.$name$ ? ' name=\"' + slotVNode.$name$ + '\"' : ''}> (host=${hostTagName.toLowerCase()})`);\nconst originalLocationDebugNode = (nodeToRelocate) => doc.createComment(`org-location for ` +\n    (nodeToRelocate.localName\n        ? `<${nodeToRelocate.localName}> (host=${nodeToRelocate['s-hn']})`\n        : `[${nodeToRelocate.textContent}]`));\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n    if (BUILD.asyncLoading && ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n        ancestorComponent['s-p'].push(new Promise((r) => (hostRef.$onRenderResolve$ = r)));\n    }\n};\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n    if (BUILD.taskQueue && BUILD.updatable) {\n        hostRef.$flags$ |= 16 /* HOST_FLAGS.isQueuedForUpdate */;\n    }\n    if (BUILD.asyncLoading && hostRef.$flags$ & 4 /* HOST_FLAGS.isWaitingForChildren */) {\n        hostRef.$flags$ |= 512 /* HOST_FLAGS.needsRerender */;\n        return;\n    }\n    attachToAncestor(hostRef, hostRef.$ancestorComponent$);\n    // there is no ancestor component or the ancestor component\n    // has already fired off its lifecycle update then\n    // fire off the initial update\n    const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n    return BUILD.taskQueue ? writeTask(dispatch) : dispatch();\n};\n/**\n * Dispatch initial-render and update lifecycle hooks, enqueuing calls to\n * component lifecycle methods like `componentWillLoad` as well as\n * {@link updateComponent}, which will kick off the virtual DOM re-render.\n *\n * @param hostRef a reference to a host DOM node\n * @param isInitialLoad whether we're on the initial load or not\n * @returns an empty Promise which is used to enqueue a series of operations for\n * the component\n */\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n    const elm = hostRef.$hostElement$;\n    const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n    const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n    // We're going to use this variable together with `enqueue` to implement a\n    // little promise-based queue. We start out with it `undefined`. When we add\n    // the first function to the queue we'll set this variable to be that\n    // function's return value. When we attempt to add subsequent values to the\n    // queue we'll check that value and, if it was a `Promise`, we'll then chain\n    // the new function off of that `Promise` using `.then()`. This will give our\n    // queue two nice properties:\n    //\n    // 1. If all functions added to the queue are synchronous they'll be called\n    //    synchronously right away.\n    // 2. If all functions added to the queue are asynchronous they'll all be\n    //    called in order after `dispatchHooks` exits.\n    let maybePromise;\n    if (isInitialLoad) {\n        if (BUILD.lazyLoad && BUILD.hostListener) {\n            hostRef.$flags$ |= 256 /* HOST_FLAGS.isListenReady */;\n            if (hostRef.$queuedListeners$) {\n                hostRef.$queuedListeners$.map(([methodName, event]) => safeCall(instance, methodName, event));\n                hostRef.$queuedListeners$ = undefined;\n            }\n        }\n        emitLifecycleEvent(elm, 'componentWillLoad');\n        if (BUILD.cmpWillLoad) {\n            // If `componentWillLoad` returns a `Promise` then we want to wait on\n            // whatever's going on in that `Promise` before we launch into\n            // rendering the component, doing other lifecycle stuff, etc. So\n            // in that case we assign the returned promise to the variable we\n            // declared above to hold a possible 'queueing' Promise\n            maybePromise = safeCall(instance, 'componentWillLoad');\n        }\n    }\n    else {\n        emitLifecycleEvent(elm, 'componentWillUpdate');\n        if (BUILD.cmpWillUpdate) {\n            // Like `componentWillLoad` above, we allow Stencil component\n            // authors to return a `Promise` from this lifecycle callback, and\n            // we specify that our runtime will wait for that `Promise` to\n            // resolve before the component re-renders. So if the method\n            // returns a `Promise` we need to keep it around!\n            maybePromise = safeCall(instance, 'componentWillUpdate');\n        }\n    }\n    emitLifecycleEvent(elm, 'componentWillRender');\n    if (BUILD.cmpWillRender) {\n        maybePromise = enqueue(maybePromise, () => safeCall(instance, 'componentWillRender'));\n    }\n    endSchedule();\n    return enqueue(maybePromise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\n/**\n * This function uses a Promise to implement a simple first-in, first-out queue\n * of functions to be called.\n *\n * The queue is ordered on the basis of the first argument. If it's\n * `undefined`, then nothing is on the queue yet, so the provided function can\n * be called synchronously (although note that this function may return a\n * `Promise`). The idea is that then the return value of that enqueueing\n * operation is kept around, so that if it was a `Promise` then subsequent\n * functions can be enqueued by calling this function again with that `Promise`\n * as the first argument.\n *\n * @param maybePromise either a `Promise` which should resolve before the next function is called or an 'empty' sentinel\n * @param fn a function to enqueue\n * @returns either a `Promise` or the return value of the provided function\n */\nconst enqueue = (maybePromise, fn) => isPromisey(maybePromise) ? maybePromise.then(fn) : fn();\n/**\n * Check that a value is a `Promise`. To check, we first see if the value is an\n * instance of the `Promise` global. In a few circumstances, in particular if\n * the global has been overwritten, this is could be misleading, so we also do\n * a little 'duck typing' check to see if the `.then` property of the value is\n * defined and a function.\n *\n * @param maybePromise it might be a promise!\n * @returns whether it is or not\n */\nconst isPromisey = (maybePromise) => maybePromise instanceof Promise ||\n    (maybePromise && maybePromise.then && typeof maybePromise.then === 'function');\n/**\n * Update a component given reference to its host elements and so on.\n *\n * @param hostRef an object containing references to the element's host node,\n * VDom nodes, and other metadata\n * @param instance a reference to the underlying host element where it will be\n * rendered\n * @param isInitialLoad whether or not this function is being called as part of\n * the first render cycle\n */\nconst updateComponent = async (hostRef, instance, isInitialLoad) => {\n    var _a;\n    const elm = hostRef.$hostElement$;\n    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n    const rc = elm['s-rc'];\n    if (BUILD.style && isInitialLoad) {\n        // DOM WRITE!\n        attachStyles(hostRef);\n    }\n    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n    if (BUILD.isDev) {\n        hostRef.$flags$ |= 1024 /* HOST_FLAGS.devOnRender */;\n    }\n    if (BUILD.hydrateServerSide) {\n        await callRender(hostRef, instance, elm, isInitialLoad);\n    }\n    else {\n        callRender(hostRef, instance, elm, isInitialLoad);\n    }\n    if (BUILD.isDev) {\n        hostRef.$renderCount$ = hostRef.$renderCount$ === undefined ? 1 : hostRef.$renderCount$ + 1;\n        hostRef.$flags$ &= ~1024 /* HOST_FLAGS.devOnRender */;\n    }\n    if (BUILD.hydrateServerSide) {\n        try {\n            // manually connected child components during server-side hydrate\n            serverSideConnected(elm);\n            if (isInitialLoad) {\n                // using only during server-side hydrate\n                if (hostRef.$cmpMeta$.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n                    elm['s-en'] = '';\n                }\n                else if (hostRef.$cmpMeta$.$flags$ & 2 /* CMP_FLAGS.scopedCssEncapsulation */) {\n                    elm['s-en'] = 'c';\n                }\n            }\n        }\n        catch (e) {\n            consoleError(e, elm);\n        }\n    }\n    if (BUILD.asyncLoading && rc) {\n        // ok, so turns out there are some child host elements\n        // waiting on this parent element to load\n        // let's fire off all update callbacks waiting\n        rc.map((cb) => cb());\n        elm['s-rc'] = undefined;\n    }\n    endRender();\n    endUpdate();\n    if (BUILD.asyncLoading) {\n        const childrenPromises = (_a = elm['s-p']) !== null && _a !== void 0 ? _a : [];\n        const postUpdate = () => postUpdateComponent(hostRef);\n        if (childrenPromises.length === 0) {\n            postUpdate();\n        }\n        else {\n            Promise.all(childrenPromises).then(postUpdate);\n            hostRef.$flags$ |= 4 /* HOST_FLAGS.isWaitingForChildren */;\n            childrenPromises.length = 0;\n        }\n    }\n    else {\n        postUpdateComponent(hostRef);\n    }\n};\n/**\n * Handle making the call to the VDom renderer with the proper context given\n * various build variables\n *\n * @param hostRef an object containing references to the element's host node,\n * VDom nodes, and other metadata\n * @param instance a reference to the underlying host element where it will be\n * rendered\n * @param elm the Host element for the component\n * @param isInitialLoad whether or not this function is being called as part of\n * @returns an empty promise\n */\nconst callRender = (hostRef, instance, elm, isInitialLoad) => {\n    // in order for bundlers to correctly tree-shake the BUILD object\n    // we need to ensure BUILD is not deoptimized within a try/catch\n    // https://rollupjs.org/guide/en/#treeshake tryCatchDeoptimization\n    const allRenderFn = BUILD.allRenderFn ? true : false;\n    const lazyLoad = BUILD.lazyLoad ? true : false;\n    const taskQueue = BUILD.taskQueue ? true : false;\n    const updatable = BUILD.updatable ? true : false;\n    try {\n        renderingRef = instance;\n        /**\n         * minification optimization: `allRenderFn` is `true` if all components have a `render`\n         * method, so we can call the method immediately. If not, check before calling it.\n         */\n        instance = allRenderFn ? instance.render() : instance.render && instance.render();\n        if (updatable && taskQueue) {\n            hostRef.$flags$ &= ~16 /* HOST_FLAGS.isQueuedForUpdate */;\n        }\n        if (updatable || lazyLoad) {\n            hostRef.$flags$ |= 2 /* HOST_FLAGS.hasRendered */;\n        }\n        if (BUILD.hasRenderFn || BUILD.reflect) {\n            if (BUILD.vdomRender || BUILD.reflect) {\n                // looks like we've got child nodes to render into this host element\n                // or we need to update the css class/attrs on the host element\n                // DOM WRITE!\n                if (BUILD.hydrateServerSide) {\n                    return Promise.resolve(instance).then((value) => renderVdom(hostRef, value, isInitialLoad));\n                }\n                else {\n                    renderVdom(hostRef, instance, isInitialLoad);\n                }\n            }\n            else {\n                const shadowRoot = elm.shadowRoot;\n                if (hostRef.$cmpMeta$.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n                    shadowRoot.textContent = instance;\n                }\n                else {\n                    elm.textContent = instance;\n                }\n            }\n        }\n    }\n    catch (e) {\n        consoleError(e, hostRef.$hostElement$);\n    }\n    renderingRef = null;\n    return null;\n};\nconst getRenderingRef = () => renderingRef;\nconst postUpdateComponent = (hostRef) => {\n    const tagName = hostRef.$cmpMeta$.$tagName$;\n    const elm = hostRef.$hostElement$;\n    const endPostUpdate = createTime('postUpdate', tagName);\n    const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    if (BUILD.cmpDidRender) {\n        if (BUILD.isDev) {\n            hostRef.$flags$ |= 1024 /* HOST_FLAGS.devOnRender */;\n        }\n        safeCall(instance, 'componentDidRender');\n        if (BUILD.isDev) {\n            hostRef.$flags$ &= ~1024 /* HOST_FLAGS.devOnRender */;\n        }\n    }\n    emitLifecycleEvent(elm, 'componentDidRender');\n    if (!(hostRef.$flags$ & 64 /* HOST_FLAGS.hasLoadedComponent */)) {\n        hostRef.$flags$ |= 64 /* HOST_FLAGS.hasLoadedComponent */;\n        if (BUILD.asyncLoading && BUILD.cssAnnotations) {\n            // DOM WRITE!\n            addHydratedFlag(elm);\n        }\n        if (BUILD.cmpDidLoad) {\n            if (BUILD.isDev) {\n                hostRef.$flags$ |= 2048 /* HOST_FLAGS.devOnDidLoad */;\n            }\n            safeCall(instance, 'componentDidLoad');\n            if (BUILD.isDev) {\n                hostRef.$flags$ &= ~2048 /* HOST_FLAGS.devOnDidLoad */;\n            }\n        }\n        emitLifecycleEvent(elm, 'componentDidLoad');\n        endPostUpdate();\n        if (BUILD.asyncLoading) {\n            hostRef.$onReadyResolve$(elm);\n            if (!ancestorComponent) {\n                appDidLoad(tagName);\n            }\n        }\n    }\n    else {\n        if (BUILD.cmpDidUpdate) {\n            // we've already loaded this component\n            // fire off the user's componentDidUpdate method (if one was provided)\n            // componentDidUpdate runs AFTER render() has been called\n            // and all child components have finished updating\n            if (BUILD.isDev) {\n                hostRef.$flags$ |= 1024 /* HOST_FLAGS.devOnRender */;\n            }\n            safeCall(instance, 'componentDidUpdate');\n            if (BUILD.isDev) {\n                hostRef.$flags$ &= ~1024 /* HOST_FLAGS.devOnRender */;\n            }\n        }\n        emitLifecycleEvent(elm, 'componentDidUpdate');\n        endPostUpdate();\n    }\n    if (BUILD.method && BUILD.lazyLoad) {\n        hostRef.$onInstanceResolve$(elm);\n    }\n    // load events fire from bottom to top\n    // the deepest elements load first then bubbles up\n    if (BUILD.asyncLoading) {\n        if (hostRef.$onRenderResolve$) {\n            hostRef.$onRenderResolve$();\n            hostRef.$onRenderResolve$ = undefined;\n        }\n        if (hostRef.$flags$ & 512 /* HOST_FLAGS.needsRerender */) {\n            nextTick(() => scheduleUpdate(hostRef, false));\n        }\n        hostRef.$flags$ &= ~(4 /* HOST_FLAGS.isWaitingForChildren */ | 512 /* HOST_FLAGS.needsRerender */);\n    }\n    // ( •_•)\n    // ( •_•)>⌐■-■\n    // (⌐■_■)\n};\nconst forceUpdate = (ref) => {\n    if (BUILD.updatable && (Build.isBrowser || Build.isTesting)) {\n        const hostRef = getHostRef(ref);\n        const isConnected = hostRef.$hostElement$.isConnected;\n        if (isConnected &&\n            (hostRef.$flags$ & (2 /* HOST_FLAGS.hasRendered */ | 16 /* HOST_FLAGS.isQueuedForUpdate */)) === 2 /* HOST_FLAGS.hasRendered */) {\n            scheduleUpdate(hostRef, false);\n        }\n        // Returns \"true\" when the forced update was successfully scheduled\n        return isConnected;\n    }\n    return false;\n};\nconst appDidLoad = (who) => {\n    // on appload\n    // we have finish the first big initial render\n    if (BUILD.cssAnnotations) {\n        addHydratedFlag(doc.documentElement);\n    }\n    if (BUILD.asyncQueue) {\n        plt.$flags$ |= 2 /* PLATFORM_FLAGS.appLoaded */;\n    }\n    nextTick(() => emitEvent(win, 'appload', { detail: { namespace: NAMESPACE } }));\n    if (BUILD.profile && performance.measure) {\n        performance.measure(`[Stencil] ${NAMESPACE} initial load (by ${who})`, 'st:app:start');\n    }\n};\n/**\n * Allows to safely call a method, e.g. `componentDidLoad`, on an instance,\n * e.g. custom element node. If a build figures out that e.g. no component\n * has a `componentDidLoad` method, the instance method gets removed from the\n * output bundle and this function returns `undefined`.\n * @param instance any object that may or may not contain methods\n * @param method method name\n * @param arg single arbitrary argument\n * @returns result of method call if it exists, otherwise `undefined`\n */\nconst safeCall = (instance, method, arg) => {\n    if (instance && instance[method]) {\n        try {\n            return instance[method](arg);\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    return undefined;\n};\n/**\n * For debugging purposes as `BUILD.lifecycleDOMEvents` is `false` by default and will\n * get removed by the compiler. Used for timing events to see how long they take.\n * @param elm the target of the Event\n * @param lifecycleName name of the event\n */\nconst emitLifecycleEvent = (elm, lifecycleName) => {\n    if (BUILD.lifecycleDOMEvents) {\n        emitEvent(elm, 'stencil_' + lifecycleName, {\n            bubbles: true,\n            composed: true,\n            detail: {\n                namespace: NAMESPACE,\n            },\n        });\n    }\n};\nconst addHydratedFlag = (elm) => BUILD.hydratedClass\n    ? elm.classList.add('hydrated')\n    : BUILD.hydratedAttribute\n        ? elm.setAttribute('hydrated', '')\n        : undefined;\nconst serverSideConnected = (elm) => {\n    const children = elm.children;\n    if (children != null) {\n        for (let i = 0, ii = children.length; i < ii; i++) {\n            const childElm = children[i];\n            if (typeof childElm.connectedCallback === 'function') {\n                childElm.connectedCallback();\n            }\n            serverSideConnected(childElm);\n        }\n    }\n};\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n    // check our new property value against our internal value\n    const hostRef = getHostRef(ref);\n    const elm = BUILD.lazyLoad ? hostRef.$hostElement$ : ref;\n    const oldVal = hostRef.$instanceValues$.get(propName);\n    const flags = hostRef.$flags$;\n    const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n    newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n    // explicitly check for NaN on both sides, as `NaN === NaN` is always false\n    const areBothNaN = Number.isNaN(oldVal) && Number.isNaN(newVal);\n    const didValueChange = newVal !== oldVal && !areBothNaN;\n    if ((!BUILD.lazyLoad || !(flags & 8 /* HOST_FLAGS.isConstructingInstance */) || oldVal === undefined) && didValueChange) {\n        // gadzooks! the property's value has changed!!\n        // set our new value!\n        hostRef.$instanceValues$.set(propName, newVal);\n        if (BUILD.isDev) {\n            if (hostRef.$flags$ & 1024 /* HOST_FLAGS.devOnRender */) {\n                consoleDevWarn(`The state/prop \"${propName}\" changed during rendering. This can potentially lead to infinite-loops and other bugs.`, '\\nElement', elm, '\\nNew value', newVal, '\\nOld value', oldVal);\n            }\n            else if (hostRef.$flags$ & 2048 /* HOST_FLAGS.devOnDidLoad */) {\n                consoleDevWarn(`The state/prop \"${propName}\" changed during \"componentDidLoad()\", this triggers extra re-renders, try to setup on \"componentWillLoad()\"`, '\\nElement', elm, '\\nNew value', newVal, '\\nOld value', oldVal);\n            }\n        }\n        if (!BUILD.lazyLoad || instance) {\n            // get an array of method names of watch functions to call\n            if (BUILD.watchCallback && cmpMeta.$watchers$ && flags & 128 /* HOST_FLAGS.isWatchReady */) {\n                const watchMethods = cmpMeta.$watchers$[propName];\n                if (watchMethods) {\n                    // this instance is watching for when this property changed\n                    watchMethods.map((watchMethodName) => {\n                        try {\n                            // fire off each of the watch methods that are watching this property\n                            instance[watchMethodName](newVal, oldVal, propName);\n                        }\n                        catch (e) {\n                            consoleError(e, elm);\n                        }\n                    });\n                }\n            }\n            if (BUILD.updatable &&\n                (flags & (2 /* HOST_FLAGS.hasRendered */ | 16 /* HOST_FLAGS.isQueuedForUpdate */)) === 2 /* HOST_FLAGS.hasRendered */) {\n                if (BUILD.cmpShouldUpdate && instance.componentShouldUpdate) {\n                    if (instance.componentShouldUpdate(newVal, oldVal, propName) === false) {\n                        return;\n                    }\n                }\n                // looks like this value actually changed, so we've got work to do!\n                // but only if we've already rendered, otherwise just chill out\n                // queue that we need to do an update, but don't worry about queuing\n                // up millions cuz this function ensures it only runs once\n                scheduleUpdate(hostRef, false);\n            }\n        }\n    }\n};\n/**\n * Attach a series of runtime constructs to a compiled Stencil component\n * constructor, including getters and setters for the `@Prop` and `@State`\n * decorators, callbacks for when attributes change, and so on.\n *\n * @param Cstr the constructor for a component that we need to process\n * @param cmpMeta metadata collected previously about the component\n * @param flags a number used to store a series of bit flags\n * @returns a reference to the same constructor passed in (but now mutated)\n */\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n    var _a;\n    const prototype = Cstr.prototype;\n    /**\n     * proxy form associated custom element lifecycle callbacks\n     * @ref https://web.dev/articles/more-capable-form-controls#lifecycle_callbacks\n     */\n    if (BUILD.formAssociated && cmpMeta.$flags$ & 64 /* CMP_FLAGS.formAssociated */ && flags & 1 /* PROXY_FLAGS.isElementConstructor */) {\n        FORM_ASSOCIATED_CUSTOM_ELEMENT_CALLBACKS.forEach((cbName) => Object.defineProperty(prototype, cbName, {\n            value(...args) {\n                const hostRef = getHostRef(this);\n                const elm = BUILD.lazyLoad ? hostRef.$hostElement$ : this;\n                const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n                if (!instance) {\n                    hostRef.$onReadyPromise$.then((instance) => { var _a; return (_a = instance[cbName]) === null || _a === void 0 ? void 0 : _a.call(instance, ...args); });\n                }\n                else {\n                    const cb = instance[cbName];\n                    typeof cb === 'function' && cb(...args);\n                }\n            },\n        }));\n    }\n    if (BUILD.member && cmpMeta.$members$) {\n        if (BUILD.watchCallback && Cstr.watchers) {\n            cmpMeta.$watchers$ = Cstr.watchers;\n        }\n        // It's better to have a const than two Object.entries()\n        const members = Object.entries(cmpMeta.$members$);\n        members.map(([memberName, [memberFlags]]) => {\n            if ((BUILD.prop || BUILD.state) &&\n                (memberFlags & 31 /* MEMBER_FLAGS.Prop */ ||\n                    ((!BUILD.lazyLoad || flags & 2 /* PROXY_FLAGS.proxyState */) && memberFlags & 32 /* MEMBER_FLAGS.State */))) {\n                // proxyComponent - prop\n                Object.defineProperty(prototype, memberName, {\n                    get() {\n                        // proxyComponent, get value\n                        return getValue(this, memberName);\n                    },\n                    set(newValue) {\n                        // only during dev time\n                        if (BUILD.isDev) {\n                            const ref = getHostRef(this);\n                            if (\n                            // we are proxying the instance (not element)\n                            (flags & 1 /* PROXY_FLAGS.isElementConstructor */) === 0 &&\n                                // the element is not constructing\n                                (ref && ref.$flags$ & 8 /* HOST_FLAGS.isConstructingInstance */) === 0 &&\n                                // the member is a prop\n                                (memberFlags & 31 /* MEMBER_FLAGS.Prop */) !== 0 &&\n                                // the member is not mutable\n                                (memberFlags & 1024 /* MEMBER_FLAGS.Mutable */) === 0) {\n                                consoleDevWarn(`@Prop() \"${memberName}\" on <${cmpMeta.$tagName$}> is immutable but was modified from within the component.\\nMore information: https://stenciljs.com/docs/properties#prop-mutability`);\n                            }\n                        }\n                        // proxyComponent, set value\n                        setValue(this, memberName, newValue, cmpMeta);\n                    },\n                    configurable: true,\n                    enumerable: true,\n                });\n            }\n            else if (BUILD.lazyLoad &&\n                BUILD.method &&\n                flags & 1 /* PROXY_FLAGS.isElementConstructor */ &&\n                memberFlags & 64 /* MEMBER_FLAGS.Method */) {\n                // proxyComponent - method\n                Object.defineProperty(prototype, memberName, {\n                    value(...args) {\n                        var _a;\n                        const ref = getHostRef(this);\n                        return (_a = ref === null || ref === void 0 ? void 0 : ref.$onInstancePromise$) === null || _a === void 0 ? void 0 : _a.then(() => { var _a; return (_a = ref.$lazyInstance$) === null || _a === void 0 ? void 0 : _a[memberName](...args); });\n                    },\n                });\n            }\n        });\n        if (BUILD.observeAttribute && (!BUILD.lazyLoad || flags & 1 /* PROXY_FLAGS.isElementConstructor */)) {\n            const attrNameToPropName = new Map();\n            prototype.attributeChangedCallback = function (attrName, oldValue, newValue) {\n                plt.jmp(() => {\n                    var _a;\n                    const propName = attrNameToPropName.get(attrName);\n                    //  In a web component lifecycle the attributeChangedCallback runs prior to connectedCallback\n                    //  in the case where an attribute was set inline.\n                    //  ```html\n                    //    <my-component some-attribute=\"some-value\"></my-component>\n                    //  ```\n                    //\n                    //  There is an edge case where a developer sets the attribute inline on a custom element and then\n                    //  programmatically changes it before it has been upgraded as shown below:\n                    //\n                    //  ```html\n                    //    <!-- this component has _not_ been upgraded yet -->\n                    //    <my-component id=\"test\" some-attribute=\"some-value\"></my-component>\n                    //    <script>\n                    //      // grab non-upgraded component\n                    //      el = document.querySelector(\"#test\");\n                    //      el.someAttribute = \"another-value\";\n                    //      // upgrade component\n                    //      customElements.define('my-component', MyComponent);\n                    //    </script>\n                    //  ```\n                    //  In this case if we do not un-shadow here and use the value of the shadowing property, attributeChangedCallback\n                    //  will be called with `newValue = \"some-value\"` and will set the shadowed property (this.someAttribute = \"another-value\")\n                    //  to the value that was set inline i.e. \"some-value\" from above example. When\n                    //  the connectedCallback attempts to un-shadow it will use \"some-value\" as the initial value rather than \"another-value\"\n                    //\n                    //  The case where the attribute was NOT set inline but was not set programmatically shall be handled/un-shadowed\n                    //  by connectedCallback as this attributeChangedCallback will not fire.\n                    //\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n                    //\n                    //  TODO(STENCIL-16) we should think about whether or not we actually want to be reflecting the attributes to\n                    //  properties here given that this goes against best practices outlined here\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#avoid-reentrancy\n                    if (this.hasOwnProperty(propName)) {\n                        newValue = this[propName];\n                        delete this[propName];\n                    }\n                    else if (prototype.hasOwnProperty(propName) &&\n                        typeof this[propName] === 'number' &&\n                        this[propName] == newValue) {\n                        // if the propName exists on the prototype of `Cstr`, this update may be a result of Stencil using native\n                        // APIs to reflect props as attributes. Calls to `setAttribute(someElement, propName)` will result in\n                        // `propName` to be converted to a `DOMString`, which may not be what we want for other primitive props.\n                        return;\n                    }\n                    else if (propName == null) {\n                        // At this point we should know this is not a \"member\", so we can treat it like watching an attribute\n                        // on a vanilla web component\n                        const hostRef = getHostRef(this);\n                        const flags = hostRef === null || hostRef === void 0 ? void 0 : hostRef.$flags$;\n                        // We only want to trigger the callback(s) if:\n                        // 1. The instance is ready\n                        // 2. The watchers are ready\n                        // 3. The value has changed\n                        if (flags &&\n                            !(flags & 8 /* HOST_FLAGS.isConstructingInstance */) &&\n                            flags & 128 /* HOST_FLAGS.isWatchReady */ &&\n                            newValue !== oldValue) {\n                            const elm = BUILD.lazyLoad ? hostRef.$hostElement$ : this;\n                            const instance = BUILD.lazyLoad ? hostRef.$lazyInstance$ : elm;\n                            const entry = (_a = cmpMeta.$watchers$) === null || _a === void 0 ? void 0 : _a[attrName];\n                            entry === null || entry === void 0 ? void 0 : entry.forEach((callbackName) => {\n                                if (instance[callbackName] != null) {\n                                    instance[callbackName].call(instance, newValue, oldValue, attrName);\n                                }\n                            });\n                        }\n                        return;\n                    }\n                    this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\n                });\n            };\n            // Create an array of attributes to observe\n            // This list in comprised of all strings used within a `@Watch()` decorator\n            // on a component as well as any Stencil-specific \"members\" (`@Prop()`s and `@State()`s).\n            // As such, there is no way to guarantee type-safety here that a user hasn't entered\n            // an invalid attribute.\n            Cstr.observedAttributes = Array.from(new Set([\n                ...Object.keys((_a = cmpMeta.$watchers$) !== null && _a !== void 0 ? _a : {}),\n                ...members\n                    .filter(([_, m]) => m[0] & 15 /* MEMBER_FLAGS.HasAttribute */)\n                    .map(([propName, m]) => {\n                    var _a;\n                    const attrName = m[1] || propName;\n                    attrNameToPropName.set(attrName, propName);\n                    if (BUILD.reflect && m[0] & 512 /* MEMBER_FLAGS.ReflectAttr */) {\n                        (_a = cmpMeta.$attrsToReflect$) === null || _a === void 0 ? void 0 : _a.push([propName, attrName]);\n                    }\n                    return attrName;\n                }),\n            ]));\n        }\n    }\n    return Cstr;\n};\n/**\n * Initialize a Stencil component given a reference to its host element, its\n * runtime bookkeeping data structure, runtime metadata about the component,\n * and (optionally) an HMR version ID.\n *\n * @param elm a host element\n * @param hostRef the element's runtime bookkeeping object\n * @param cmpMeta runtime metadata for the Stencil component\n * @param hmrVersionId an (optional) HMR version ID\n */\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId) => {\n    let Cstr;\n    // initializeComponent\n    if ((hostRef.$flags$ & 32 /* HOST_FLAGS.hasInitializedComponent */) === 0) {\n        // Let the runtime know that the component has been initialized\n        hostRef.$flags$ |= 32 /* HOST_FLAGS.hasInitializedComponent */;\n        if (BUILD.lazyLoad || BUILD.hydrateClientSide) {\n            // lazy loaded components\n            // request the component's implementation to be\n            // wired up with the host element\n            Cstr = loadModule(cmpMeta, hostRef, hmrVersionId);\n            if (Cstr.then) {\n                // Await creates a micro-task avoid if possible\n                const endLoad = uniqueTime(`st:load:${cmpMeta.$tagName$}:${hostRef.$modeName$}`, `[Stencil] Load module for <${cmpMeta.$tagName$}>`);\n                Cstr = await Cstr;\n                endLoad();\n            }\n            if ((BUILD.isDev || BUILD.isDebug) && !Cstr) {\n                throw new Error(`Constructor for \"${cmpMeta.$tagName$}#${hostRef.$modeName$}\" was not found`);\n            }\n            if (BUILD.member && !Cstr.isProxied) {\n                // we've never proxied this Constructor before\n                // let's add the getters/setters to its prototype before\n                // the first time we create an instance of the implementation\n                if (BUILD.watchCallback) {\n                    cmpMeta.$watchers$ = Cstr.watchers;\n                }\n                proxyComponent(Cstr, cmpMeta, 2 /* PROXY_FLAGS.proxyState */);\n                Cstr.isProxied = true;\n            }\n            const endNewInstance = createTime('createInstance', cmpMeta.$tagName$);\n            // ok, time to construct the instance\n            // but let's keep track of when we start and stop\n            // so that the getters/setters don't incorrectly step on data\n            if (BUILD.member) {\n                hostRef.$flags$ |= 8 /* HOST_FLAGS.isConstructingInstance */;\n            }\n            // construct the lazy-loaded component implementation\n            // passing the hostRef is very important during\n            // construction in order to directly wire together the\n            // host element and the lazy-loaded instance\n            try {\n                new Cstr(hostRef);\n            }\n            catch (e) {\n                consoleError(e);\n            }\n            if (BUILD.member) {\n                hostRef.$flags$ &= ~8 /* HOST_FLAGS.isConstructingInstance */;\n            }\n            if (BUILD.watchCallback) {\n                hostRef.$flags$ |= 128 /* HOST_FLAGS.isWatchReady */;\n            }\n            endNewInstance();\n            fireConnectedCallback(hostRef.$lazyInstance$);\n        }\n        else {\n            // sync constructor component\n            Cstr = elm.constructor;\n            // wait for the CustomElementRegistry to mark the component as ready before setting `isWatchReady`. Otherwise,\n            // watchers may fire prematurely if `customElements.get()`/`customElements.whenDefined()` resolves _before_\n            // Stencil has completed instantiating the component.\n            customElements.whenDefined(cmpMeta.$tagName$).then(() => (hostRef.$flags$ |= 128 /* HOST_FLAGS.isWatchReady */));\n        }\n        if (BUILD.style && Cstr.style) {\n            // this component has styles but we haven't registered them yet\n            let style = Cstr.style;\n            if (BUILD.mode && typeof style !== 'string') {\n                style = style[(hostRef.$modeName$ = computeMode(elm))];\n                if (BUILD.hydrateServerSide && hostRef.$modeName$) {\n                    elm.setAttribute('s-mode', hostRef.$modeName$);\n                }\n            }\n            const scopeId = getScopeId(cmpMeta, hostRef.$modeName$);\n            if (!styles.has(scopeId)) {\n                const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n                if (!BUILD.hydrateServerSide &&\n                    BUILD.shadowDom &&\n                    // TODO(STENCIL-854): Remove code related to legacy shadowDomShim field\n                    BUILD.shadowDomShim &&\n                    cmpMeta.$flags$ & 8 /* CMP_FLAGS.needsShadowDomShim */) {\n                    style = await import('./shadow-css.js').then((m) => m.scopeCss(style, scopeId, false));\n                }\n                registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */));\n                endRegisterStyles();\n            }\n        }\n    }\n    // we've successfully created a lazy instance\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    const schedule = () => scheduleUpdate(hostRef, true);\n    if (BUILD.asyncLoading && ancestorComponent && ancestorComponent['s-rc']) {\n        // this is the initial load and this component it has an ancestor component\n        // but the ancestor component has NOT fired its will update lifecycle yet\n        // so let's just cool our jets and wait for the ancestor to continue first\n        // this will get fired off when the ancestor component\n        // finally gets around to rendering its lazy self\n        // fire off the initial update\n        ancestorComponent['s-rc'].push(schedule);\n    }\n    else {\n        schedule();\n    }\n};\nconst fireConnectedCallback = (instance) => {\n    if (BUILD.lazyLoad && BUILD.connectedCallback) {\n        safeCall(instance, 'connectedCallback');\n    }\n};\nconst connectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const cmpMeta = hostRef.$cmpMeta$;\n        const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n        if (BUILD.hostListenerTargetParent) {\n            // only run if we have listeners being attached to a parent\n            addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, true);\n        }\n        if (!(hostRef.$flags$ & 1 /* HOST_FLAGS.hasConnected */)) {\n            // first time this component has connected\n            hostRef.$flags$ |= 1 /* HOST_FLAGS.hasConnected */;\n            let hostId;\n            if (BUILD.hydrateClientSide) {\n                hostId = elm.getAttribute(HYDRATE_ID);\n                if (hostId) {\n                    if (BUILD.shadowDom && supportsShadow && cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n                        const scopeId = BUILD.mode\n                            ? addStyle(elm.shadowRoot, cmpMeta, elm.getAttribute('s-mode'))\n                            : addStyle(elm.shadowRoot, cmpMeta);\n                        elm.classList.remove(scopeId + '-h', scopeId + '-s');\n                    }\n                    initializeClientHydrate(elm, cmpMeta.$tagName$, hostId, hostRef);\n                }\n            }\n            if (BUILD.slotRelocation && !hostId) {\n                // initUpdate\n                // if the slot polyfill is required we'll need to put some nodes\n                // in here to act as original content anchors as we move nodes around\n                // host element has been connected to the DOM\n                if (BUILD.hydrateServerSide ||\n                    ((BUILD.slot || BUILD.shadowDom) &&\n                        // TODO(STENCIL-854): Remove code related to legacy shadowDomShim field\n                        cmpMeta.$flags$ & (4 /* CMP_FLAGS.hasSlotRelocation */ | 8 /* CMP_FLAGS.needsShadowDomShim */))) {\n                    setContentReference(elm);\n                }\n            }\n            if (BUILD.asyncLoading) {\n                // find the first ancestor component (if there is one) and register\n                // this component as one of the actively loading child components for its ancestor\n                let ancestorComponent = elm;\n                while ((ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host)) {\n                    // climb up the ancestors looking for the first\n                    // component that hasn't finished its lifecycle update yet\n                    if ((BUILD.hydrateClientSide &&\n                        ancestorComponent.nodeType === 1 /* NODE_TYPE.ElementNode */ &&\n                        ancestorComponent.hasAttribute('s-id') &&\n                        ancestorComponent['s-p']) ||\n                        ancestorComponent['s-p']) {\n                        // we found this components first ancestor component\n                        // keep a reference to this component's ancestor component\n                        attachToAncestor(hostRef, (hostRef.$ancestorComponent$ = ancestorComponent));\n                        break;\n                    }\n                }\n            }\n            // Lazy properties\n            // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n            if (BUILD.prop && !BUILD.hydrateServerSide && cmpMeta.$members$) {\n                Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n                    if (memberFlags & 31 /* MEMBER_FLAGS.Prop */ && elm.hasOwnProperty(memberName)) {\n                        const value = elm[memberName];\n                        delete elm[memberName];\n                        elm[memberName] = value;\n                    }\n                });\n            }\n            if (BUILD.initializeNextTick) {\n                // connectedCallback, taskQueue, initialLoad\n                // angular sets attribute AFTER connectCallback\n                // https://github.com/angular/angular/issues/18909\n                // https://github.com/angular/angular/issues/19940\n                nextTick(() => initializeComponent(elm, hostRef, cmpMeta));\n            }\n            else {\n                initializeComponent(elm, hostRef, cmpMeta);\n            }\n        }\n        else {\n            // not the first time this has connected\n            // reattach any event listeners to the host\n            // since they would have been removed when disconnected\n            addHostEventListeners(elm, hostRef, cmpMeta.$listeners$, false);\n            // fire off connectedCallback() on component instance\n            if (hostRef === null || hostRef === void 0 ? void 0 : hostRef.$lazyInstance$) {\n                fireConnectedCallback(hostRef.$lazyInstance$);\n            }\n            else if (hostRef === null || hostRef === void 0 ? void 0 : hostRef.$onReadyPromise$) {\n                hostRef.$onReadyPromise$.then(() => fireConnectedCallback(hostRef.$lazyInstance$));\n            }\n        }\n        endConnected();\n    }\n};\nconst setContentReference = (elm) => {\n    // only required when we're NOT using native shadow dom (slot)\n    // or this browser doesn't support native shadow dom\n    // and this host element was NOT created with SSR\n    // let's pick out the inner content for slot projection\n    // create a node to represent where the original\n    // content was first placed, which is useful later on\n    const contentRefElm = (elm['s-cr'] = doc.createComment(BUILD.isDebug ? `content-ref (host=${elm.localName})` : ''));\n    contentRefElm['s-cn'] = true;\n    elm.insertBefore(contentRefElm, elm.firstChild);\n};\nconst disconnectInstance = (instance) => {\n    if (BUILD.lazyLoad && BUILD.disconnectedCallback) {\n        safeCall(instance, 'disconnectedCallback');\n    }\n    if (BUILD.cmpDidUnload) {\n        safeCall(instance, 'componentDidUnload');\n    }\n};\nconst disconnectedCallback = async (elm) => {\n    if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        if (BUILD.hostListener) {\n            if (hostRef.$rmListeners$) {\n                hostRef.$rmListeners$.map((rmListener) => rmListener());\n                hostRef.$rmListeners$ = undefined;\n            }\n        }\n        if (!BUILD.lazyLoad) {\n            disconnectInstance(elm);\n        }\n        else if (hostRef === null || hostRef === void 0 ? void 0 : hostRef.$lazyInstance$) {\n            disconnectInstance(hostRef.$lazyInstance$);\n        }\n        else if (hostRef === null || hostRef === void 0 ? void 0 : hostRef.$onReadyPromise$) {\n            hostRef.$onReadyPromise$.then(() => disconnectInstance(hostRef.$lazyInstance$));\n        }\n    }\n};\nconst patchPseudoShadowDom = (hostElementPrototype, descriptorPrototype) => {\n    patchCloneNode(hostElementPrototype);\n    patchSlotAppendChild(hostElementPrototype);\n    patchSlotAppend(hostElementPrototype);\n    patchSlotPrepend(hostElementPrototype);\n    patchSlotInsertAdjacentElement(hostElementPrototype);\n    patchSlotInsertAdjacentHTML(hostElementPrototype);\n    patchSlotInsertAdjacentText(hostElementPrototype);\n    patchTextContent(hostElementPrototype, descriptorPrototype);\n    patchChildSlotNodes(hostElementPrototype, descriptorPrototype);\n};\nconst patchCloneNode = (HostElementPrototype) => {\n    const orgCloneNode = HostElementPrototype.cloneNode;\n    HostElementPrototype.cloneNode = function (deep) {\n        const srcNode = this;\n        const isShadowDom = BUILD.shadowDom ? srcNode.shadowRoot && supportsShadow : false;\n        const clonedNode = orgCloneNode.call(srcNode, isShadowDom ? deep : false);\n        if (BUILD.slot && !isShadowDom && deep) {\n            let i = 0;\n            let slotted, nonStencilNode;\n            const stencilPrivates = [\n                's-id',\n                's-cr',\n                's-lr',\n                's-rc',\n                's-sc',\n                's-p',\n                's-cn',\n                's-sr',\n                's-sn',\n                's-hn',\n                's-ol',\n                's-nr',\n                's-si',\n            ];\n            for (; i < srcNode.childNodes.length; i++) {\n                slotted = srcNode.childNodes[i]['s-nr'];\n                nonStencilNode = stencilPrivates.every((privateField) => !srcNode.childNodes[i][privateField]);\n                if (slotted) {\n                    if (BUILD.appendChildSlotFix && clonedNode.__appendChild) {\n                        clonedNode.__appendChild(slotted.cloneNode(true));\n                    }\n                    else {\n                        clonedNode.appendChild(slotted.cloneNode(true));\n                    }\n                }\n                if (nonStencilNode) {\n                    clonedNode.appendChild(srcNode.childNodes[i].cloneNode(true));\n                }\n            }\n        }\n        return clonedNode;\n    };\n};\nconst patchSlotAppendChild = (HostElementPrototype) => {\n    HostElementPrototype.__appendChild = HostElementPrototype.appendChild;\n    HostElementPrototype.appendChild = function (newChild) {\n        const slotName = (newChild['s-sn'] = getSlotName(newChild));\n        const slotNode = getHostSlotNode(this.childNodes, slotName);\n        if (slotNode) {\n            const slotChildNodes = getHostSlotChildNodes(slotNode, slotName);\n            const appendAfter = slotChildNodes[slotChildNodes.length - 1];\n            return appendAfter.parentNode.insertBefore(newChild, appendAfter.nextSibling);\n        }\n        return this.__appendChild(newChild);\n    };\n};\n/**\n * Patches the `prepend` method for a slotted node inside a scoped component.\n *\n * @param HostElementPrototype the `Element` to be patched\n */\nconst patchSlotPrepend = (HostElementPrototype) => {\n    const originalPrepend = HostElementPrototype.prepend;\n    HostElementPrototype.prepend = function (...newChildren) {\n        newChildren.forEach((newChild) => {\n            if (typeof newChild === 'string') {\n                newChild = this.ownerDocument.createTextNode(newChild);\n            }\n            const slotName = (newChild['s-sn'] = getSlotName(newChild));\n            const slotNode = getHostSlotNode(this.childNodes, slotName);\n            if (slotNode) {\n                const slotPlaceholder = document.createTextNode('');\n                slotPlaceholder['s-nr'] = newChild;\n                slotNode['s-cr'].parentNode.__appendChild(slotPlaceholder);\n                newChild['s-ol'] = slotPlaceholder;\n                const slotChildNodes = getHostSlotChildNodes(slotNode, slotName);\n                const appendAfter = slotChildNodes[0];\n                return appendAfter.parentNode.insertBefore(newChild, appendAfter.nextSibling);\n            }\n            if (newChild.nodeType === 1 && !!newChild.getAttribute('slot')) {\n                newChild.hidden = true;\n            }\n            return originalPrepend.call(this, newChild);\n        });\n    };\n};\n/**\n * Patches the `append` method for a slotted node inside a scoped component. The patched method uses\n * `appendChild` under-the-hood while creating text nodes for any new children that passed as bare strings.\n *\n * @param HostElementPrototype the `Element` to be patched\n */\nconst patchSlotAppend = (HostElementPrototype) => {\n    HostElementPrototype.append = function (...newChildren) {\n        newChildren.forEach((newChild) => {\n            if (typeof newChild === 'string') {\n                newChild = this.ownerDocument.createTextNode(newChild);\n            }\n            this.appendChild(newChild);\n        });\n    };\n};\n/**\n * Patches the `insertAdjacentHTML` method for a slotted node inside a scoped component. Specifically,\n * we only need to patch the behavior for the specific `beforeend` and `afterbegin` positions so the element\n * gets inserted into the DOM in the correct location.\n *\n * @param HostElementPrototype the `Element` to be patched\n */\nconst patchSlotInsertAdjacentHTML = (HostElementPrototype) => {\n    const originalInsertAdjacentHtml = HostElementPrototype.insertAdjacentHTML;\n    HostElementPrototype.insertAdjacentHTML = function (position, text) {\n        if (position !== 'afterbegin' && position !== 'beforeend') {\n            return originalInsertAdjacentHtml.call(this, position, text);\n        }\n        const container = this.ownerDocument.createElement('_');\n        let node;\n        container.innerHTML = text;\n        if (position === 'afterbegin') {\n            while ((node = container.firstChild)) {\n                this.prepend(node);\n            }\n        }\n        else if (position === 'beforeend') {\n            while ((node = container.firstChild)) {\n                this.append(node);\n            }\n        }\n    };\n};\n/**\n * Patches the `insertAdjacentText` method for a slotted node inside a scoped component. Specifically,\n * we only need to patch the behavior for the specific `beforeend` and `afterbegin` positions so the text node\n * gets inserted into the DOM in the correct location.\n *\n * @param HostElementPrototype the `Element` to be patched\n */\nconst patchSlotInsertAdjacentText = (HostElementPrototype) => {\n    HostElementPrototype.insertAdjacentText = function (position, text) {\n        this.insertAdjacentHTML(position, text);\n    };\n};\n/**\n * Patches the `insertAdjacentElement` method for a slotted node inside a scoped component. Specifically,\n * we only need to patch the behavior for the specific `beforeend` and `afterbegin` positions so the element\n * gets inserted into the DOM in the correct location.\n *\n * @param HostElementPrototype the `Element` to be patched\n */\nconst patchSlotInsertAdjacentElement = (HostElementPrototype) => {\n    const originalInsertAdjacentElement = HostElementPrototype.insertAdjacentElement;\n    HostElementPrototype.insertAdjacentElement = function (position, element) {\n        if (position !== 'afterbegin' && position !== 'beforeend') {\n            return originalInsertAdjacentElement.call(this, position, element);\n        }\n        if (position === 'afterbegin') {\n            this.prepend(element);\n            return element;\n        }\n        else if (position === 'beforeend') {\n            this.append(element);\n            return element;\n        }\n        return element;\n    };\n};\n/**\n * Patches the text content of an unnamed slotted node inside a scoped component\n * @param hostElementPrototype the `Element` to be patched\n * @param cmpMeta component runtime metadata used to determine if the component should be patched or not\n */\nconst patchTextContent = (hostElementPrototype, cmpMeta) => {\n    if (BUILD.scoped && cmpMeta.$flags$ & 2 /* CMP_FLAGS.scopedCssEncapsulation */) {\n        const descriptor = Object.getOwnPropertyDescriptor(Node.prototype, 'textContent');\n        Object.defineProperty(hostElementPrototype, '__textContent', descriptor);\n        Object.defineProperty(hostElementPrototype, 'textContent', {\n            get() {\n                var _a;\n                // get the 'default slot', which would be the first slot in a shadow tree (if we were using one), whose name is\n                // the empty string\n                const slotNode = getHostSlotNode(this.childNodes, '');\n                // when a slot node is found, the textContent _may_ be found in the next sibling (text) node, depending on how\n                // nodes were reordered during the vdom render. first try to get the text content from the sibling.\n                if (((_a = slotNode === null || slotNode === void 0 ? void 0 : slotNode.nextSibling) === null || _a === void 0 ? void 0 : _a.nodeType) === 3 /* NODE_TYPES.TEXT_NODE */) {\n                    return slotNode.nextSibling.textContent;\n                }\n                else if (slotNode) {\n                    return slotNode.textContent;\n                }\n                else {\n                    // fallback to the original implementation\n                    return this.__textContent;\n                }\n            },\n            set(value) {\n                var _a;\n                // get the 'default slot', which would be the first slot in a shadow tree (if we were using one), whose name is\n                // the empty string\n                const slotNode = getHostSlotNode(this.childNodes, '');\n                // when a slot node is found, the textContent _may_ need to be placed in the next sibling (text) node,\n                // depending on how nodes were reordered during the vdom render. first try to set the text content on the\n                // sibling.\n                if (((_a = slotNode === null || slotNode === void 0 ? void 0 : slotNode.nextSibling) === null || _a === void 0 ? void 0 : _a.nodeType) === 3 /* NODE_TYPES.TEXT_NODE */) {\n                    slotNode.nextSibling.textContent = value;\n                }\n                else if (slotNode) {\n                    slotNode.textContent = value;\n                }\n                else {\n                    // we couldn't find a slot, but that doesn't mean that there isn't one. if this check ran before the DOM\n                    // loaded, we could have missed it. check for a content reference element on the scoped component and insert\n                    // it there\n                    this.__textContent = value;\n                    const contentRefElm = this['s-cr'];\n                    if (contentRefElm) {\n                        this.insertBefore(contentRefElm, this.firstChild);\n                    }\n                }\n            },\n        });\n    }\n};\nconst patchChildSlotNodes = (elm, cmpMeta) => {\n    class FakeNodeList extends Array {\n        item(n) {\n            return this[n];\n        }\n    }\n    // TODO(STENCIL-854): Remove code related to legacy shadowDomShim field\n    if (cmpMeta.$flags$ & 8 /* CMP_FLAGS.needsShadowDomShim */) {\n        const childNodesFn = elm.__lookupGetter__('childNodes');\n        Object.defineProperty(elm, 'children', {\n            get() {\n                return this.childNodes.map((n) => n.nodeType === 1);\n            },\n        });\n        Object.defineProperty(elm, 'childElementCount', {\n            get() {\n                return elm.children.length;\n            },\n        });\n        Object.defineProperty(elm, 'childNodes', {\n            get() {\n                const childNodes = childNodesFn.call(this);\n                if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0 &&\n                    getHostRef(this).$flags$ & 2 /* HOST_FLAGS.hasRendered */) {\n                    const result = new FakeNodeList();\n                    for (let i = 0; i < childNodes.length; i++) {\n                        const slot = childNodes[i]['s-nr'];\n                        if (slot) {\n                            result.push(slot);\n                        }\n                    }\n                    return result;\n                }\n                return FakeNodeList.from(childNodes);\n            },\n        });\n    }\n};\nconst getSlotName = (node) => node['s-sn'] || (node.nodeType === 1 && node.getAttribute('slot')) || '';\n/**\n * Recursively searches a series of child nodes for a slot with the provided name.\n * @param childNodes the nodes to search for a slot with a specific name.\n * @param slotName the name of the slot to match on.\n * @returns a reference to the slot node that matches the provided name, `null` otherwise\n */\nconst getHostSlotNode = (childNodes, slotName) => {\n    let i = 0;\n    let childNode;\n    for (; i < childNodes.length; i++) {\n        childNode = childNodes[i];\n        if (childNode['s-sr'] && childNode['s-sn'] === slotName) {\n            return childNode;\n        }\n        childNode = getHostSlotNode(childNode.childNodes, slotName);\n        if (childNode) {\n            return childNode;\n        }\n    }\n    return null;\n};\nconst getHostSlotChildNodes = (n, slotName) => {\n    const childNodes = [n];\n    while ((n = n.nextSibling) && n['s-sn'] === slotName) {\n        childNodes.push(n);\n    }\n    return childNodes;\n};\nconst defineCustomElement = (Cstr, compactMeta) => {\n    customElements.define(compactMeta[1], proxyCustomElement(Cstr, compactMeta));\n};\nconst proxyCustomElement = (Cstr, compactMeta) => {\n    const cmpMeta = {\n        $flags$: compactMeta[0],\n        $tagName$: compactMeta[1],\n    };\n    if (BUILD.member) {\n        cmpMeta.$members$ = compactMeta[2];\n    }\n    if (BUILD.hostListener) {\n        cmpMeta.$listeners$ = compactMeta[3];\n    }\n    if (BUILD.watchCallback) {\n        cmpMeta.$watchers$ = Cstr.$watchers$;\n    }\n    if (BUILD.reflect) {\n        cmpMeta.$attrsToReflect$ = [];\n    }\n    if (BUILD.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n        // TODO(STENCIL-854): Remove code related to legacy shadowDomShim field\n        cmpMeta.$flags$ |= 8 /* CMP_FLAGS.needsShadowDomShim */;\n    }\n    // TODO(STENCIL-914): this check and `else` block can go away and be replaced by just `BUILD.scoped` once we\n    // default our pseudo-slot behavior\n    if (BUILD.experimentalSlotFixes && BUILD.scoped) {\n        patchPseudoShadowDom(Cstr.prototype, cmpMeta);\n    }\n    else {\n        if (BUILD.slotChildNodesFix) {\n            patchChildSlotNodes(Cstr.prototype, cmpMeta);\n        }\n        if (BUILD.cloneNodeFix) {\n            patchCloneNode(Cstr.prototype);\n        }\n        if (BUILD.appendChildSlotFix) {\n            patchSlotAppendChild(Cstr.prototype);\n        }\n        if (BUILD.scopedSlotTextContentFix) {\n            patchTextContent(Cstr.prototype, cmpMeta);\n        }\n    }\n    const originalConnectedCallback = Cstr.prototype.connectedCallback;\n    const originalDisconnectedCallback = Cstr.prototype.disconnectedCallback;\n    Object.assign(Cstr.prototype, {\n        __registerHost() {\n            registerHost(this, cmpMeta);\n        },\n        connectedCallback() {\n            connectedCallback(this);\n            if (BUILD.connectedCallback && originalConnectedCallback) {\n                originalConnectedCallback.call(this);\n            }\n        },\n        disconnectedCallback() {\n            disconnectedCallback(this);\n            if (BUILD.disconnectedCallback && originalDisconnectedCallback) {\n                originalDisconnectedCallback.call(this);\n            }\n        },\n        __attachShadow() {\n            if (supportsShadow) {\n                if (BUILD.shadowDelegatesFocus) {\n                    this.attachShadow({\n                        mode: 'open',\n                        delegatesFocus: !!(cmpMeta.$flags$ & 16 /* CMP_FLAGS.shadowDelegatesFocus */),\n                    });\n                }\n                else {\n                    this.attachShadow({ mode: 'open' });\n                }\n            }\n            else {\n                this.shadowRoot = this;\n            }\n        },\n    });\n    Cstr.is = cmpMeta.$tagName$;\n    return proxyComponent(Cstr, cmpMeta, 1 /* PROXY_FLAGS.isElementConstructor */ | 2 /* PROXY_FLAGS.proxyState */);\n};\nconst forceModeUpdate = (elm) => {\n    if (BUILD.style && BUILD.mode && !BUILD.lazyLoad) {\n        const mode = computeMode(elm);\n        const hostRef = getHostRef(elm);\n        if (hostRef.$modeName$ !== mode) {\n            const cmpMeta = hostRef.$cmpMeta$;\n            const oldScopeId = elm['s-sc'];\n            const scopeId = getScopeId(cmpMeta, mode);\n            const style = elm.constructor.style[mode];\n            const flags = cmpMeta.$flags$;\n            if (style) {\n                if (!styles.has(scopeId)) {\n                    registerStyle(scopeId, style, !!(flags & 1 /* CMP_FLAGS.shadowDomEncapsulation */));\n                }\n                hostRef.$modeName$ = mode;\n                elm.classList.remove(oldScopeId + '-h', oldScopeId + '-s');\n                attachStyles(hostRef);\n                forceUpdate(elm);\n            }\n        }\n    }\n};\n/**\n * Kick off hot-module-replacement for a component. In order to replace the\n * component in-place we:\n *\n * 1. get a reference to the {@link d.HostRef} for the element\n * 2. reset the element's runtime flags\n * 3. re-run the initialization logic for the element (via\n *    {@link initializeComponent})\n *\n * @param hostElement the host element for the component which we want to start\n * doing HMR\n * @param cmpMeta runtime metadata for the component\n * @param hmrVersionId the current HMR version ID\n */\nconst hmrStart = (hostElement, cmpMeta, hmrVersionId) => {\n    // ¯\\_(ツ)_/¯\n    const hostRef = getHostRef(hostElement);\n    // reset state flags to only have been connected\n    hostRef.$flags$ = 1 /* HOST_FLAGS.hasConnected */;\n    // TODO\n    // detach any event listeners that may have been added\n    // because we're not passing an exact event name it'll\n    // remove all of this element's event, which is good\n    // re-initialize the component\n    initializeComponent(hostElement, hostRef, cmpMeta, hmrVersionId);\n};\nconst bootstrapLazy = (lazyBundles, options = {}) => {\n    var _a;\n    if (BUILD.profile && performance.mark) {\n        performance.mark('st:app:start');\n    }\n    installDevTools();\n    const endBootstrap = createTime('bootstrapLazy');\n    const cmpTags = [];\n    const exclude = options.exclude || [];\n    const customElements = win.customElements;\n    const head = doc.head;\n    const metaCharset = /*@__PURE__*/ head.querySelector('meta[charset]');\n    const dataStyles = /*@__PURE__*/ doc.createElement('style');\n    const deferredConnectedCallbacks = [];\n    const styles = /*@__PURE__*/ doc.querySelectorAll(`[${HYDRATED_STYLE_ID}]`);\n    let appLoadFallback;\n    let isBootstrapping = true;\n    let i = 0;\n    Object.assign(plt, options);\n    plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n    if (BUILD.asyncQueue) {\n        if (options.syncQueue) {\n            plt.$flags$ |= 4 /* PLATFORM_FLAGS.queueSync */;\n        }\n    }\n    if (BUILD.hydrateClientSide) {\n        // If the app is already hydrated there is not point to disable the\n        // async queue. This will improve the first input delay\n        plt.$flags$ |= 2 /* PLATFORM_FLAGS.appLoaded */;\n    }\n    if (BUILD.hydrateClientSide && BUILD.shadowDom) {\n        for (; i < styles.length; i++) {\n            registerStyle(styles[i].getAttribute(HYDRATED_STYLE_ID), convertScopedToShadow(styles[i].innerHTML), true);\n        }\n    }\n    let hasSlotRelocation = false;\n    lazyBundles.map((lazyBundle) => {\n        lazyBundle[1].map((compactMeta) => {\n            var _a;\n            const cmpMeta = {\n                $flags$: compactMeta[0],\n                $tagName$: compactMeta[1],\n                $members$: compactMeta[2],\n                $listeners$: compactMeta[3],\n            };\n            // Check if we are using slots outside the shadow DOM in this component.\n            // We'll use this information later to add styles for `slot-fb` elements\n            if (cmpMeta.$flags$ & 4 /* CMP_FLAGS.hasSlotRelocation */) {\n                hasSlotRelocation = true;\n            }\n            if (BUILD.member) {\n                cmpMeta.$members$ = compactMeta[2];\n            }\n            if (BUILD.hostListener) {\n                cmpMeta.$listeners$ = compactMeta[3];\n            }\n            if (BUILD.reflect) {\n                cmpMeta.$attrsToReflect$ = [];\n            }\n            if (BUILD.watchCallback) {\n                cmpMeta.$watchers$ = (_a = compactMeta[4]) !== null && _a !== void 0 ? _a : {};\n            }\n            if (BUILD.shadowDom && !supportsShadow && cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n                // TODO(STENCIL-854): Remove code related to legacy shadowDomShim field\n                cmpMeta.$flags$ |= 8 /* CMP_FLAGS.needsShadowDomShim */;\n            }\n            const tagName = BUILD.transformTagName && options.transformTagName\n                ? options.transformTagName(cmpMeta.$tagName$)\n                : cmpMeta.$tagName$;\n            const HostElement = class extends HTMLElement {\n                // StencilLazyHost\n                constructor(self) {\n                    // @ts-ignore\n                    super(self);\n                    self = this;\n                    registerHost(self, cmpMeta);\n                    if (BUILD.shadowDom && cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n                        // this component is using shadow dom\n                        // and this browser supports shadow dom\n                        // add the read-only property \"shadowRoot\" to the host element\n                        // adding the shadow root build conditionals to minimize runtime\n                        if (supportsShadow) {\n                            if (BUILD.shadowDelegatesFocus) {\n                                self.attachShadow({\n                                    mode: 'open',\n                                    delegatesFocus: !!(cmpMeta.$flags$ & 16 /* CMP_FLAGS.shadowDelegatesFocus */),\n                                });\n                            }\n                            else {\n                                self.attachShadow({ mode: 'open' });\n                            }\n                        }\n                        else if (!BUILD.hydrateServerSide && !('shadowRoot' in self)) {\n                            self.shadowRoot = self;\n                        }\n                    }\n                }\n                connectedCallback() {\n                    if (appLoadFallback) {\n                        clearTimeout(appLoadFallback);\n                        appLoadFallback = null;\n                    }\n                    if (isBootstrapping) {\n                        // connectedCallback will be processed once all components have been registered\n                        deferredConnectedCallbacks.push(this);\n                    }\n                    else {\n                        plt.jmp(() => connectedCallback(this));\n                    }\n                }\n                disconnectedCallback() {\n                    plt.jmp(() => disconnectedCallback(this));\n                }\n                componentOnReady() {\n                    return getHostRef(this).$onReadyPromise$;\n                }\n            };\n            // TODO(STENCIL-914): this check and `else` block can go away and be replaced by just `BUILD.scoped` once we\n            // default our pseudo-slot behavior\n            if (BUILD.experimentalSlotFixes && BUILD.scoped) {\n                patchPseudoShadowDom(HostElement.prototype, cmpMeta);\n            }\n            else {\n                if (BUILD.slotChildNodesFix) {\n                    patchChildSlotNodes(HostElement.prototype, cmpMeta);\n                }\n                if (BUILD.cloneNodeFix) {\n                    patchCloneNode(HostElement.prototype);\n                }\n                if (BUILD.appendChildSlotFix) {\n                    patchSlotAppendChild(HostElement.prototype);\n                }\n                if (BUILD.scopedSlotTextContentFix) {\n                    patchTextContent(HostElement.prototype, cmpMeta);\n                }\n            }\n            // if the component is formAssociated we need to set that on the host\n            // element so that it will be ready for `attachInternals` to be called on\n            // it later on\n            if (BUILD.formAssociated && cmpMeta.$flags$ & 64 /* CMP_FLAGS.formAssociated */) {\n                HostElement.formAssociated = true;\n            }\n            if (BUILD.hotModuleReplacement) {\n                // if we're in an HMR dev build then we need to set up the callback\n                // which will carry out the work of actually replacing the module for\n                // this particular component\n                HostElement.prototype['s-hmr'] = function (hmrVersionId) {\n                    hmrStart(this, cmpMeta, hmrVersionId);\n                };\n            }\n            cmpMeta.$lazyBundleId$ = lazyBundle[0];\n            if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n                cmpTags.push(tagName);\n                customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* PROXY_FLAGS.isElementConstructor */));\n            }\n        });\n    });\n    // Add styles for `slot-fb` elements if any of our components are using slots outside the Shadow DOM\n    if (hasSlotRelocation) {\n        dataStyles.innerHTML += SLOT_FB_CSS;\n    }\n    // Add hydration styles\n    if (BUILD.invisiblePrehydration && (BUILD.hydratedClass || BUILD.hydratedAttribute)) {\n        dataStyles.innerHTML += cmpTags + HYDRATED_CSS;\n    }\n    // If we have styles, add them to the DOM\n    if (dataStyles.innerHTML.length) {\n        dataStyles.setAttribute('data-styles', '');\n        head.insertBefore(dataStyles, metaCharset ? metaCharset.nextSibling : head.firstChild);\n        // Apply CSP nonce to the style tag if it exists\n        const nonce = (_a = plt.$nonce$) !== null && _a !== void 0 ? _a : queryNonceMetaTagContent(doc);\n        if (nonce != null) {\n            dataStyles.setAttribute('nonce', nonce);\n        }\n    }\n    // Process deferred connectedCallbacks now all components have been registered\n    isBootstrapping = false;\n    if (deferredConnectedCallbacks.length) {\n        deferredConnectedCallbacks.map((host) => host.connectedCallback());\n    }\n    else {\n        if (BUILD.profile) {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30, 'timeout')));\n        }\n        else {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30)));\n        }\n    }\n    // Fallback appLoad event\n    endBootstrap();\n};\nconst Fragment = (_, children) => children;\nconst addHostEventListeners = (elm, hostRef, listeners, attachParentListeners) => {\n    if (BUILD.hostListener && listeners) {\n        // this is called immediately within the element's constructor\n        // initialize our event listeners on the host element\n        // we do this now so that we can listen to events that may\n        // have fired even before the instance is ready\n        if (BUILD.hostListenerTargetParent) {\n            // this component may have event listeners that should be attached to the parent\n            if (attachParentListeners) {\n                // this is being ran from within the connectedCallback\n                // which is important so that we know the host element actually has a parent element\n                // filter out the listeners to only have the ones that ARE being attached to the parent\n                listeners = listeners.filter(([flags]) => flags & 32 /* LISTENER_FLAGS.TargetParent */);\n            }\n            else {\n                // this is being ran from within the component constructor\n                // everything BUT the parent element listeners should be attached at this time\n                // filter out the listeners that are NOT being attached to the parent\n                listeners = listeners.filter(([flags]) => !(flags & 32 /* LISTENER_FLAGS.TargetParent */));\n            }\n        }\n        listeners.map(([flags, name, method]) => {\n            const target = BUILD.hostListenerTarget ? getHostListenerTarget(elm, flags) : elm;\n            const handler = hostListenerProxy(hostRef, method);\n            const opts = hostListenerOpts(flags);\n            plt.ael(target, name, handler, opts);\n            (hostRef.$rmListeners$ = hostRef.$rmListeners$ || []).push(() => plt.rel(target, name, handler, opts));\n        });\n    }\n};\nconst hostListenerProxy = (hostRef, methodName) => (ev) => {\n    try {\n        if (BUILD.lazyLoad) {\n            if (hostRef.$flags$ & 256 /* HOST_FLAGS.isListenReady */) {\n                // instance is ready, let's call it's member method for this event\n                hostRef.$lazyInstance$[methodName](ev);\n            }\n            else {\n                (hostRef.$queuedListeners$ = hostRef.$queuedListeners$ || []).push([methodName, ev]);\n            }\n        }\n        else {\n            hostRef.$hostElement$[methodName](ev);\n        }\n    }\n    catch (e) {\n        consoleError(e);\n    }\n};\nconst getHostListenerTarget = (elm, flags) => {\n    if (BUILD.hostListenerTargetDocument && flags & 4 /* LISTENER_FLAGS.TargetDocument */)\n        return doc;\n    if (BUILD.hostListenerTargetWindow && flags & 8 /* LISTENER_FLAGS.TargetWindow */)\n        return win;\n    if (BUILD.hostListenerTargetBody && flags & 16 /* LISTENER_FLAGS.TargetBody */)\n        return doc.body;\n    if (BUILD.hostListenerTargetParent && flags & 32 /* LISTENER_FLAGS.TargetParent */)\n        return elm.parentElement;\n    return elm;\n};\n// prettier-ignore\nconst hostListenerOpts = (flags) => supportsListenerOptions\n    ? ({\n        passive: (flags & 1 /* LISTENER_FLAGS.Passive */) !== 0,\n        capture: (flags & 2 /* LISTENER_FLAGS.Capture */) !== 0,\n    })\n    : (flags & 2 /* LISTENER_FLAGS.Capture */) !== 0;\n/**\n * Assigns the given value to the nonce property on the runtime platform object.\n * During runtime, this value is used to set the nonce attribute on all dynamically created script and style tags.\n * @param nonce The value to be assigned to the platform nonce property.\n * @returns void\n */\nconst setNonce = (nonce) => (plt.$nonce$ = nonce);\nconst setPlatformOptions = (opts) => Object.assign(plt, opts);\nconst insertVdomAnnotations = (doc, staticComponents) => {\n    if (doc != null) {\n        const docData = {\n            hostIds: 0,\n            rootLevelIds: 0,\n            staticComponents: new Set(staticComponents),\n        };\n        const orgLocationNodes = [];\n        parseVNodeAnnotations(doc, doc.body, docData, orgLocationNodes);\n        orgLocationNodes.forEach((orgLocationNode) => {\n            if (orgLocationNode != null) {\n                const nodeRef = orgLocationNode['s-nr'];\n                let hostId = nodeRef['s-host-id'];\n                let nodeId = nodeRef['s-node-id'];\n                let childId = `${hostId}.${nodeId}`;\n                if (hostId == null) {\n                    hostId = 0;\n                    docData.rootLevelIds++;\n                    nodeId = docData.rootLevelIds;\n                    childId = `${hostId}.${nodeId}`;\n                    if (nodeRef.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n                        nodeRef.setAttribute(HYDRATE_CHILD_ID, childId);\n                    }\n                    else if (nodeRef.nodeType === 3 /* NODE_TYPE.TextNode */) {\n                        if (hostId === 0) {\n                            const textContent = nodeRef.nodeValue.trim();\n                            if (textContent === '') {\n                                // useless whitespace node at the document root\n                                orgLocationNode.remove();\n                                return;\n                            }\n                        }\n                        const commentBeforeTextNode = doc.createComment(childId);\n                        commentBeforeTextNode.nodeValue = `${TEXT_NODE_ID}.${childId}`;\n                        nodeRef.parentNode.insertBefore(commentBeforeTextNode, nodeRef);\n                    }\n                }\n                let orgLocationNodeId = `${ORG_LOCATION_ID}.${childId}`;\n                const orgLocationParentNode = orgLocationNode.parentElement;\n                if (orgLocationParentNode) {\n                    if (orgLocationParentNode['s-en'] === '') {\n                        // ending with a \".\" means that the parent element\n                        // of this node's original location is a SHADOW dom element\n                        // and this node is apart of the root level light dom\n                        orgLocationNodeId += `.`;\n                    }\n                    else if (orgLocationParentNode['s-en'] === 'c') {\n                        // ending with a \".c\" means that the parent element\n                        // of this node's original location is a SCOPED element\n                        // and this node is apart of the root level light dom\n                        orgLocationNodeId += `.c`;\n                    }\n                }\n                orgLocationNode.nodeValue = orgLocationNodeId;\n            }\n        });\n    }\n};\nconst parseVNodeAnnotations = (doc, node, docData, orgLocationNodes) => {\n    if (node == null) {\n        return;\n    }\n    if (node['s-nr'] != null) {\n        orgLocationNodes.push(node);\n    }\n    if (node.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n        node.childNodes.forEach((childNode) => {\n            const hostRef = getHostRef(childNode);\n            if (hostRef != null && !docData.staticComponents.has(childNode.nodeName.toLowerCase())) {\n                const cmpData = {\n                    nodeIds: 0,\n                };\n                insertVNodeAnnotations(doc, childNode, hostRef.$vnode$, docData, cmpData);\n            }\n            parseVNodeAnnotations(doc, childNode, docData, orgLocationNodes);\n        });\n    }\n};\nconst insertVNodeAnnotations = (doc, hostElm, vnode, docData, cmpData) => {\n    if (vnode != null) {\n        const hostId = ++docData.hostIds;\n        hostElm.setAttribute(HYDRATE_ID, hostId);\n        if (hostElm['s-cr'] != null) {\n            hostElm['s-cr'].nodeValue = `${CONTENT_REF_ID}.${hostId}`;\n        }\n        if (vnode.$children$ != null) {\n            const depth = 0;\n            vnode.$children$.forEach((vnodeChild, index) => {\n                insertChildVNodeAnnotations(doc, vnodeChild, cmpData, hostId, depth, index);\n            });\n        }\n        if (hostElm && vnode && vnode.$elm$ && !hostElm.hasAttribute('c-id')) {\n            const parent = hostElm.parentElement;\n            if (parent && parent.childNodes) {\n                const parentChildNodes = Array.from(parent.childNodes);\n                const comment = parentChildNodes.find((node) => node.nodeType === 8 /* NODE_TYPE.CommentNode */ && node['s-sr']);\n                if (comment) {\n                    const index = parentChildNodes.indexOf(hostElm) - 1;\n                    vnode.$elm$.setAttribute(HYDRATE_CHILD_ID, `${comment['s-host-id']}.${comment['s-node-id']}.0.${index}`);\n                }\n            }\n        }\n    }\n};\nconst insertChildVNodeAnnotations = (doc, vnodeChild, cmpData, hostId, depth, index) => {\n    const childElm = vnodeChild.$elm$;\n    if (childElm == null) {\n        return;\n    }\n    const nodeId = cmpData.nodeIds++;\n    const childId = `${hostId}.${nodeId}.${depth}.${index}`;\n    childElm['s-host-id'] = hostId;\n    childElm['s-node-id'] = nodeId;\n    if (childElm.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n        childElm.setAttribute(HYDRATE_CHILD_ID, childId);\n    }\n    else if (childElm.nodeType === 3 /* NODE_TYPE.TextNode */) {\n        const parentNode = childElm.parentNode;\n        const nodeName = parentNode.nodeName;\n        if (nodeName !== 'STYLE' && nodeName !== 'SCRIPT') {\n            const textNodeId = `${TEXT_NODE_ID}.${childId}`;\n            const commentBeforeTextNode = doc.createComment(textNodeId);\n            parentNode.insertBefore(commentBeforeTextNode, childElm);\n        }\n    }\n    else if (childElm.nodeType === 8 /* NODE_TYPE.CommentNode */) {\n        if (childElm['s-sr']) {\n            const slotName = childElm['s-sn'] || '';\n            const slotNodeId = `${SLOT_NODE_ID}.${childId}.${slotName}`;\n            childElm.nodeValue = slotNodeId;\n        }\n    }\n    if (vnodeChild.$children$ != null) {\n        const childDepth = depth + 1;\n        vnodeChild.$children$.forEach((vnode, index) => {\n            insertChildVNodeAnnotations(doc, vnode, cmpData, hostId, childDepth, index);\n        });\n    }\n};\n/**\n * A WeakMap mapping runtime component references to their corresponding host reference\n * instances.\n */\nconst hostRefs = /*@__PURE__*/ new WeakMap();\n/**\n * Given a {@link d.RuntimeRef} retrieve the corresponding {@link d.HostRef}\n *\n * @param ref the runtime ref of interest\n * @returns the Host reference (if found) or undefined\n */\nconst getHostRef = (ref) => hostRefs.get(ref);\n/**\n * Register a lazy instance with the {@link hostRefs} object so it's\n * corresponding {@link d.HostRef} can be retrieved later.\n *\n * @param lazyInstance the lazy instance of interest\n * @param hostRef that instances `HostRef` object\n * @returns a reference to the host ref WeakMap\n */\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set((hostRef.$lazyInstance$ = lazyInstance), hostRef);\n/**\n * Register a host element for a Stencil component, setting up various metadata\n * and callbacks based on {@link BUILD} flags as well as the component's runtime\n * metadata.\n *\n * @param hostElement the host element to register\n * @param cmpMeta runtime metadata for that component\n * @returns a reference to the host ref WeakMap\n */\nconst registerHost = (hostElement, cmpMeta) => {\n    const hostRef = {\n        $flags$: 0,\n        $hostElement$: hostElement,\n        $cmpMeta$: cmpMeta,\n        $instanceValues$: new Map(),\n    };\n    if (BUILD.isDev) {\n        hostRef.$renderCount$ = 0;\n    }\n    if (BUILD.method && BUILD.lazyLoad) {\n        hostRef.$onInstancePromise$ = new Promise((r) => (hostRef.$onInstanceResolve$ = r));\n    }\n    if (BUILD.asyncLoading) {\n        hostRef.$onReadyPromise$ = new Promise((r) => (hostRef.$onReadyResolve$ = r));\n        hostElement['s-p'] = [];\n        hostElement['s-rc'] = [];\n    }\n    addHostEventListeners(hostElement, hostRef, cmpMeta.$listeners$, false);\n    return hostRefs.set(hostElement, hostRef);\n};\nconst isMemberInElement = (elm, memberName) => memberName in elm;\nconst consoleError = (e, el) => (customError || console.error)(e, el);\nconst STENCIL_DEV_MODE = BUILD.isTesting\n    ? ['STENCIL:'] // E2E testing\n    : [\n        '%cstencil',\n        'color: white;background:#4c47ff;font-weight: bold; font-size:10px; padding:2px 6px; border-radius: 5px',\n    ];\nconst consoleDevError = (...m) => console.error(...STENCIL_DEV_MODE, ...m);\nconst consoleDevWarn = (...m) => console.warn(...STENCIL_DEV_MODE, ...m);\nconst consoleDevInfo = (...m) => console.info(...STENCIL_DEV_MODE, ...m);\nconst setErrorHandler = (handler) => (customError = handler);\nconst cmpModules = /*@__PURE__*/ new Map();\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n    // loadModuleImport\n    const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n    const bundleId = cmpMeta.$lazyBundleId$;\n    if (BUILD.isDev && typeof bundleId !== 'string') {\n        consoleDevError(`Trying to lazily load component <${cmpMeta.$tagName$}> with style mode \"${hostRef.$modeName$}\", but it does not exist.`);\n        return undefined;\n    }\n    const module = !BUILD.hotModuleReplacement ? cmpModules.get(bundleId) : false;\n    if (module) {\n        return module[exportName];\n    }\n    /*!__STENCIL_STATIC_IMPORT_SWITCH__*/\n    return import(\n    /* @vite-ignore */\n    /* webpackInclude: /\\.entry\\.js$/ */\n    /* webpackExclude: /\\.system\\.entry\\.js$/ */\n    /* webpackMode: \"lazy\" */\n    `./${bundleId}.entry.js${BUILD.hotModuleReplacement && hmrVersionId ? '?s-hmr=' + hmrVersionId : ''}`).then((importedModule) => {\n        if (!BUILD.hotModuleReplacement) {\n            cmpModules.set(bundleId, importedModule);\n        }\n        return importedModule[exportName];\n    }, consoleError);\n};\nconst styles = /*@__PURE__*/ new Map();\nconst modeResolutionChain = [];\nconst win = typeof window !== 'undefined' ? window : {};\nconst doc = win.document || { head: {} };\nconst H = (win.HTMLElement || class {\n});\nconst plt = {\n    $flags$: 0,\n    $resourcesUrl$: '',\n    jmp: (h) => h(),\n    raf: (h) => requestAnimationFrame(h),\n    ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n    rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n    ce: (eventName, opts) => new CustomEvent(eventName, opts),\n};\nconst setPlatformHelpers = (helpers) => {\n    Object.assign(plt, helpers);\n};\nconst supportsShadow = \n// TODO(STENCIL-854): Remove code related to legacy shadowDomShim field\nBUILD.shadowDomShim && BUILD.shadowDom\n    ? /*@__PURE__*/ (() => (doc.head.attachShadow + '').indexOf('[native') > -1)()\n    : true;\nconst supportsListenerOptions = /*@__PURE__*/ (() => {\n    let supportsListenerOptions = false;\n    try {\n        doc.addEventListener('e', null, Object.defineProperty({}, 'passive', {\n            get() {\n                supportsListenerOptions = true;\n            },\n        }));\n    }\n    catch (e) { }\n    return supportsListenerOptions;\n})();\nconst promiseResolve = (v) => Promise.resolve(v);\nconst supportsConstructableStylesheets = BUILD.constructableCSS\n    ? /*@__PURE__*/ (() => {\n        try {\n            new CSSStyleSheet();\n            return typeof new CSSStyleSheet().replaceSync === 'function';\n        }\n        catch (e) { }\n        return false;\n    })()\n    : false;\nconst queueDomReads = [];\nconst queueDomWrites = [];\nconst queueDomWritesLow = [];\nconst queueTask = (queue, write) => (cb) => {\n    queue.push(cb);\n    if (!queuePending) {\n        queuePending = true;\n        if (write && plt.$flags$ & 4 /* PLATFORM_FLAGS.queueSync */) {\n            nextTick(flush);\n        }\n        else {\n            plt.raf(flush);\n        }\n    }\n};\nconst consume = (queue) => {\n    for (let i = 0; i < queue.length; i++) {\n        try {\n            queue[i](performance.now());\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    queue.length = 0;\n};\nconst consumeTimeout = (queue, timeout) => {\n    let i = 0;\n    let ts = 0;\n    while (i < queue.length && (ts = performance.now()) < timeout) {\n        try {\n            queue[i++](ts);\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    if (i === queue.length) {\n        queue.length = 0;\n    }\n    else if (i !== 0) {\n        queue.splice(0, i);\n    }\n};\nconst flush = () => {\n    if (BUILD.asyncQueue) {\n        queueCongestion++;\n    }\n    // always force a bunch of medium callbacks to run, but still have\n    // a throttle on how many can run in a certain time\n    // DOM READS!!!\n    consume(queueDomReads);\n    // DOM WRITES!!!\n    if (BUILD.asyncQueue) {\n        const timeout = (plt.$flags$ & 6 /* PLATFORM_FLAGS.queueMask */) === 2 /* PLATFORM_FLAGS.appLoaded */\n            ? performance.now() + 14 * Math.ceil(queueCongestion * (1.0 / 10.0))\n            : Infinity;\n        consumeTimeout(queueDomWrites, timeout);\n        consumeTimeout(queueDomWritesLow, timeout);\n        if (queueDomWrites.length > 0) {\n            queueDomWritesLow.push(...queueDomWrites);\n            queueDomWrites.length = 0;\n        }\n        if ((queuePending = queueDomReads.length + queueDomWrites.length + queueDomWritesLow.length > 0)) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n        else {\n            queueCongestion = 0;\n        }\n    }\n    else {\n        consume(queueDomWrites);\n        if ((queuePending = queueDomReads.length > 0)) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n    }\n};\nconst nextTick = (cb) => promiseResolve().then(cb);\nconst readTask = /*@__PURE__*/ queueTask(queueDomReads, false);\nconst writeTask = /*@__PURE__*/ queueTask(queueDomWrites, true);\nexport { BUILD, Env, NAMESPACE } from '@stencil/core/internal/app-data';\nexport { Build, Fragment, H, H as HTMLElement, Host, STENCIL_DEV_MODE, addHostEventListeners, bootstrapLazy, cmpModules, connectedCallback, consoleDevError, consoleDevInfo, consoleDevWarn, consoleError, createEvent, defineCustomElement, disconnectedCallback, doc, forceModeUpdate, forceUpdate, getAssetPath, getElement, getHostRef, getMode, getRenderingRef, getValue, h, insertVdomAnnotations, isMemberInElement, loadModule, modeResolutionChain, nextTick, parsePropertyValue, plt, postUpdateComponent, promiseResolve, proxyComponent, proxyCustomElement, readTask, registerHost, registerInstance, renderVdom, setAssetPath, setErrorHandler, setMode, setNonce, setPlatformHelpers, setPlatformOptions, setValue, styles, supportsConstructableStylesheets, supportsListenerOptions, supportsShadow, win, writeTask };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}